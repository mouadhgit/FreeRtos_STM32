
FreeRtos_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fd4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001474  08007164  08007164  00017164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085d8  080085d8  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  080085d8  080085d8  000185d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085e0  080085e0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085e0  080085e0  000185e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085e4  080085e4  000185e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080085e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          00009420  20000020  20000020  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20009440  20009440  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bf36  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035b9  00000000  00000000  0003bf86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d0  00000000  00000000  0003f540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012a8  00000000  00000000  00040910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000253df  00000000  00000000  00041bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000184d5  00000000  00000000  00066f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eaa51  00000000  00000000  0007f46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00169ebd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005358  00000000  00000000  00169f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000020 	.word	0x20000020
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800714c 	.word	0x0800714c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000024 	.word	0x20000024
 80001cc:	0800714c 	.word	0x0800714c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f001 ff63 	bl	8002398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f83d 	bl	8000550 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  vTraceEnable(TRC_START);
 80004d6:	2001      	movs	r0, #1
 80004d8:	f000 fba4 	bl	8000c24 <vTraceEnable>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f91c 	bl	8000718 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f8f0 	bl	80006c4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004e4:	f000 f89c 	bl	8000620 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /*Create Red Led Task*/
  xTaskCreate(vRedLEDTask,"Red Led Task",128,NULL,1, &xRedLEDTaskHandle);
 80004e8:	4b10      	ldr	r3, [pc, #64]	; (800052c <main+0x64>)
 80004ea:	9301      	str	r3, [sp, #4]
 80004ec:	2301      	movs	r3, #1
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	2300      	movs	r3, #0
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	490e      	ldr	r1, [pc, #56]	; (8000530 <main+0x68>)
 80004f6:	480f      	ldr	r0, [pc, #60]	; (8000534 <main+0x6c>)
 80004f8:	f004 fec9 	bl	800528e <xTaskCreate>
  xTaskCreate(vGreenLEDTask,"Green Led Task",128,NULL,1, &xGreenLEDTaskHandle);
 80004fc:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <main+0x70>)
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	2301      	movs	r3, #1
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	2300      	movs	r3, #0
 8000506:	2280      	movs	r2, #128	; 0x80
 8000508:	490c      	ldr	r1, [pc, #48]	; (800053c <main+0x74>)
 800050a:	480d      	ldr	r0, [pc, #52]	; (8000540 <main+0x78>)
 800050c:	f004 febf 	bl	800528e <xTaskCreate>
  xTaskCreate(vReadTemperature,"Temperature Sensor",128,NULL,1,&xReadTemperatureHandle);
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <main+0x7c>)
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	2301      	movs	r3, #1
 8000516:	9300      	str	r3, [sp, #0]
 8000518:	2300      	movs	r3, #0
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	490a      	ldr	r1, [pc, #40]	; (8000548 <main+0x80>)
 800051e:	480b      	ldr	r0, [pc, #44]	; (800054c <main+0x84>)
 8000520:	f004 feb5 	bl	800528e <xTaskCreate>
  vTaskStartScheduler();
 8000524:	f005 f85c 	bl	80055e0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000528:	e7fe      	b.n	8000528 <main+0x60>
 800052a:	bf00      	nop
 800052c:	200079b4 	.word	0x200079b4
 8000530:	08007164 	.word	0x08007164
 8000534:	080007bd 	.word	0x080007bd
 8000538:	20007a04 	.word	0x20007a04
 800053c:	08007174 	.word	0x08007174
 8000540:	080007dd 	.word	0x080007dd
 8000544:	20007a00 	.word	0x20007a00
 8000548:	08007184 	.word	0x08007184
 800054c:	080007fd 	.word	0x080007fd

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0320 	add.w	r3, r7, #32
 800055a:	2230      	movs	r2, #48	; 0x30
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f006 fdec 	bl	800713c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	2300      	movs	r3, #0
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	4b27      	ldr	r3, [pc, #156]	; (8000618 <SystemClock_Config+0xc8>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	4a26      	ldr	r2, [pc, #152]	; (8000618 <SystemClock_Config+0xc8>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	; 0x40
 8000584:	4b24      	ldr	r3, [pc, #144]	; (8000618 <SystemClock_Config+0xc8>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	4b21      	ldr	r3, [pc, #132]	; (800061c <SystemClock_Config+0xcc>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a20      	ldr	r2, [pc, #128]	; (800061c <SystemClock_Config+0xcc>)
 800059a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	4b1e      	ldr	r3, [pc, #120]	; (800061c <SystemClock_Config+0xcc>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ac:	2302      	movs	r3, #2
 80005ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b0:	2301      	movs	r3, #1
 80005b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b4:	2310      	movs	r3, #16
 80005b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b8:	2302      	movs	r3, #2
 80005ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005bc:	2300      	movs	r3, #0
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c0:	2308      	movs	r3, #8
 80005c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80005c4:	2350      	movs	r3, #80	; 0x50
 80005c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005cc:	2304      	movs	r3, #4
 80005ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0320 	add.w	r3, r7, #32
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 fc59 	bl	8002e8c <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e0:	f000 f928 	bl	8000834 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2302      	movs	r3, #2
 80005ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	2102      	movs	r1, #2
 8000600:	4618      	mov	r0, r3
 8000602:	f002 febb 	bl	800337c <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800060c:	f000 f912 	bl	8000834 <Error_Handler>
  }
}
 8000610:	bf00      	nop
 8000612:	3750      	adds	r7, #80	; 0x50
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000626:	463b      	mov	r3, r7
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000632:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000634:	4a21      	ldr	r2, [pc, #132]	; (80006bc <MX_ADC1_Init+0x9c>)
 8000636:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <MX_ADC1_Init+0x98>)
 800063a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800063e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000640:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000646:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800064c:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <MX_ADC1_Init+0x98>)
 800064e:	2200      	movs	r2, #0
 8000650:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800065a:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <MX_ADC1_Init+0x98>)
 800065c:	2200      	movs	r2, #0
 800065e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000662:	4a17      	ldr	r2, [pc, #92]	; (80006c0 <MX_ADC1_Init+0xa0>)
 8000664:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000666:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_ADC1_Init+0x98>)
 800066e:	2201      	movs	r2, #1
 8000670:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000674:	2200      	movs	r2, #0
 8000676:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_ADC1_Init+0x98>)
 800067c:	2201      	movs	r2, #1
 800067e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000680:	480d      	ldr	r0, [pc, #52]	; (80006b8 <MX_ADC1_Init+0x98>)
 8000682:	f001 feef 	bl	8002464 <HAL_ADC_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800068c:	f000 f8d2 	bl	8000834 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000690:	2310      	movs	r3, #16
 8000692:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000694:	2301      	movs	r3, #1
 8000696:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	4619      	mov	r1, r3
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_ADC1_Init+0x98>)
 80006a2:	f001 ff23 	bl	80024ec <HAL_ADC_ConfigChannel>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006ac:	f000 f8c2 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	200079b8 	.word	0x200079b8
 80006bc:	40012000 	.word	0x40012000
 80006c0:	0f000001 	.word	0x0f000001

080006c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_USART2_UART_Init+0x50>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006fc:	f003 faee 	bl	8003cdc <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000706:	f000 f895 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20007a08 	.word	0x20007a08
 8000714:	40004400 	.word	0x40004400

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <MX_GPIO_Init+0x98>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a1e      	ldr	r2, [pc, #120]	; (80007b0 <MX_GPIO_Init+0x98>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <MX_GPIO_Init+0x98>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_GPIO_Init+0x98>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a17      	ldr	r2, [pc, #92]	; (80007b0 <MX_GPIO_Init+0x98>)
 8000754:	f043 0308 	orr.w	r3, r3, #8
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_GPIO_Init+0x98>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0308 	and.w	r3, r3, #8
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GreenLed_Pin|RedLed_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 800076c:	4811      	ldr	r0, [pc, #68]	; (80007b4 <MX_GPIO_Init+0x9c>)
 800076e:	f002 fb59 	bl	8002e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UserButton_Pin */
  GPIO_InitStruct.Pin = UserButton_Pin;
 8000772:	2301      	movs	r3, #1
 8000774:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(UserButton_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	4619      	mov	r1, r3
 8000784:	480c      	ldr	r0, [pc, #48]	; (80007b8 <MX_GPIO_Init+0xa0>)
 8000786:	f002 f9b1 	bl	8002aec <HAL_GPIO_Init>

  /*Configure GPIO pins : GreenLed_Pin RedLed_Pin */
  GPIO_InitStruct.Pin = GreenLed_Pin|RedLed_Pin;
 800078a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800078e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	4619      	mov	r1, r3
 80007a2:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_GPIO_Init+0x9c>)
 80007a4:	f002 f9a2 	bl	8002aec <HAL_GPIO_Init>

}
 80007a8:	bf00      	nop
 80007aa:	3720      	adds	r7, #32
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020c00 	.word	0x40020c00
 80007b8:	40020000 	.word	0x40020000

080007bc <vRedLEDTask>:

/* USER CODE BEGIN 4 */
void vRedLEDTask(void *pvParameters){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	for(;;){
		HAL_GPIO_TogglePin(RedLed_GPIO_Port,RedLed_Pin);
 80007c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c8:	4803      	ldr	r0, [pc, #12]	; (80007d8 <vRedLEDTask+0x1c>)
 80007ca:	f002 fb44 	bl	8002e56 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80007ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007d2:	f001 fe23 	bl	800241c <HAL_Delay>
		HAL_GPIO_TogglePin(RedLed_GPIO_Port,RedLed_Pin);
 80007d6:	e7f5      	b.n	80007c4 <vRedLEDTask+0x8>
 80007d8:	40020c00 	.word	0x40020c00

080007dc <vGreenLEDTask>:
	}
}

void vGreenLEDTask(void *pvParameters){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	for(;;){
		HAL_GPIO_TogglePin(GreenLed_GPIO_Port,GreenLed_Pin);
 80007e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e8:	4803      	ldr	r0, [pc, #12]	; (80007f8 <vGreenLEDTask+0x1c>)
 80007ea:	f002 fb34 	bl	8002e56 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80007ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007f2:	f001 fe13 	bl	800241c <HAL_Delay>
		HAL_GPIO_TogglePin(GreenLed_GPIO_Port,GreenLed_Pin);
 80007f6:	e7f5      	b.n	80007e4 <vGreenLEDTask+0x8>
 80007f8:	40020c00 	.word	0x40020c00

080007fc <vReadTemperature>:
	}
}

void vReadTemperature(void *pvParameters){
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	//uint16_t temp = 5;
	//HAL_Delay(1000);
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a04      	ldr	r2, [pc, #16]	; (8000830 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d101      	bne.n	8000826 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000822:	f001 fddb 	bl	80023dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40010000 	.word	0x40010000

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
}
 800083a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083c:	e7fe      	b.n	800083c <Error_Handler+0x8>
	...

08000840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <HAL_MspInit+0x4c>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	4a0f      	ldr	r2, [pc, #60]	; (800088c <HAL_MspInit+0x4c>)
 8000850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000854:	6453      	str	r3, [r2, #68]	; 0x44
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <HAL_MspInit+0x4c>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <HAL_MspInit+0x4c>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	4a08      	ldr	r2, [pc, #32]	; (800088c <HAL_MspInit+0x4c>)
 800086c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000870:	6413      	str	r3, [r2, #64]	; 0x40
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_MspInit+0x4c>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800

08000890 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <HAL_ADC_MspInit+0x3c>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d10d      	bne.n	80008be <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <HAL_ADC_MspInit+0x40>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	4a09      	ldr	r2, [pc, #36]	; (80008d0 <HAL_ADC_MspInit+0x40>)
 80008ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b0:	6453      	str	r3, [r2, #68]	; 0x44
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <HAL_ADC_MspInit+0x40>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008be:	bf00      	nop
 80008c0:	3714      	adds	r7, #20
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40012000 	.word	0x40012000
 80008d0:	40023800 	.word	0x40023800

080008d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a19      	ldr	r2, [pc, #100]	; (8000958 <HAL_UART_MspInit+0x84>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d12b      	bne.n	800094e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <HAL_UART_MspInit+0x88>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	4a17      	ldr	r2, [pc, #92]	; (800095c <HAL_UART_MspInit+0x88>)
 8000900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000904:	6413      	str	r3, [r2, #64]	; 0x40
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <HAL_UART_MspInit+0x88>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <HAL_UART_MspInit+0x88>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a10      	ldr	r2, [pc, #64]	; (800095c <HAL_UART_MspInit+0x88>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <HAL_UART_MspInit+0x88>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800092e:	230c      	movs	r3, #12
 8000930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800093e:	2307      	movs	r3, #7
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	4805      	ldr	r0, [pc, #20]	; (8000960 <HAL_UART_MspInit+0x8c>)
 800094a:	f002 f8cf 	bl	8002aec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800094e:	bf00      	nop
 8000950:	3728      	adds	r7, #40	; 0x28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40004400 	.word	0x40004400
 800095c:	40023800 	.word	0x40023800
 8000960:	40020000 	.word	0x40020000

08000964 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08c      	sub	sp, #48	; 0x30
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000974:	2200      	movs	r2, #0
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	2019      	movs	r0, #25
 800097a:	f002 f88d 	bl	8002a98 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800097e:	2019      	movs	r0, #25
 8000980:	f002 f8a6 	bl	8002ad0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <HAL_InitTick+0xa0>)
 800098a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098c:	4a1d      	ldr	r2, [pc, #116]	; (8000a04 <HAL_InitTick+0xa0>)
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	6453      	str	r3, [r2, #68]	; 0x44
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <HAL_InitTick+0xa0>)
 8000996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009a0:	f107 0210 	add.w	r2, r7, #16
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4611      	mov	r1, r2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f002 feb6 	bl	800371c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009b0:	f002 fea0 	bl	80036f4 <HAL_RCC_GetPCLK2Freq>
 80009b4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b8:	4a13      	ldr	r2, [pc, #76]	; (8000a08 <HAL_InitTick+0xa4>)
 80009ba:	fba2 2303 	umull	r2, r3, r2, r3
 80009be:	0c9b      	lsrs	r3, r3, #18
 80009c0:	3b01      	subs	r3, #1
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <HAL_InitTick+0xa8>)
 80009c6:	4a12      	ldr	r2, [pc, #72]	; (8000a10 <HAL_InitTick+0xac>)
 80009c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <HAL_InitTick+0xa8>)
 80009cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009d0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009d2:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <HAL_InitTick+0xa8>)
 80009d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <HAL_InitTick+0xa8>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <HAL_InitTick+0xa8>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80009e4:	4809      	ldr	r0, [pc, #36]	; (8000a0c <HAL_InitTick+0xa8>)
 80009e6:	f002 fecb 	bl	8003780 <HAL_TIM_Base_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d104      	bne.n	80009fa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80009f0:	4806      	ldr	r0, [pc, #24]	; (8000a0c <HAL_InitTick+0xa8>)
 80009f2:	f002 ff1f 	bl	8003834 <HAL_TIM_Base_Start_IT>
 80009f6:	4603      	mov	r3, r0
 80009f8:	e000      	b.n	80009fc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3730      	adds	r7, #48	; 0x30
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40023800 	.word	0x40023800
 8000a08:	431bde83 	.word	0x431bde83
 8000a0c:	20007a4c 	.word	0x20007a4c
 8000a10:	40010000 	.word	0x40010000

08000a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <NMI_Handler+0x4>

08000a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <HardFault_Handler+0x4>

08000a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <MemManage_Handler+0x4>

08000a26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <BusFault_Handler+0x4>

08000a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <UsageFault_Handler+0x4>

08000a32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a46:	f002 ff65 	bl	8003914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20007a4c 	.word	0x20007a4c

08000a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <SystemInit+0x20>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5e:	4a05      	ldr	r2, [pc, #20]	; (8000a74 <SystemInit+0x20>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a7c:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a7e:	490e      	ldr	r1, [pc, #56]	; (8000ab8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a80:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a84:	e002      	b.n	8000a8c <LoopCopyDataInit>

08000a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8a:	3304      	adds	r3, #4

08000a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a90:	d3f9      	bcc.n	8000a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a92:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a94:	4c0b      	ldr	r4, [pc, #44]	; (8000ac4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a98:	e001      	b.n	8000a9e <LoopFillZerobss>

08000a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a9c:	3204      	adds	r2, #4

08000a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa0:	d3fb      	bcc.n	8000a9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aa2:	f7ff ffd7 	bl	8000a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aa6:	f006 fb17 	bl	80070d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aaa:	f7ff fd0d 	bl	80004c8 <main>
  bx  lr    
 8000aae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ab0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000abc:	080085e8 	.word	0x080085e8
  ldr r2, =_sbss
 8000ac0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000ac4:	20009440 	.word	0x20009440

08000ac8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac8:	e7fe      	b.n	8000ac8 <ADC_IRQHandler>

08000aca <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f004 fa70 	bl	8004fb8 <uxQueueGetQueueNumber>
 8000ad8:	4603      	mov	r3, r0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f004 fa7e 	bl	8004fec <ucQueueGetQueueType>
 8000af0:	4603      	mov	r3, r0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f005 f99a 	bl	8005e3c <uxTaskGetTaskNumber>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	b29b      	uxth	r3, r3
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f005 f98d 	bl	8005e3c <uxTaskGetTaskNumber>
 8000b22:	4603      	mov	r3, r0
 8000b24:	0c1b      	lsrs	r3, r3, #16
 8000b26:	b29b      	uxth	r3, r3
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f005 f97d 	bl	8005e3c <uxTaskGetTaskNumber>
 8000b42:	4603      	mov	r3, r0
 8000b44:	0c1b      	lsrs	r3, r3, #16
 8000b46:	041b      	lsls	r3, r3, #16
 8000b48:	887a      	ldrh	r2, [r7, #2]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f005 f98a 	bl	8005e68 <vTaskSetTaskNumber>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f005 f967 	bl	8005e3c <uxTaskGetTaskNumber>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	887b      	ldrh	r3, [r7, #2]
 8000b74:	041b      	lsls	r3, r3, #16
 8000b76:	4313      	orrs	r3, r2
 8000b78:	4619      	mov	r1, r3
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f005 f974 	bl	8005e68 <vTaskSetTaskNumber>
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ff9a 	bl	8000aca <prvTraceGetQueueNumber>
 8000b96:	4603      	mov	r3, r0
 8000b98:	b29b      	uxth	r3, r3
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff ff8d 	bl	8000aca <prvTraceGetQueueNumber>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	0c1b      	lsrs	r3, r3, #16
 8000bb4:	b29b      	uxth	r3, r3
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff ff7d 	bl	8000aca <prvTraceGetQueueNumber>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	0c1b      	lsrs	r3, r3, #16
 8000bd4:	041b      	lsls	r3, r3, #16
 8000bd6:	887a      	ldrh	r2, [r7, #2]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	4619      	mov	r1, r3
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f004 f9f7 	bl	8004fd0 <vQueueSetQueueNumber>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff ff67 	bl	8000aca <prvTraceGetQueueNumber>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	887b      	ldrh	r3, [r7, #2]
 8000c02:	041b      	lsls	r3, r3, #16
 8000c04:	4313      	orrs	r3, r2
 8000c06:	4619      	mov	r1, r3
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f004 f9e1 	bl	8004fd0 <vQueueSetQueueNumber>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 8000c1a:	f005 f9ab 	bl	8005f74 <xTaskGetCurrentTaskHandle>
 8000c1e:	4603      	mov	r3, r0
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	/* Make sure recorder data is initialized */
	vTraceInitialize();
 8000c2c:	f000 fa5e 	bl	80010ec <vTraceInitialize>
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (startOption == TRC_START)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d104      	bne.n	8000c40 <vTraceEnable+0x1c>
	{
		prvTraceInitTimestamps();
 8000c36:	f000 fa49 	bl	80010cc <prvTraceInitTimestamps>
		
		vTraceStart();
 8000c3a:	f000 fa29 	bl	8001090 <vTraceStart>
	}
	else if (startOption != TRC_INIT)
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
	}
}
 8000c3e:	e00c      	b.n	8000c5a <vTraceEnable+0x36>
	else if (startOption == TRC_START_AWAIT_HOST)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d103      	bne.n	8000c4e <vTraceEnable+0x2a>
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 8000c46:	4807      	ldr	r0, [pc, #28]	; (8000c64 <vTraceEnable+0x40>)
 8000c48:	f001 f96c 	bl	8001f24 <prvTraceError>
}
 8000c4c:	e005      	b.n	8000c5a <vTraceEnable+0x36>
	else if (startOption != TRC_INIT)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d002      	beq.n	8000c5a <vTraceEnable+0x36>
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
 8000c54:	4804      	ldr	r0, [pc, #16]	; (8000c68 <vTraceEnable+0x44>)
 8000c56:	f001 f965 	bl	8001f24 <prvTraceError>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	08007198 	.word	0x08007198
 8000c68:	080071d8 	.word	0x080071d8

08000c6c <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 8000c70:	4b64      	ldr	r3, [pc, #400]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2209      	movs	r2, #9
 8000c76:	649a      	str	r2, [r3, #72]	; 0x48
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 8000c78:	4b62      	ldr	r3, [pc, #392]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	220a      	movs	r2, #10
 8000c7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 8000c82:	4b60      	ldr	r3, [pc, #384]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	220a      	movs	r2, #10
 8000c88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 8000c8c:	4b5d      	ldr	r3, [pc, #372]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	220a      	movs	r2, #10
 8000c92:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 8000c96:	4b5b      	ldr	r3, [pc, #364]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	220f      	movs	r2, #15
 8000c9c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 8000ca0:	4b58      	ldr	r3, [pc, #352]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2205      	movs	r2, #5
 8000ca6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 8000caa:	4b56      	ldr	r3, [pc, #344]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2205      	movs	r2, #5
 8000cb0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 8000cb4:	4b53      	ldr	r3, [pc, #332]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2205      	movs	r2, #5
 8000cba:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 8000cbe:	4b51      	ldr	r3, [pc, #324]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2205      	movs	r2, #5
 8000cc4:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 8000cc8:	4b4e      	ldr	r3, [pc, #312]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2205      	movs	r2, #5
 8000cce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 8000cd2:	4b4c      	ldr	r3, [pc, #304]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	220f      	movs	r2, #15
 8000cd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 8000cdc:	4b49      	ldr	r3, [pc, #292]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	220f      	movs	r2, #15
 8000ce2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 8000ce6:	4b47      	ldr	r3, [pc, #284]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	220f      	movs	r2, #15
 8000cec:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 8000cf0:	4b44      	ldr	r3, [pc, #272]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	220f      	movs	r2, #15
 8000cf6:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 8000cfa:	4b42      	ldr	r3, [pc, #264]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	220f      	movs	r2, #15
 8000d00:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 8000d04:	4b3f      	ldr	r3, [pc, #252]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	220f      	movs	r2, #15
 8000d0a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 8000d0e:	4b3d      	ldr	r3, [pc, #244]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	220f      	movs	r2, #15
 8000d14:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 8000d18:	4b3a      	ldr	r3, [pc, #232]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 8000d22:	4b38      	ldr	r3, [pc, #224]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	220f      	movs	r2, #15
 8000d28:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 8000d2c:	4b35      	ldr	r3, [pc, #212]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2210      	movs	r2, #16
 8000d32:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 8000d36:	4b33      	ldr	r3, [pc, #204]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2210      	movs	r2, #16
 8000d3c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 8000d40:	4b30      	ldr	r3, [pc, #192]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2210      	movs	r2, #16
 8000d46:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 8000d4a:	4b2e      	ldr	r3, [pc, #184]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2213      	movs	r2, #19
 8000d50:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 8000d54:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2211      	movs	r2, #17
 8000d5a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 8000d5e:	4b29      	ldr	r3, [pc, #164]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2210      	movs	r2, #16
 8000d64:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 8000d68:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2213      	movs	r2, #19
 8000d6e:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 8000d72:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2213      	movs	r2, #19
 8000d78:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 8000d7c:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2213      	movs	r2, #19
 8000d82:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 8000d86:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	22a0      	movs	r2, #160	; 0xa0
 8000d96:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000da2:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000dae:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 8000db2:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f240 22fd 	movw	r2, #765	; 0x2fd
 8000dba:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f240 3252 	movw	r2, #850	; 0x352
 8000dc6:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f240 32a2 	movw	r2, #930	; 0x3a2
 8000dd2:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f240 4201 	movw	r2, #1025	; 0x401
 8000dde:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8000dea:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 8000dee:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <vTraceInitObjectPropertyTable+0x198>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8000df6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20007a98 	.word	0x20007a98

08000e08 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]

	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 8000e12:	4b40      	ldr	r3, [pc, #256]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	825a      	strh	r2, [r3, #18]
 8000e18:	4b3e      	ldr	r3, [pc, #248]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e1a:	8a5a      	ldrh	r2, [r3, #18]
 8000e1c:	4b3d      	ldr	r3, [pc, #244]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e1e:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 8000e20:	4b3c      	ldr	r3, [pc, #240]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e22:	220a      	movs	r2, #10
 8000e24:	829a      	strh	r2, [r3, #20]
 8000e26:	4b3b      	ldr	r3, [pc, #236]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e28:	8a9a      	ldrh	r2, [r3, #20]
 8000e2a:	4b3a      	ldr	r3, [pc, #232]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e2c:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 8000e2e:	4b39      	ldr	r3, [pc, #228]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e30:	2214      	movs	r2, #20
 8000e32:	82da      	strh	r2, [r3, #22]
 8000e34:	4b37      	ldr	r3, [pc, #220]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e36:	8ada      	ldrh	r2, [r3, #22]
 8000e38:	4b36      	ldr	r3, [pc, #216]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e3a:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 8000e3c:	4b35      	ldr	r3, [pc, #212]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e3e:	221e      	movs	r2, #30
 8000e40:	831a      	strh	r2, [r3, #24]
 8000e42:	4b34      	ldr	r3, [pc, #208]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e44:	8b1a      	ldrh	r2, [r3, #24]
 8000e46:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e48:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 8000e4a:	4b32      	ldr	r3, [pc, #200]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e4c:	222d      	movs	r2, #45	; 0x2d
 8000e4e:	835a      	strh	r2, [r3, #26]
 8000e50:	4b30      	ldr	r3, [pc, #192]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e52:	8b5a      	ldrh	r2, [r3, #26]
 8000e54:	4b2f      	ldr	r3, [pc, #188]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e56:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 8000e58:	4b2e      	ldr	r3, [pc, #184]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e5a:	2232      	movs	r2, #50	; 0x32
 8000e5c:	839a      	strh	r2, [r3, #28]
 8000e5e:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e60:	8b9a      	ldrh	r2, [r3, #28]
 8000e62:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e64:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 8000e66:	4b2b      	ldr	r3, [pc, #172]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e68:	2237      	movs	r2, #55	; 0x37
 8000e6a:	83da      	strh	r2, [r3, #30]
 8000e6c:	4b29      	ldr	r3, [pc, #164]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e6e:	8bda      	ldrh	r2, [r3, #30]
 8000e70:	4b28      	ldr	r3, [pc, #160]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e72:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 8000e74:	4b27      	ldr	r3, [pc, #156]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e76:	223c      	movs	r2, #60	; 0x3c
 8000e78:	841a      	strh	r2, [r3, #32]
 8000e7a:	4b26      	ldr	r3, [pc, #152]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e7c:	8c1a      	ldrh	r2, [r3, #32]
 8000e7e:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e80:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 8000e82:	4b24      	ldr	r3, [pc, #144]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e84:	2241      	movs	r2, #65	; 0x41
 8000e86:	845a      	strh	r2, [r3, #34]	; 0x22
 8000e88:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e8a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8000e8c:	4b21      	ldr	r3, [pc, #132]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e8e:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 8000e90:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e92:	2209      	movs	r2, #9
 8000e94:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 8000e96:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e98:	2213      	movs	r2, #19
 8000e9a:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000e9e:	221d      	movs	r2, #29
 8000ea0:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000ea4:	222c      	movs	r2, #44	; 0x2c
 8000ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000eaa:	2231      	movs	r2, #49	; 0x31
 8000eac:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000eb0:	2236      	movs	r2, #54	; 0x36
 8000eb2:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000eb6:	223b      	movs	r2, #59	; 0x3b
 8000eb8:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 8000eba:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000ebc:	2240      	movs	r2, #64	; 0x40
 8000ebe:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000ec2:	2245      	movs	r2, #69	; 0x45
 8000ec4:	869a      	strh	r2, [r3, #52]	; 0x34

	for (i = 0; i < TRACE_NCLASSES; i++)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	e009      	b.n	8000ee0 <vTraceInitObjectHandleStack+0xd8>
	{
		objectHandleStacks.handleCountWaterMarksOfClass[i] = 0;
 8000ecc:	4a11      	ldr	r2, [pc, #68]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3318      	adds	r3, #24
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4413      	add	r3, r2
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	80da      	strh	r2, [r3, #6]
	for (i = 0; i < TRACE_NCLASSES; i++)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3301      	adds	r3, #1
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b08      	cmp	r3, #8
 8000ee4:	d9f2      	bls.n	8000ecc <vTraceInitObjectHandleStack+0xc4>
	}

	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	e008      	b.n	8000efe <vTraceInitObjectHandleStack+0xf6>
	{
		objectHandleStacks.objectHandles[i] = 0;
 8000eec:	4a09      	ldr	r2, [pc, #36]	; (8000f14 <vTraceInitObjectHandleStack+0x10c>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	3348      	adds	r3, #72	; 0x48
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3301      	adds	r3, #1
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b45      	cmp	r3, #69	; 0x45
 8000f02:	d9f3      	bls.n	8000eec <vTraceInitObjectHandleStack+0xe4>
	}
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	200093ac 	.word	0x200093ac

08000f18 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
	switch(objectclass)
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d827      	bhi.n	8000f78 <pszTraceGetErrorNotEnoughHandles+0x60>
 8000f28:	a201      	add	r2, pc, #4	; (adr r2, 8000f30 <pszTraceGetErrorNotEnoughHandles+0x18>)
 8000f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2e:	bf00      	nop
 8000f30:	08000f65 	.word	0x08000f65
 8000f34:	08000f5d 	.word	0x08000f5d
 8000f38:	08000f61 	.word	0x08000f61
 8000f3c:	08000f55 	.word	0x08000f55
 8000f40:	08000f59 	.word	0x08000f59
 8000f44:	08000f69 	.word	0x08000f69
 8000f48:	08000f6d 	.word	0x08000f6d
 8000f4c:	08000f71 	.word	0x08000f71
 8000f50:	08000f75 	.word	0x08000f75
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <pszTraceGetErrorNotEnoughHandles+0x70>)
 8000f56:	e010      	b.n	8000f7a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <pszTraceGetErrorNotEnoughHandles+0x74>)
 8000f5a:	e00e      	b.n	8000f7a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <pszTraceGetErrorNotEnoughHandles+0x78>)
 8000f5e:	e00c      	b.n	8000f7a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <pszTraceGetErrorNotEnoughHandles+0x7c>)
 8000f62:	e00a      	b.n	8000f7a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <pszTraceGetErrorNotEnoughHandles+0x80>)
 8000f66:	e008      	b.n	8000f7a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <pszTraceGetErrorNotEnoughHandles+0x84>)
 8000f6a:	e006      	b.n	8000f7a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <pszTraceGetErrorNotEnoughHandles+0x88>)
 8000f6e:	e004      	b.n	8000f7a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <pszTraceGetErrorNotEnoughHandles+0x8c>)
 8000f72:	e002      	b.n	8000f7a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <pszTraceGetErrorNotEnoughHandles+0x90>)
 8000f76:	e000      	b.n	8000f7a <pszTraceGetErrorNotEnoughHandles+0x62>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <pszTraceGetErrorNotEnoughHandles+0x94>)
	}
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	0800720c 	.word	0x0800720c
 8000f8c:	08007254 	.word	0x08007254
 8000f90:	0800729c 	.word	0x0800729c
 8000f94:	080072f0 	.word	0x080072f0
 8000f98:	0800733c 	.word	0x0800733c
 8000f9c:	08007388 	.word	0x08007388
 8000fa0:	080073d4 	.word	0x080073d4
 8000fa4:	08007428 	.word	0x08007428
 8000fa8:	08007480 	.word	0x08007480
 8000fac:	080074dc 	.word	0x080074dc

08000fb0 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	75fb      	strb	r3, [r7, #23]

	if (RecorderDataPtr == NULL)
 8000fba:	4b30      	ldr	r3, [pc, #192]	; (800107c <uiTraceStart+0xcc>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d10a      	bne.n	8000fd8 <uiTraceStart+0x28>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
 8000fc2:	4b2e      	ldr	r3, [pc, #184]	; (800107c <uiTraceStart+0xcc>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d104      	bne.n	8000fd4 <uiTraceStart+0x24>
 8000fca:	482d      	ldr	r0, [pc, #180]	; (8001080 <uiTraceStart+0xd0>)
 8000fcc:	f000 ffaa 	bl	8001f24 <prvTraceError>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	e04e      	b.n	8001072 <uiTraceStart+0xc2>
		return 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	e04c      	b.n	8001072 <uiTraceStart+0xc2>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
 8000fd8:	4b28      	ldr	r3, [pc, #160]	; (800107c <uiTraceStart+0xcc>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d101      	bne.n	8000fe6 <uiTraceStart+0x36>
		return 1; /* Already running */
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e045      	b.n	8001072 <uiTraceStart+0xc2>

	if (traceErrorMessage == NULL)
 8000fe6:	4b27      	ldr	r3, [pc, #156]	; (8001084 <uiTraceStart+0xd4>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d13e      	bne.n	800106c <uiTraceStart+0xbc>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000fee:	f3ef 8310 	mrs	r3, PRIMASK
 8000ff2:	60bb      	str	r3, [r7, #8]
  return(result);
 8000ff4:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f383 8810 	msr	PRIMASK, r3
}
 8001002:	bf00      	nop
 8001004:	4b20      	ldr	r3, [pc, #128]	; (8001088 <uiTraceStart+0xd8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	3301      	adds	r3, #1
 800100a:	4a1f      	ldr	r2, [pc, #124]	; (8001088 <uiTraceStart+0xd8>)
 800100c:	6013      	str	r3, [r2, #0]
		RecorderDataPtr->recorderActive = 1;
 800100e:	4b1b      	ldr	r3, [pc, #108]	; (800107c <uiTraceStart+0xcc>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2201      	movs	r2, #1
 8001014:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 8001016:	f7ff fdfe 	bl	8000c16 <prvTraceGetCurrentTaskHandle>
 800101a:	4603      	mov	r3, r0
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fd6c 	bl	8000afa <prvTraceGetTaskNumberLow16>
 8001022:	4603      	mov	r3, r0
 8001024:	75fb      	strb	r3, [r7, #23]
		if (handle == 0)
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d110      	bne.n	800104e <uiTraceStart+0x9e>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 800102c:	2003      	movs	r0, #3
 800102e:	f000 fe2d 	bl	8001c8c <prvTraceGetObjectHandle>
 8001032:	4603      	mov	r3, r0
 8001034:	75fb      	strb	r3, [r7, #23]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 8001036:	7dfb      	ldrb	r3, [r7, #23]
 8001038:	4a14      	ldr	r2, [pc, #80]	; (800108c <uiTraceStart+0xdc>)
 800103a:	4619      	mov	r1, r3
 800103c:	2003      	movs	r0, #3
 800103e:	f000 ff17 	bl	8001e70 <prvTraceSetObjectName>

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 8001042:	7dfb      	ldrb	r3, [r7, #23]
 8001044:	2200      	movs	r2, #0
 8001046:	4619      	mov	r1, r3
 8001048:	2003      	movs	r0, #3
 800104a:	f000 fc87 	bl	800195c <prvTraceSetPriorityProperty>
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 800104e:	7dfb      	ldrb	r3, [r7, #23]
 8001050:	4618      	mov	r0, r3
 8001052:	f000 fc11 	bl	8001878 <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <uiTraceStart+0xd8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	3b01      	subs	r3, #1
 800105c:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <uiTraceStart+0xd8>)
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f383 8810 	msr	PRIMASK, r3
}
 800106a:	bf00      	nop
	}

	return RecorderDataPtr->recorderActive;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <uiTraceStart+0xcc>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001072:	4618      	mov	r0, r3
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20007a98 	.word	0x20007a98
 8001080:	0800750c 	.word	0x0800750c
 8001084:	200093a4 	.word	0x200093a4
 8001088:	20000050 	.word	0x20000050
 800108c:	08007550 	.word	0x08007550

08001090 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
 8001094:	f7ff ff8c 	bl	8000fb0 <uiTraceStart>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}

0800109c <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <vTraceStop+0x28>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <vTraceStop+0x28>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2200      	movs	r2, #0
 80010ae:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <vTraceStop+0x2c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d002      	beq.n	80010be <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <vTraceStop+0x2c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4798      	blx	r3
	}
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20007a98 	.word	0x20007a98
 80010c8:	2000005c 	.word	0x2000005c

080010cc <prvTraceInitTimestamps>:
* function must be called AFTER the clock is initialized to set a proper
* initial timestamp value. If vTraceEnable(...) is only called AFTER clock is
* initialized, there is no need to call this function.
******************************************************************************/
void prvTraceInitTimestamps(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
	init_hwtc_count = TRC_HWTC_COUNT;
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <prvTraceInitTimestamps+0x18>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <prvTraceInitTimestamps+0x1c>)
 80010d6:	6013      	str	r3, [r2, #0]
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e0001004 	.word	0xe0001004
 80010e8:	200093a8 	.word	0x200093a8

080010ec <vTraceInitialize>:
* Only needs to be called manually if traced objects are created before the
* trace recorder can be enabled
* See TRC_CFG_RECORDER_DATA_INIT in trcConfig.h for more information.
******************************************************************************/
void vTraceInitialize()
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	uint32_t i;
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (RecorderInitialized != 0)
 80010f0:	4b85      	ldr	r3, [pc, #532]	; (8001308 <vTraceInitialize+0x21c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f040 8105 	bne.w	8001304 <vTraceInitialize+0x218>
	{
		return;
	}

	/* These are set on init so they aren't overwritten by late initialization values. */
	CurrentFilterMask = 0xFFFF;
 80010fa:	4b84      	ldr	r3, [pc, #528]	; (800130c <vTraceInitialize+0x220>)
 80010fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001100:	801a      	strh	r2, [r3, #0]
	CurrentFilterGroup = FilterGroup0;
 8001102:	4b83      	ldr	r3, [pc, #524]	; (8001310 <vTraceInitialize+0x224>)
 8001104:	2201      	movs	r2, #1
 8001106:	801a      	strh	r2, [r3, #0]
	traceErrorMessage = 0;
 8001108:	4b82      	ldr	r3, [pc, #520]	; (8001314 <vTraceInitialize+0x228>)
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
		tasksInStackMonitor[i].uiPreviousLowMark = 0;
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 800110e:	4b82      	ldr	r3, [pc, #520]	; (8001318 <vTraceInitialize+0x22c>)
 8001110:	4a82      	ldr	r2, [pc, #520]	; (800131c <vTraceInitialize+0x230>)
 8001112:	601a      	str	r2, [r3, #0]
		prvTraceError("Recorder data pointer not set! Use vTraceSetRecorderDataBuffer().");
		return;
	}
#endif

	init_hwtc_count = TRC_HWTC_COUNT;
 8001114:	4b82      	ldr	r3, [pc, #520]	; (8001320 <vTraceInitialize+0x234>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a82      	ldr	r2, [pc, #520]	; (8001324 <vTraceInitialize+0x238>)
 800111a:	6013      	str	r3, [r2, #0]

	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 800111c:	4b7e      	ldr	r3, [pc, #504]	; (8001318 <vTraceInitialize+0x22c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f641 1204 	movw	r2, #6404	; 0x1904
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f006 f808 	bl	800713c <memset>

	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 800112c:	4b7a      	ldr	r3, [pc, #488]	; (8001318 <vTraceInitialize+0x22c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f641 22a1 	movw	r2, #6817	; 0x1aa1
 8001134:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 8001136:	4b78      	ldr	r3, [pc, #480]	; (8001318 <vTraceInitialize+0x22c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2207      	movs	r2, #7
 800113c:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 800113e:	4b76      	ldr	r3, [pc, #472]	; (8001318 <vTraceInitialize+0x22c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2200      	movs	r2, #0
 8001144:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 8001146:	4b74      	ldr	r3, [pc, #464]	; (8001318 <vTraceInitialize+0x22c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f641 1204 	movw	r2, #6404	; 0x1904
 800114e:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 8001150:	4b71      	ldr	r3, [pc, #452]	; (8001318 <vTraceInitialize+0x22c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001158:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t)0xF0F0F0F0;
 800115a:	4b6f      	ldr	r3, [pc, #444]	; (8001318 <vTraceInitialize+0x22c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8001162:	641a      	str	r2, [r3, #64]	; 0x40
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 8001164:	4b6c      	ldr	r3, [pc, #432]	; (8001318 <vTraceInitialize+0x22c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2200      	movs	r2, #0
 800116a:	645a      	str	r2, [r3, #68]	; 0x44
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 800116c:	4b6a      	ldr	r3, [pc, #424]	; (8001318 <vTraceInitialize+0x22c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2200      	movs	r2, #0
 8001172:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
 8001174:	f7ff fd7a 	bl	8000c6c <vTraceInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 8001178:	4b67      	ldr	r3, [pc, #412]	; (8001318 <vTraceInitialize+0x22c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f04f 32f1 	mov.w	r2, #4059165169	; 0xf1f1f1f1
 8001180:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 8001184:	4b64      	ldr	r3, [pc, #400]	; (8001318 <vTraceInitialize+0x22c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f44f 7248 	mov.w	r2, #800	; 0x320
 800118c:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 8001190:	4b61      	ldr	r3, [pc, #388]	; (8001318 <vTraceInitialize+0x22c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2201      	movs	r2, #1
 8001196:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 800119a:	4b5f      	ldr	r3, [pc, #380]	; (8001318 <vTraceInitialize+0x22c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f04f 32f2 	mov.w	r2, #4076008178	; 0xf2f2f2f2
 80011a2:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 80011a6:	4b5c      	ldr	r3, [pc, #368]	; (8001318 <vTraceInitialize+0x22c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80011ae:	2250      	movs	r2, #80	; 0x50
 80011b0:	495d      	ldr	r1, [pc, #372]	; (8001328 <vTraceInitialize+0x23c>)
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 fe36 	bl	8001e24 <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 80011b8:	4b57      	ldr	r3, [pc, #348]	; (8001318 <vTraceInitialize+0x22c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f04f 32f3 	mov.w	r2, #4092851187	; 0xf3f3f3f3
 80011c0:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
	RecorderDataPtr->endmarker0 = 0x0A;
 80011c4:	4b54      	ldr	r3, [pc, #336]	; (8001318 <vTraceInitialize+0x22c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 80011cc:	3318      	adds	r3, #24
 80011ce:	220a      	movs	r2, #10
 80011d0:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker1 = 0x0B;
 80011d2:	4b51      	ldr	r3, [pc, #324]	; (8001318 <vTraceInitialize+0x22c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 80011da:	3319      	adds	r3, #25
 80011dc:	220b      	movs	r2, #11
 80011de:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker2 = 0x0C;
 80011e0:	4b4d      	ldr	r3, [pc, #308]	; (8001318 <vTraceInitialize+0x22c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 80011e8:	331a      	adds	r3, #26
 80011ea:	220c      	movs	r2, #12
 80011ec:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker3 = 0x0D;
 80011ee:	4b4a      	ldr	r3, [pc, #296]	; (8001318 <vTraceInitialize+0x22c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 80011f6:	331b      	adds	r3, #27
 80011f8:	220d      	movs	r2, #13
 80011fa:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker4 = 0x71;
 80011fc:	4b46      	ldr	r3, [pc, #280]	; (8001318 <vTraceInitialize+0x22c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 8001204:	331c      	adds	r3, #28
 8001206:	2271      	movs	r2, #113	; 0x71
 8001208:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker5 = 0x72;
 800120a:	4b43      	ldr	r3, [pc, #268]	; (8001318 <vTraceInitialize+0x22c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 8001212:	331d      	adds	r3, #29
 8001214:	2272      	movs	r2, #114	; 0x72
 8001216:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker6 = 0x73;
 8001218:	4b3f      	ldr	r3, [pc, #252]	; (8001318 <vTraceInitialize+0x22c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 8001220:	331e      	adds	r3, #30
 8001222:	2273      	movs	r2, #115	; 0x73
 8001224:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker7 = 0x74;
 8001226:	4b3c      	ldr	r3, [pc, #240]	; (8001318 <vTraceInitialize+0x22c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f503 53c7 	add.w	r3, r3, #6368	; 0x18e0
 800122e:	331f      	adds	r3, #31
 8001230:	2274      	movs	r2, #116	; 0x74
 8001232:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker8 = 0xF1;
 8001234:	4b38      	ldr	r3, [pc, #224]	; (8001318 <vTraceInitialize+0x22c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 800123c:	22f1      	movs	r2, #241	; 0xf1
 800123e:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker9 = 0xF2;
 8001240:	4b35      	ldr	r3, [pc, #212]	; (8001318 <vTraceInitialize+0x22c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8001248:	3301      	adds	r3, #1
 800124a:	22f2      	movs	r2, #242	; 0xf2
 800124c:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker10 = 0xF3;
 800124e:	4b32      	ldr	r3, [pc, #200]	; (8001318 <vTraceInitialize+0x22c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8001256:	3302      	adds	r3, #2
 8001258:	22f3      	movs	r2, #243	; 0xf3
 800125a:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker11 = 0xF4;
 800125c:	4b2e      	ldr	r3, [pc, #184]	; (8001318 <vTraceInitialize+0x22c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8001264:	3303      	adds	r3, #3
 8001266:	22f4      	movs	r2, #244	; 0xf4
 8001268:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS)+1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
 800126a:	f7ff fdcd 	bl	8000e08 <vTraceInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any
	chance of accidental duplicates of this elsewhere in memory.

	Moreover, the fields are set byte-by-byte to avoid endian issues.*/

	RecorderDataPtr->startmarker11 = 0xF4;
 800126e:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <vTraceInitialize+0x22c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	22f4      	movs	r2, #244	; 0xf4
 8001274:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 8001276:	4b28      	ldr	r3, [pc, #160]	; (8001318 <vTraceInitialize+0x22c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	22f3      	movs	r2, #243	; 0xf3
 800127c:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 800127e:	4b26      	ldr	r3, [pc, #152]	; (8001318 <vTraceInitialize+0x22c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	22f2      	movs	r2, #242	; 0xf2
 8001284:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 8001286:	4b24      	ldr	r3, [pc, #144]	; (8001318 <vTraceInitialize+0x22c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	22f1      	movs	r2, #241	; 0xf1
 800128c:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 800128e:	4b22      	ldr	r3, [pc, #136]	; (8001318 <vTraceInitialize+0x22c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2274      	movs	r2, #116	; 0x74
 8001294:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 8001296:	4b20      	ldr	r3, [pc, #128]	; (8001318 <vTraceInitialize+0x22c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2273      	movs	r2, #115	; 0x73
 800129c:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 800129e:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <vTraceInitialize+0x22c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2272      	movs	r2, #114	; 0x72
 80012a4:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <vTraceInitialize+0x22c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2271      	movs	r2, #113	; 0x71
 80012ac:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <vTraceInitialize+0x22c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2204      	movs	r2, #4
 80012b4:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <vTraceInitialize+0x22c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2203      	movs	r2, #3
 80012bc:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <vTraceInitialize+0x22c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2202      	movs	r2, #2
 80012c4:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01;
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <vTraceInitialize+0x22c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2201      	movs	r2, #1
 80012cc:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <vTraceInitialize+0x228>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d010      	beq.n	80012f8 <vTraceInitialize+0x20c>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <vTraceInitialize+0x22c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012de:	4a0d      	ldr	r2, [pc, #52]	; (8001314 <vTraceInitialize+0x228>)
 80012e0:	6811      	ldr	r1, [r2, #0]
 80012e2:	2250      	movs	r2, #80	; 0x50
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 fd9d 	bl	8001e24 <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <vTraceInitialize+0x22c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2201      	movs	r2, #1
 80012f0:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
		vTraceStop();
 80012f4:	f7ff fed2 	bl	800109c <vTraceStop>
	}

#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
 80012f8:	f000 ffcc 	bl	8002294 <prvTraceInitCortexM>
#endif

	RecorderInitialized = 1;
 80012fc:	4b02      	ldr	r3, [pc, #8]	; (8001308 <vTraceInitialize+0x21c>)
 80012fe:	2201      	movs	r2, #1
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	e000      	b.n	8001306 <vTraceInitialize+0x21a>
		return;
 8001304:	bf00      	nop
}
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000060 	.word	0x20000060
 800130c:	20007a94 	.word	0x20007a94
 8001310:	200093a0 	.word	0x200093a0
 8001314:	200093a4 	.word	0x200093a4
 8001318:	20007a98 	.word	0x20007a98
 800131c:	20007a9c 	.word	0x20007a9c
 8001320:	e0001004 	.word	0xe0001004
 8001324:	200093a8 	.word	0x200093a8
 8001328:	080078b8 	.word	0x080078b8

0800132c <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d04b      	beq.n	80013d4 <prvTraceStoreTaskReady+0xa8>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
 800133c:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <prvTraceStoreTaskReady+0xb4>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d049      	beq.n	80013d8 <prvTraceStoreTaskReady+0xac>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	2b0f      	cmp	r3, #15
 8001348:	d903      	bls.n	8001352 <prvTraceStoreTaskReady+0x26>
 800134a:	4826      	ldr	r0, [pc, #152]	; (80013e4 <prvTraceStoreTaskReady+0xb8>)
 800134c:	f000 fdea 	bl	8001f24 <prvTraceError>
 8001350:	e043      	b.n	80013da <prvTraceStoreTaskReady+0xae>

	if (recorder_busy)
 8001352:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <prvTraceStoreTaskReady+0xbc>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <prvTraceStoreTaskReady+0x36>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 800135a:	4824      	ldr	r0, [pc, #144]	; (80013ec <prvTraceStoreTaskReady+0xc0>)
 800135c:	f000 fde2 	bl	8001f24 <prvTraceError>
		return;
 8001360:	e03b      	b.n	80013da <prvTraceStoreTaskReady+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001362:	f3ef 8310 	mrs	r3, PRIMASK
 8001366:	60fb      	str	r3, [r7, #12]
  return(result);
 8001368:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
 800136a:	61fb      	str	r3, [r7, #28]
 800136c:	2301      	movs	r3, #1
 800136e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	f383 8810 	msr	PRIMASK, r3
}
 8001376:	bf00      	nop
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <prvTraceStoreTaskReady+0xbc>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3301      	adds	r3, #1
 800137e:	4a1a      	ldr	r2, [pc, #104]	; (80013e8 <prvTraceStoreTaskReady+0xbc>)
 8001380:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <prvTraceStoreTaskReady+0xc4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001388:	2b00      	cmp	r3, #0
 800138a:	d018      	beq.n	80013be <prvTraceStoreTaskReady+0x92>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 800138c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001390:	f000 feaa 	bl	80020e8 <prvTraceGetDTS>
 8001394:	4603      	mov	r3, r0
 8001396:	837b      	strh	r3, [r7, #26]
		hnd8 = prvTraceGet8BitHandle(handle);
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	767b      	strb	r3, [r7, #25]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 800139c:	f000 fbfa 	bl	8001b94 <prvTraceNextFreeEventBufferSlot>
 80013a0:	6178      	str	r0, [r7, #20]
		if (tr != NULL)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00a      	beq.n	80013be <prvTraceStoreTaskReady+0x92>
		{
			tr->type = DIV_TASK_READY;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	2202      	movs	r2, #2
 80013ac:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	8b7a      	ldrh	r2, [r7, #26]
 80013b2:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	7e7a      	ldrb	r2, [r7, #25]
 80013b8:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 80013ba:	f000 fe6d 	bl	8002098 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <prvTraceStoreTaskReady+0xbc>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <prvTraceStoreTaskReady+0xbc>)
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	f383 8810 	msr	PRIMASK, r3
}
 80013d2:	e002      	b.n	80013da <prvTraceStoreTaskReady+0xae>
		return;
 80013d4:	bf00      	nop
 80013d6:	e000      	b.n	80013da <prvTraceStoreTaskReady+0xae>
		return;
 80013d8:	bf00      	nop
}
 80013da:	3720      	adds	r7, #32
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	2000000c 	.word	0x2000000c
 80013e4:	080078cc 	.word	0x080078cc
 80013e8:	20000050 	.word	0x20000050
 80013ec:	0800790c 	.word	0x0800790c
 80013f0:	20007a98 	.word	0x20007a98

080013f4 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08e      	sub	sp, #56	; 0x38
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
 8001400:	4b46      	ldr	r3, [pc, #280]	; (800151c <vTraceStoreMemMangEvent+0x128>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 8084 	beq.w	8001512 <vTraceStoreMemMangEvent+0x11e>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	da03      	bge.n	8001418 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	425b      	negs	r3, r3
 8001414:	637b      	str	r3, [r7, #52]	; 0x34
 8001416:	e001      	b.n	800141c <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800141c:	f3ef 8310 	mrs	r3, PRIMASK
 8001420:	61bb      	str	r3, [r7, #24]
  return(result);
 8001422:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 8001424:	633b      	str	r3, [r7, #48]	; 0x30
 8001426:	2301      	movs	r3, #1
 8001428:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	f383 8810 	msr	PRIMASK, r3
}
 8001430:	bf00      	nop
 8001432:	4b3b      	ldr	r3, [pc, #236]	; (8001520 <vTraceStoreMemMangEvent+0x12c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	3301      	adds	r3, #1
 8001438:	4a39      	ldr	r2, [pc, #228]	; (8001520 <vTraceStoreMemMangEvent+0x12c>)
 800143a:	6013      	str	r3, [r2, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d015      	beq.n	800146e <vTraceStoreMemMangEvent+0x7a>
	{
		RecorderDataPtr->heapMemUsage += (uint32_t)signed_size;
 8001442:	4b36      	ldr	r3, [pc, #216]	; (800151c <vTraceStoreMemMangEvent+0x128>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	4b34      	ldr	r3, [pc, #208]	; (800151c <vTraceStoreMemMangEvent+0x128>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	440a      	add	r2, r1
 8001450:	63da      	str	r2, [r3, #60]	; 0x3c

		if (RecorderDataPtr->heapMemUsage > RecorderDataPtr->heapMemMaxUsage)
 8001452:	4b32      	ldr	r3, [pc, #200]	; (800151c <vTraceStoreMemMangEvent+0x128>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001458:	4b30      	ldr	r3, [pc, #192]	; (800151c <vTraceStoreMemMangEvent+0x128>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800145e:	429a      	cmp	r2, r3
 8001460:	d905      	bls.n	800146e <vTraceStoreMemMangEvent+0x7a>
		{
			RecorderDataPtr->heapMemMaxUsage = RecorderDataPtr->heapMemUsage;
 8001462:	4b2e      	ldr	r3, [pc, #184]	; (800151c <vTraceStoreMemMangEvent+0x128>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	4b2d      	ldr	r3, [pc, #180]	; (800151c <vTraceStoreMemMangEvent+0x128>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800146c:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}

	if (RecorderDataPtr->recorderActive)
 800146e:	4b2b      	ldr	r3, [pc, #172]	; (800151c <vTraceStoreMemMangEvent+0x128>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	2b00      	cmp	r3, #0
 8001476:	d041      	beq.n	80014fc <vTraceStoreMemMangEvent+0x108>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 8001478:	20ff      	movs	r0, #255	; 0xff
 800147a:	f000 fe35 	bl	80020e8 <prvTraceGetDTS>
 800147e:	4603      	mov	r3, r0
 8001480:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 8001484:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001486:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800148a:	f000 f953 	bl	8001734 <prvTraceGetParam>
 800148e:	4603      	mov	r3, r0
 8001490:	85bb      	strh	r3, [r7, #44]	; 0x2c
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 8001492:	f000 fb7f 	bl	8001b94 <prvTraceNextFreeEventBufferSlot>
 8001496:	62b8      	str	r0, [r7, #40]	; 0x28

		if (ms != NULL)
 8001498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149a:	2b00      	cmp	r3, #0
 800149c:	d02e      	beq.n	80014fc <vTraceStoreMemMangEvent+0x108>
		{
			ms->dts = dts1;
 800149e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80014a4:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 80014a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 80014ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ae:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80014b0:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 80014b2:	f000 fdf1 	bl	8002098 <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 80014b6:	68b9      	ldr	r1, [r7, #8]
 80014b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80014bc:	f000 f93a 	bl	8001734 <prvTraceGetParam>
 80014c0:	4603      	mov	r3, r0
 80014c2:	84fb      	strh	r3, [r7, #38]	; 0x26
				addr_high = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 80014ca:	f000 fb63 	bl	8001b94 <prvTraceNextFreeEventBufferSlot>
 80014ce:	6238      	str	r0, [r7, #32]
			if (ma != NULL)
 80014d0:	6a3b      	ldr	r3, [r7, #32]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d012      	beq.n	80014fc <vTraceStoreMemMangEvent+0x108>
			{
				ma->addr_low = addr_low;
 80014d6:	6a3b      	ldr	r3, [r7, #32]
 80014d8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80014da:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80014e2:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1);	/* Note this! */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	3301      	adds	r3, #1
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;			/* Set type of first event */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f6:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();
 80014f8:	f000 fdce 	bl	8002098 <prvTraceUpdateCounters>
			}
		}
	}
	trcCRITICAL_SECTION_END();
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <vTraceStoreMemMangEvent+0x12c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	3b01      	subs	r3, #1
 8001502:	4a07      	ldr	r2, [pc, #28]	; (8001520 <vTraceStoreMemMangEvent+0x12c>)
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001508:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f383 8810 	msr	PRIMASK, r3
}
 8001510:	e000      	b.n	8001514 <vTraceStoreMemMangEvent+0x120>
		return;
 8001512:	bf00      	nop
}
 8001514:	3738      	adds	r7, #56	; 0x38
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20007a98 	.word	0x20007a98
 8001520:	20000050 	.word	0x20000050

08001524 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	460b      	mov	r3, r1
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	72fb      	strb	r3, [r7, #11]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2bfe      	cmp	r3, #254	; 0xfe
 8001536:	d903      	bls.n	8001540 <prvTraceStoreKernelCall+0x1c>
 8001538:	4832      	ldr	r0, [pc, #200]	; (8001604 <prvTraceStoreKernelCall+0xe0>)
 800153a:	f000 fcf3 	bl	8001f24 <prvTraceError>
 800153e:	e05d      	b.n	80015fc <prvTraceStoreKernelCall+0xd8>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 8001540:	7afb      	ldrb	r3, [r7, #11]
 8001542:	2b08      	cmp	r3, #8
 8001544:	d903      	bls.n	800154e <prvTraceStoreKernelCall+0x2a>
 8001546:	4830      	ldr	r0, [pc, #192]	; (8001608 <prvTraceStoreKernelCall+0xe4>)
 8001548:	f000 fcec 	bl	8001f24 <prvTraceError>
 800154c:	e056      	b.n	80015fc <prvTraceStoreKernelCall+0xd8>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
 800154e:	4b2f      	ldr	r3, [pc, #188]	; (800160c <prvTraceStoreKernelCall+0xe8>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	7afb      	ldrb	r3, [r7, #11]
 8001554:	4413      	add	r3, r2
 8001556:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800155a:	461a      	mov	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4293      	cmp	r3, r2
 8001560:	d903      	bls.n	800156a <prvTraceStoreKernelCall+0x46>
 8001562:	482b      	ldr	r0, [pc, #172]	; (8001610 <prvTraceStoreKernelCall+0xec>)
 8001564:	f000 fcde 	bl	8001f24 <prvTraceError>
 8001568:	e048      	b.n	80015fc <prvTraceStoreKernelCall+0xd8>

	if (recorder_busy)
 800156a:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <prvTraceStoreKernelCall+0xf0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <prvTraceStoreKernelCall+0x56>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 8001572:	4829      	ldr	r0, [pc, #164]	; (8001618 <prvTraceStoreKernelCall+0xf4>)
 8001574:	f000 fcd6 	bl	8001f24 <prvTraceError>
		return;
 8001578:	e040      	b.n	80015fc <prvTraceStoreKernelCall+0xd8>
	}

	if (handle_of_last_logged_task == 0)
 800157a:	4b28      	ldr	r3, [pc, #160]	; (800161c <prvTraceStoreKernelCall+0xf8>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d03b      	beq.n	80015fa <prvTraceStoreKernelCall+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001582:	f3ef 8310 	mrs	r3, PRIMASK
 8001586:	617b      	str	r3, [r7, #20]
  return(result);
 8001588:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
 800158c:	2301      	movs	r3, #1
 800158e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	f383 8810 	msr	PRIMASK, r3
}
 8001596:	bf00      	nop
 8001598:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <prvTraceStoreKernelCall+0xf0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	3301      	adds	r3, #1
 800159e:	4a1d      	ldr	r2, [pc, #116]	; (8001614 <prvTraceStoreKernelCall+0xf0>)
 80015a0:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <prvTraceStoreKernelCall+0xe8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d01b      	beq.n	80015e4 <prvTraceStoreKernelCall+0xc0>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 80015ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80015b0:	f000 fd9a 	bl	80020e8 <prvTraceGetDTS>
 80015b4:	4603      	mov	r3, r0
 80015b6:	847b      	strh	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 80015be:	f000 fae9 	bl	8001b94 <prvTraceNextFreeEventBufferSlot>
 80015c2:	61f8      	str	r0, [r7, #28]
		if (kse != NULL)
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00c      	beq.n	80015e4 <prvTraceStoreKernelCall+0xc0>
		{
			kse->dts = dts1;
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80015ce:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80015de:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 80015e0:	f000 fd5a 	bl	8002098 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <prvTraceStoreKernelCall+0xf0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <prvTraceStoreKernelCall+0xf0>)
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	f383 8810 	msr	PRIMASK, r3
}
 80015f8:	e000      	b.n	80015fc <prvTraceStoreKernelCall+0xd8>
		return;
 80015fa:	bf00      	nop
}
 80015fc:	3728      	adds	r7, #40	; 0x28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	0800797c 	.word	0x0800797c
 8001608:	080079b4 	.word	0x080079b4
 800160c:	20007a98 	.word	0x20007a98
 8001610:	080079fc 	.word	0x080079fc
 8001614:	20000050 	.word	0x20000050
 8001618:	08007a44 	.word	0x08007a44
 800161c:	20000058 	.word	0x20000058

08001620 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	460b      	mov	r3, r1
 800162e:	72fb      	strb	r3, [r7, #11]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2bfe      	cmp	r3, #254	; 0xfe
 8001634:	d903      	bls.n	800163e <prvTraceStoreKernelCallWithParam+0x1e>
 8001636:	4838      	ldr	r0, [pc, #224]	; (8001718 <prvTraceStoreKernelCallWithParam+0xf8>)
 8001638:	f000 fc74 	bl	8001f24 <prvTraceError>
 800163c:	e068      	b.n	8001710 <prvTraceStoreKernelCallWithParam+0xf0>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 800163e:	7afb      	ldrb	r3, [r7, #11]
 8001640:	2b08      	cmp	r3, #8
 8001642:	d903      	bls.n	800164c <prvTraceStoreKernelCallWithParam+0x2c>
 8001644:	4835      	ldr	r0, [pc, #212]	; (800171c <prvTraceStoreKernelCallWithParam+0xfc>)
 8001646:	f000 fc6d 	bl	8001f24 <prvTraceError>
 800164a:	e061      	b.n	8001710 <prvTraceStoreKernelCallWithParam+0xf0>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
 800164c:	4b34      	ldr	r3, [pc, #208]	; (8001720 <prvTraceStoreKernelCallWithParam+0x100>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	7afb      	ldrb	r3, [r7, #11]
 8001652:	4413      	add	r3, r2
 8001654:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001658:	461a      	mov	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4293      	cmp	r3, r2
 800165e:	d903      	bls.n	8001668 <prvTraceStoreKernelCallWithParam+0x48>
 8001660:	4830      	ldr	r0, [pc, #192]	; (8001724 <prvTraceStoreKernelCallWithParam+0x104>)
 8001662:	f000 fc5f 	bl	8001f24 <prvTraceError>
 8001666:	e053      	b.n	8001710 <prvTraceStoreKernelCallWithParam+0xf0>

	if (recorder_busy)
 8001668:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <prvTraceStoreKernelCallWithParam+0x108>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <prvTraceStoreKernelCallWithParam+0x58>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 8001670:	482e      	ldr	r0, [pc, #184]	; (800172c <prvTraceStoreKernelCallWithParam+0x10c>)
 8001672:	f000 fc57 	bl	8001f24 <prvTraceError>
		return;
 8001676:	e04b      	b.n	8001710 <prvTraceStoreKernelCallWithParam+0xf0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001678:	f3ef 8310 	mrs	r3, PRIMASK
 800167c:	617b      	str	r3, [r7, #20]
  return(result);
 800167e:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
 8001682:	2301      	movs	r3, #1
 8001684:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	f383 8810 	msr	PRIMASK, r3
}
 800168c:	bf00      	nop
 800168e:	4b26      	ldr	r3, [pc, #152]	; (8001728 <prvTraceStoreKernelCallWithParam+0x108>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	3301      	adds	r3, #1
 8001694:	4a24      	ldr	r2, [pc, #144]	; (8001728 <prvTraceStoreKernelCallWithParam+0x108>)
 8001696:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8001698:	4b21      	ldr	r3, [pc, #132]	; (8001720 <prvTraceStoreKernelCallWithParam+0x100>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d02b      	beq.n	80016fa <prvTraceStoreKernelCallWithParam+0xda>
 80016a2:	4b23      	ldr	r3, [pc, #140]	; (8001730 <prvTraceStoreKernelCallWithParam+0x110>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d027      	beq.n	80016fa <prvTraceStoreKernelCallWithParam+0xda>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 80016aa:	20ff      	movs	r0, #255	; 0xff
 80016ac:	f000 fd1c 	bl	80020e8 <prvTraceGetDTS>
 80016b0:	4603      	mov	r3, r0
 80016b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 80016b6:	6839      	ldr	r1, [r7, #0]
 80016b8:	20ff      	movs	r0, #255	; 0xff
 80016ba:	f000 f83b 	bl	8001734 <prvTraceGetParam>
 80016be:	4603      	mov	r3, r0
 80016c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
 80016ca:	f000 fa63 	bl	8001b94 <prvTraceNextFreeEventBufferSlot>
 80016ce:	61f8      	str	r0, [r7, #28]
		if (kse != NULL)
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d011      	beq.n	80016fa <prvTraceStoreKernelCallWithParam+0xda>
		{
			kse->dts = dts2;
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80016dc:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80016ec:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80016f4:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
 80016f6:	f000 fccf 	bl	8002098 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 80016fa:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <prvTraceStoreKernelCallWithParam+0x108>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	3b01      	subs	r3, #1
 8001700:	4a09      	ldr	r2, [pc, #36]	; (8001728 <prvTraceStoreKernelCallWithParam+0x108>)
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	f383 8810 	msr	PRIMASK, r3
}
 800170e:	bf00      	nop
}
 8001710:	3728      	adds	r7, #40	; 0x28
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	08007a7c 	.word	0x08007a7c
 800171c:	08007abc 	.word	0x08007abc
 8001720:	20007a98 	.word	0x20007a98
 8001724:	08007b0c 	.word	0x08007b0c
 8001728:	20000050 	.word	0x20000050
 800172c:	08007b5c 	.word	0x08007b5c
 8001730:	20000058 	.word	0x20000058

08001734 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2bff      	cmp	r3, #255	; 0xff
 8001742:	d009      	beq.n	8001758 <prvTraceGetParam+0x24>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800174a:	4293      	cmp	r3, r2
 800174c:	d004      	beq.n	8001758 <prvTraceGetParam+0x24>
 800174e:	4816      	ldr	r0, [pc, #88]	; (80017a8 <prvTraceGetParam+0x74>)
 8001750:	f000 fbe8 	bl	8001f24 <prvTraceError>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	e023      	b.n	80017a0 <prvTraceGetParam+0x6c>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	429a      	cmp	r2, r3
 800175e:	d801      	bhi.n	8001764 <prvTraceGetParam+0x30>
	{
		return param;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	e01d      	b.n	80017a0 <prvTraceGetParam+0x6c>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 8001764:	f000 fa16 	bl	8001b94 <prvTraceNextFreeEventBufferSlot>
 8001768:	60f8      	str	r0, [r7, #12]
		if (xps != NULL)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d014      	beq.n	800179a <prvTraceGetParam+0x66>
		{
			xps->type = DIV_XPS;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2201      	movs	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	43da      	mvns	r2, r3
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	4013      	ands	r3, r2
 800177e:	0a1b      	lsrs	r3, r3, #8
 8001780:	b2da      	uxtb	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	43da      	mvns	r2, r3
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	4013      	ands	r3, r2
 800178e:	0c1b      	lsrs	r3, r3, #16
 8001790:	b29a      	uxth	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8001796:	f000 fc7f 	bl	8002098 <prvTraceUpdateCounters>
		}

		return param & param_max;
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4013      	ands	r3, r2
	}
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	08007b94 	.word	0x08007b94

080017ac <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	84fb      	strh	r3, [r7, #38]	; 0x26

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2bfe      	cmp	r3, #254	; 0xfe
 80017be:	d903      	bls.n	80017c8 <prvTraceStoreKernelCallWithNumericParamOnly+0x1c>
 80017c0:	4828      	ldr	r0, [pc, #160]	; (8001864 <prvTraceStoreKernelCallWithNumericParamOnly+0xb8>)
 80017c2:	f000 fbaf 	bl	8001f24 <prvTraceError>
 80017c6:	e049      	b.n	800185c <prvTraceStoreKernelCallWithNumericParamOnly+0xb0>

	if (recorder_busy)
 80017c8:	4b27      	ldr	r3, [pc, #156]	; (8001868 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <prvTraceStoreKernelCallWithNumericParamOnly+0x2c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 80017d0:	4826      	ldr	r0, [pc, #152]	; (800186c <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 80017d2:	f000 fba7 	bl	8001f24 <prvTraceError>
		return;
 80017d6:	e041      	b.n	800185c <prvTraceStoreKernelCallWithNumericParamOnly+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017d8:	f3ef 8310 	mrs	r3, PRIMASK
 80017dc:	613b      	str	r3, [r7, #16]
  return(result);
 80017de:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 80017e0:	623b      	str	r3, [r7, #32]
 80017e2:	2301      	movs	r3, #1
 80017e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f383 8810 	msr	PRIMASK, r3
}
 80017ec:	bf00      	nop
 80017ee:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	3301      	adds	r3, #1
 80017f4:	4a1c      	ldr	r2, [pc, #112]	; (8001868 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 80017f6:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 80017f8:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <prvTraceStoreKernelCallWithNumericParamOnly+0xc4>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d021      	beq.n	8001846 <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
 8001802:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <prvTraceStoreKernelCallWithNumericParamOnly+0xc8>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d01d      	beq.n	8001846 <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 800180a:	20ff      	movs	r0, #255	; 0xff
 800180c:	f000 fc6c 	bl	80020e8 <prvTraceGetDTS>
 8001810:	4603      	mov	r3, r0
 8001812:	77fb      	strb	r3, [r7, #31]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 8001814:	6839      	ldr	r1, [r7, #0]
 8001816:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800181a:	f7ff ff8b 	bl	8001734 <prvTraceGetParam>
 800181e:	4603      	mov	r3, r0
 8001820:	84fb      	strh	r3, [r7, #38]	; 0x26
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 8001822:	f000 f9b7 	bl	8001b94 <prvTraceNextFreeEventBufferSlot>
 8001826:	61b8      	str	r0, [r7, #24]
		if (kse != NULL)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00b      	beq.n	8001846 <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
		{
			kse->dts = dts6;
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	7ffa      	ldrb	r2, [r7, #31]
 8001832:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001840:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8001842:	f000 fc29 	bl	8002098 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	3b01      	subs	r3, #1
 800184c:	4a06      	ldr	r2, [pc, #24]	; (8001868 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	6a3b      	ldr	r3, [r7, #32]
 8001852:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f383 8810 	msr	PRIMASK, r3
}
 800185a:	bf00      	nop
}
 800185c:	3728      	adds	r7, #40	; 0x28
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	08007bd0 	.word	0x08007bd0
 8001868:	20000050 	.word	0x20000050
 800186c:	08007c28 	.word	0x08007c28
 8001870:	20007a98 	.word	0x20007a98
 8001874:	20000058 	.word	0x20000058

08001878 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	2b0f      	cmp	r3, #15
 8001886:	d903      	bls.n	8001890 <prvTraceStoreTaskswitch+0x18>
 8001888:	482f      	ldr	r0, [pc, #188]	; (8001948 <prvTraceStoreTaskswitch+0xd0>)
 800188a:	f000 fb4b 	bl	8001f24 <prvTraceError>
 800188e:	e058      	b.n	8001942 <prvTraceStoreTaskswitch+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001890:	f3ef 8310 	mrs	r3, PRIMASK
 8001894:	60fb      	str	r3, [r7, #12]
  return(result);
 8001896:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	2301      	movs	r3, #1
 800189c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	f383 8810 	msr	PRIMASK, r3
}
 80018a4:	bf00      	nop
 80018a6:	4b29      	ldr	r3, [pc, #164]	; (800194c <prvTraceStoreTaskswitch+0xd4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	3301      	adds	r3, #1
 80018ac:	4a27      	ldr	r2, [pc, #156]	; (800194c <prvTraceStoreTaskswitch+0xd4>)
 80018ae:	6013      	str	r3, [r2, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 80018b0:	4b27      	ldr	r3, [pc, #156]	; (8001950 <prvTraceStoreTaskswitch+0xd8>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	79fa      	ldrb	r2, [r7, #7]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d038      	beq.n	800192c <prvTraceStoreTaskswitch+0xb4>
 80018ba:	4b26      	ldr	r3, [pc, #152]	; (8001954 <prvTraceStoreTaskswitch+0xdc>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d033      	beq.n	800192c <prvTraceStoreTaskswitch+0xb4>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
 80018c4:	4b24      	ldr	r3, [pc, #144]	; (8001958 <prvTraceStoreTaskswitch+0xe0>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 80018ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018ce:	f000 fc0b 	bl	80020e8 <prvTraceGetDTS>
 80018d2:	4603      	mov	r3, r0
 80018d4:	837b      	strh	r3, [r7, #26]
		handle_of_last_logged_task = task_handle;
 80018d6:	4a1e      	ldr	r2, [pc, #120]	; (8001950 <prvTraceStoreTaskswitch+0xd8>)
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	7013      	strb	r3, [r2, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 80018dc:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <prvTraceStoreTaskswitch+0xd8>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	767b      	strb	r3, [r7, #25]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 80018e2:	f000 f957 	bl	8001b94 <prvTraceNextFreeEventBufferSlot>
 80018e6:	6178      	str	r0, [r7, #20]

		if (ts != NULL)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d01e      	beq.n	800192c <prvTraceStoreTaskswitch+0xb4>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <prvTraceStoreTaskswitch+0xd8>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	4619      	mov	r1, r3
 80018f4:	2003      	movs	r0, #3
 80018f6:	f000 f8e7 	bl	8001ac8 <prvTraceGetObjectState>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d103      	bne.n	8001908 <prvTraceStoreTaskswitch+0x90>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	2207      	movs	r2, #7
 8001904:	701a      	strb	r2, [r3, #0]
 8001906:	e002      	b.n	800190e <prvTraceStoreTaskswitch+0x96>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	2206      	movs	r2, #6
 800190c:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	8b7a      	ldrh	r2, [r7, #26]
 8001912:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	7e7a      	ldrb	r2, [r7, #25]
 8001918:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 800191a:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <prvTraceStoreTaskswitch+0xd8>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2201      	movs	r2, #1
 8001920:	4619      	mov	r1, r3
 8001922:	2003      	movs	r0, #3
 8001924:	f000 f894 	bl	8001a50 <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 8001928:	f000 fbb6 	bl	8002098 <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <prvTraceStoreTaskswitch+0xd4>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	3b01      	subs	r3, #1
 8001932:	4a06      	ldr	r2, [pc, #24]	; (800194c <prvTraceStoreTaskswitch+0xd4>)
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	f383 8810 	msr	PRIMASK, r3
}
 8001940:	bf00      	nop
}
 8001942:	3720      	adds	r7, #32
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	08007c60 	.word	0x08007c60
 800194c:	20000050 	.word	0x20000050
 8001950:	20000058 	.word	0x20000058
 8001954:	20007a98 	.word	0x20007a98
 8001958:	2000003c 	.word	0x2000003c

0800195c <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
 8001966:	460b      	mov	r3, r1
 8001968:	71bb      	strb	r3, [r7, #6]
 800196a:	4613      	mov	r3, r2
 800196c:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	2b08      	cmp	r3, #8
 8001972:	d903      	bls.n	800197c <prvTraceSetPriorityProperty+0x20>
 8001974:	4814      	ldr	r0, [pc, #80]	; (80019c8 <prvTraceSetPriorityProperty+0x6c>)
 8001976:	f000 fad5 	bl	8001f24 <prvTraceError>
 800197a:	e022      	b.n	80019c2 <prvTraceSetPriorityProperty+0x66>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 800197c:	4b13      	ldr	r3, [pc, #76]	; (80019cc <prvTraceSetPriorityProperty+0x70>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	4413      	add	r3, r2
 8001984:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001988:	79ba      	ldrb	r2, [r7, #6]
 800198a:	429a      	cmp	r2, r3
 800198c:	d903      	bls.n	8001996 <prvTraceSetPriorityProperty+0x3a>
 800198e:	4810      	ldr	r0, [pc, #64]	; (80019d0 <prvTraceSetPriorityProperty+0x74>)
 8001990:	f000 fac8 	bl	8001f24 <prvTraceError>
 8001994:	e015      	b.n	80019c2 <prvTraceSetPriorityProperty+0x66>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8001996:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <prvTraceSetPriorityProperty+0x70>)
 8001998:	681c      	ldr	r4, [r3, #0]
 800199a:	79fa      	ldrb	r2, [r7, #7]
 800199c:	79bb      	ldrb	r3, [r7, #6]
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 f91b 	bl	8001bdc <uiIndexOfObject>
 80019a6:	4603      	mov	r3, r0
 80019a8:	4619      	mov	r1, r3
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <prvTraceSetPriorityProperty+0x70>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	4413      	add	r3, r2
 80019b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80019b6:	440b      	add	r3, r1
 80019b8:	3301      	adds	r3, #1
 80019ba:	4423      	add	r3, r4
 80019bc:	797a      	ldrb	r2, [r7, #5]
 80019be:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd90      	pop	{r4, r7, pc}
 80019c8:	08007df4 	.word	0x08007df4
 80019cc:	20007a98 	.word	0x20007a98
 80019d0:	08007e40 	.word	0x08007e40

080019d4 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	460a      	mov	r2, r1
 80019de:	71fb      	strb	r3, [r7, #7]
 80019e0:	4613      	mov	r3, r2
 80019e2:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d904      	bls.n	80019f4 <prvTraceGetPriorityProperty+0x20>
 80019ea:	4816      	ldr	r0, [pc, #88]	; (8001a44 <prvTraceGetPriorityProperty+0x70>)
 80019ec:	f000 fa9a 	bl	8001f24 <prvTraceError>
 80019f0:	2300      	movs	r3, #0
 80019f2:	e022      	b.n	8001a3a <prvTraceGetPriorityProperty+0x66>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 80019f4:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <prvTraceGetPriorityProperty+0x74>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	4413      	add	r3, r2
 80019fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a00:	79ba      	ldrb	r2, [r7, #6]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d904      	bls.n	8001a10 <prvTraceGetPriorityProperty+0x3c>
 8001a06:	4811      	ldr	r0, [pc, #68]	; (8001a4c <prvTraceGetPriorityProperty+0x78>)
 8001a08:	f000 fa8c 	bl	8001f24 <prvTraceError>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	e014      	b.n	8001a3a <prvTraceGetPriorityProperty+0x66>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
 8001a10:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <prvTraceGetPriorityProperty+0x74>)
 8001a12:	681c      	ldr	r4, [r3, #0]
 8001a14:	79fa      	ldrb	r2, [r7, #7]
 8001a16:	79bb      	ldrb	r3, [r7, #6]
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 f8de 	bl	8001bdc <uiIndexOfObject>
 8001a20:	4603      	mov	r3, r0
 8001a22:	4619      	mov	r1, r3
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <prvTraceGetPriorityProperty+0x74>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001a30:	440b      	add	r3, r1
 8001a32:	3301      	adds	r3, #1
 8001a34:	4423      	add	r3, r4
 8001a36:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd90      	pop	{r4, r7, pc}
 8001a42:	bf00      	nop
 8001a44:	08007e80 	.word	0x08007e80
 8001a48:	20007a98 	.word	0x20007a98
 8001a4c:	08007ecc 	.word	0x08007ecc

08001a50 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	71bb      	strb	r3, [r7, #6]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d903      	bls.n	8001a70 <prvTraceSetObjectState+0x20>
 8001a68:	4814      	ldr	r0, [pc, #80]	; (8001abc <prvTraceSetObjectState+0x6c>)
 8001a6a:	f000 fa5b 	bl	8001f24 <prvTraceError>
 8001a6e:	e021      	b.n	8001ab4 <prvTraceSetObjectState+0x64>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8001a70:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <prvTraceSetObjectState+0x70>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	4413      	add	r3, r2
 8001a78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a7c:	79ba      	ldrb	r2, [r7, #6]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d903      	bls.n	8001a8a <prvTraceSetObjectState+0x3a>
 8001a82:	4810      	ldr	r0, [pc, #64]	; (8001ac4 <prvTraceSetObjectState+0x74>)
 8001a84:	f000 fa4e 	bl	8001f24 <prvTraceError>
 8001a88:	e014      	b.n	8001ab4 <prvTraceSetObjectState+0x64>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <prvTraceSetObjectState+0x70>)
 8001a8c:	681c      	ldr	r4, [r3, #0]
 8001a8e:	79fa      	ldrb	r2, [r7, #7]
 8001a90:	79bb      	ldrb	r3, [r7, #6]
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f000 f8a1 	bl	8001bdc <uiIndexOfObject>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <prvTraceSetObjectState+0x70>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001aaa:	440b      	add	r3, r1
 8001aac:	4423      	add	r3, r4
 8001aae:	797a      	ldrb	r2, [r7, #5]
 8001ab0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd90      	pop	{r4, r7, pc}
 8001aba:	bf00      	nop
 8001abc:	08007f0c 	.word	0x08007f0c
 8001ac0:	20007a98 	.word	0x20007a98
 8001ac4:	08007f50 	.word	0x08007f50

08001ac8 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	460a      	mov	r2, r1
 8001ad2:	71fb      	strb	r3, [r7, #7]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d904      	bls.n	8001ae8 <prvTraceGetObjectState+0x20>
 8001ade:	4815      	ldr	r0, [pc, #84]	; (8001b34 <prvTraceGetObjectState+0x6c>)
 8001ae0:	f000 fa20 	bl	8001f24 <prvTraceError>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	e021      	b.n	8001b2c <prvTraceGetObjectState+0x64>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <prvTraceGetObjectState+0x70>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	4413      	add	r3, r2
 8001af0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001af4:	79ba      	ldrb	r2, [r7, #6]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d904      	bls.n	8001b04 <prvTraceGetObjectState+0x3c>
 8001afa:	4810      	ldr	r0, [pc, #64]	; (8001b3c <prvTraceGetObjectState+0x74>)
 8001afc:	f000 fa12 	bl	8001f24 <prvTraceError>
 8001b00:	2300      	movs	r3, #0
 8001b02:	e013      	b.n	8001b2c <prvTraceGetObjectState+0x64>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <prvTraceGetObjectState+0x70>)
 8001b06:	681c      	ldr	r4, [r3, #0]
 8001b08:	79fa      	ldrb	r2, [r7, #7]
 8001b0a:	79bb      	ldrb	r3, [r7, #6]
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f864 	bl	8001bdc <uiIndexOfObject>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4619      	mov	r1, r3
 8001b18:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <prvTraceGetObjectState+0x70>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	4413      	add	r3, r2
 8001b20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001b24:	440b      	add	r3, r1
 8001b26:	4423      	add	r3, r4
 8001b28:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd90      	pop	{r4, r7, pc}
 8001b34:	08007f8c 	.word	0x08007f8c
 8001b38:	20007a98 	.word	0x20007a98
 8001b3c:	08007fd0 	.word	0x08007fd0

08001b40 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <prvTraceSetTaskInstanceFinished+0x4c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001b52:	79fa      	ldrb	r2, [r7, #7]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d903      	bls.n	8001b60 <prvTraceSetTaskInstanceFinished+0x20>
 8001b58:	480d      	ldr	r0, [pc, #52]	; (8001b90 <prvTraceSetTaskInstanceFinished+0x50>)
 8001b5a:	f000 f9e3 	bl	8001f24 <prvTraceError>
 8001b5e:	e011      	b.n	8001b84 <prvTraceSetTaskInstanceFinished+0x44>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 8001b60:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <prvTraceSetTaskInstanceFinished+0x4c>)
 8001b62:	681c      	ldr	r4, [r3, #0]
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	2103      	movs	r1, #3
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f000 f837 	bl	8001bdc <uiIndexOfObject>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <prvTraceSetTaskInstanceFinished+0x4c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8001b7a:	4413      	add	r3, r2
 8001b7c:	4423      	add	r3, r4
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
#endif
}
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd90      	pop	{r4, r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20007a98 	.word	0x20007a98
 8001b90:	0800800c 	.word	0x0800800c

08001b94 <prvTraceNextFreeEventBufferSlot>:

void* prvTraceNextFreeEventBufferSlot(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 8001b98:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <prvTraceNextFreeEventBufferSlot+0x40>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e014      	b.n	8001bd0 <prvTraceNextFreeEventBufferSlot+0x3c>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <prvTraceNextFreeEventBufferSlot+0x40>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bb0:	d304      	bcc.n	8001bbc <prvTraceNextFreeEventBufferSlot+0x28>
	{
		prvTraceError("Attempt to index outside event buffer!");
 8001bb2:	4809      	ldr	r0, [pc, #36]	; (8001bd8 <prvTraceNextFreeEventBufferSlot+0x44>)
 8001bb4:	f000 f9b6 	bl	8001f24 <prvTraceError>
		return NULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	e009      	b.n	8001bd0 <prvTraceNextFreeEventBufferSlot+0x3c>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <prvTraceNextFreeEventBufferSlot+0x40>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <prvTraceNextFreeEventBufferSlot+0x40>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8001bcc:	4413      	add	r3, r2
 8001bce:	3304      	adds	r3, #4
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20007a98 	.word	0x20007a98
 8001bd8:	08008054 	.word	0x08008054

08001bdc <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	460a      	mov	r2, r1
 8001be6:	71fb      	strb	r3, [r7, #7]
 8001be8:	4613      	mov	r3, r2
 8001bea:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 8001bec:	79bb      	ldrb	r3, [r7, #6]
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d904      	bls.n	8001bfc <uiIndexOfObject+0x20>
 8001bf2:	4822      	ldr	r0, [pc, #136]	; (8001c7c <uiIndexOfObject+0xa0>)
 8001bf4:	f000 f996 	bl	8001f24 <prvTraceError>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	e03a      	b.n	8001c72 <uiIndexOfObject+0x96>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d008      	beq.n	8001c14 <uiIndexOfObject+0x38>
 8001c02:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <uiIndexOfObject+0xa4>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	79bb      	ldrb	r3, [r7, #6]
 8001c08:	4413      	add	r3, r2
 8001c0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c0e:	79fa      	ldrb	r2, [r7, #7]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d904      	bls.n	8001c1e <uiIndexOfObject+0x42>
 8001c14:	481b      	ldr	r0, [pc, #108]	; (8001c84 <uiIndexOfObject+0xa8>)
 8001c16:	f000 f985 	bl	8001f24 <prvTraceError>
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e029      	b.n	8001c72 <uiIndexOfObject+0x96>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8001c1e:	79bb      	ldrb	r3, [r7, #6]
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	d822      	bhi.n	8001c6a <uiIndexOfObject+0x8e>
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d01f      	beq.n	8001c6a <uiIndexOfObject+0x8e>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <uiIndexOfObject+0xa4>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	79bb      	ldrb	r3, [r7, #6]
 8001c30:	4413      	add	r3, r2
 8001c32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8001c36:	79fa      	ldrb	r2, [r7, #7]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d816      	bhi.n	8001c6a <uiIndexOfObject+0x8e>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8001c3c:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <uiIndexOfObject+0xa4>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	79bb      	ldrb	r3, [r7, #6]
 8001c42:	3338      	adds	r3, #56	; 0x38
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	889a      	ldrh	r2, [r3, #4]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <uiIndexOfObject+0xa4>)
 8001c4c:	6819      	ldr	r1, [r3, #0]
 8001c4e:	79bb      	ldrb	r3, [r7, #6]
 8001c50:	440b      	add	r3, r1
 8001c52:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8001c56:	b299      	uxth	r1, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	3b01      	subs	r3, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	fb11 f303 	smulbb	r3, r1, r3
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	e003      	b.n	8001c72 <uiIndexOfObject+0x96>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 8001c6a:	4807      	ldr	r0, [pc, #28]	; (8001c88 <uiIndexOfObject+0xac>)
 8001c6c:	f000 f95a 	bl	8001f24 <prvTraceError>
	return 0;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	0800807c 	.word	0x0800807c
 8001c80:	20007a98 	.word	0x20007a98
 8001c84:	080080bc 	.word	0x080080bc
 8001c88:	080080fc 	.word	0x080080fc

08001c8c <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
 8001c96:	4b4e      	ldr	r3, [pc, #312]	; (8001dd0 <prvTraceGetObjectHandle+0x144>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d104      	bne.n	8001ca8 <prvTraceGetObjectHandle+0x1c>
 8001c9e:	484d      	ldr	r0, [pc, #308]	; (8001dd4 <prvTraceGetObjectHandle+0x148>)
 8001ca0:	f000 f940 	bl	8001f24 <prvTraceError>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e08f      	b.n	8001dc8 <prvTraceGetObjectHandle+0x13c>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d904      	bls.n	8001cb8 <prvTraceGetObjectHandle+0x2c>
 8001cae:	484a      	ldr	r0, [pc, #296]	; (8001dd8 <prvTraceGetObjectHandle+0x14c>)
 8001cb0:	f000 f938 	bl	8001f24 <prvTraceError>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e087      	b.n	8001dc8 <prvTraceGetObjectHandle+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8001cbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 8001cc0:	61bb      	str	r3, [r7, #24]
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	f383 8810 	msr	PRIMASK, r3
}
 8001ccc:	bf00      	nop
 8001cce:	4b43      	ldr	r3, [pc, #268]	; (8001ddc <prvTraceGetObjectHandle+0x150>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	4a41      	ldr	r2, [pc, #260]	; (8001ddc <prvTraceGetObjectHandle+0x150>)
 8001cd6:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	4a41      	ldr	r2, [pc, #260]	; (8001de0 <prvTraceGetObjectHandle+0x154>)
 8001cdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b40      	ldr	r3, [pc, #256]	; (8001de4 <prvTraceGetObjectHandle+0x158>)
 8001ce4:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 8001ce6:	4b3f      	ldr	r3, [pc, #252]	; (8001de4 <prvTraceGetObjectHandle+0x158>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a3d      	ldr	r2, [pc, #244]	; (8001de0 <prvTraceGetObjectHandle+0x154>)
 8001cec:	4413      	add	r3, r2
 8001cee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d114      	bne.n	8001d20 <prvTraceGetObjectHandle+0x94>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 8001cf6:	4b3b      	ldr	r3, [pc, #236]	; (8001de4 <prvTraceGetObjectHandle+0x158>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	4938      	ldr	r1, [pc, #224]	; (8001de0 <prvTraceGetObjectHandle+0x154>)
 8001d00:	3308      	adds	r3, #8
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	440b      	add	r3, r1
 8001d06:	885b      	ldrh	r3, [r3, #2]
			(traceHandle)(1 + indexOfHandle -
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 8001d0e:	4b35      	ldr	r3, [pc, #212]	; (8001de4 <prvTraceGetObjectHandle+0x158>)
 8001d10:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 8001d12:	3201      	adds	r2, #1
 8001d14:	b2d1      	uxtb	r1, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 8001d16:	4a32      	ldr	r2, [pc, #200]	; (8001de0 <prvTraceGetObjectHandle+0x154>)
 8001d18:	4413      	add	r3, r2
 8001d1a:	460a      	mov	r2, r1
 8001d1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 8001d20:	4b30      	ldr	r3, [pc, #192]	; (8001de4 <prvTraceGetObjectHandle+0x158>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a2e      	ldr	r2, [pc, #184]	; (8001de0 <prvTraceGetObjectHandle+0x154>)
 8001d26:	4413      	add	r3, r2
 8001d28:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001d2c:	77fb      	strb	r3, [r7, #31]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	4a2b      	ldr	r2, [pc, #172]	; (8001de0 <prvTraceGetObjectHandle+0x154>)
 8001d32:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	4929      	ldr	r1, [pc, #164]	; (8001de0 <prvTraceGetObjectHandle+0x154>)
 8001d3a:	3310      	adds	r3, #16
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	440b      	add	r3, r1
 8001d40:	889b      	ldrh	r3, [r3, #4]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d90a      	bls.n	8001d5c <prvTraceGetObjectHandle+0xd0>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff f8e5 	bl	8000f18 <pszTraceGetErrorNotEnoughHandles>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 f8e7 	bl	8001f24 <prvTraceError>
		handle = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	77fb      	strb	r3, [r7, #31]
 8001d5a:	e029      	b.n	8001db0 <prvTraceGetObjectHandle+0x124>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	4a20      	ldr	r2, [pc, #128]	; (8001de0 <prvTraceGetObjectHandle+0x154>)
 8001d60:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001d64:	3201      	adds	r2, #1
 8001d66:	b291      	uxth	r1, r2
 8001d68:	4a1d      	ldr	r2, [pc, #116]	; (8001de0 <prvTraceGetObjectHandle+0x154>)
 8001d6a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	4a1b      	ldr	r2, [pc, #108]	; (8001de0 <prvTraceGetObjectHandle+0x154>)
 8001d72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d76:	4619      	mov	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	4a19      	ldr	r2, [pc, #100]	; (8001de0 <prvTraceGetObjectHandle+0x154>)
 8001d7c:	3308      	adds	r3, #8
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4413      	add	r3, r2
 8001d82:	885b      	ldrh	r3, [r3, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8001d84:	1acb      	subs	r3, r1, r3
 8001d86:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	4a15      	ldr	r2, [pc, #84]	; (8001de0 <prvTraceGetObjectHandle+0x154>)
 8001d8c:	3318      	adds	r3, #24
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	88db      	ldrh	r3, [r3, #6]
 8001d94:	461a      	mov	r2, r3
		if (hndCount >
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	dd09      	ble.n	8001db0 <prvTraceGetObjectHandle+0x124>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8001da0:	79fb      	ldrb	r3, [r7, #7]
				(traceHandle)hndCount;
 8001da2:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8001da4:	4a0e      	ldr	r2, [pc, #56]	; (8001de0 <prvTraceGetObjectHandle+0x154>)
 8001da6:	3318      	adds	r3, #24
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	460a      	mov	r2, r1
 8001dae:	80da      	strh	r2, [r3, #6]
		}
	}
	trcCRITICAL_SECTION_END();
 8001db0:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <prvTraceGetObjectHandle+0x150>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	3b01      	subs	r3, #1
 8001db6:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <prvTraceGetObjectHandle+0x150>)
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	f383 8810 	msr	PRIMASK, r3
}
 8001dc4:	bf00      	nop

	return handle;
 8001dc6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3720      	adds	r7, #32
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20007a98 	.word	0x20007a98
 8001dd4:	0800755c 	.word	0x0800755c
 8001dd8:	0800813c 	.word	0x0800813c
 8001ddc:	20000050 	.word	0x20000050
 8001de0:	200093ac 	.word	0x200093ac
 8001de4:	20000064 	.word	0x20000064

08001de8 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	460a      	mov	r2, r1
 8001df2:	71fb      	strb	r3, [r7, #7]
 8001df4:	4613      	mov	r3, r2
 8001df6:	71bb      	strb	r3, [r7, #6]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 8001df8:	79fa      	ldrb	r2, [r7, #7]
 8001dfa:	79bb      	ldrb	r3, [r7, #6]
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff feec 	bl	8001bdc <uiIndexOfObject>
 8001e04:	4603      	mov	r3, r0
 8001e06:	81fb      	strh	r3, [r7, #14]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <prvMarkObjectAsUsed+0x38>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	89fb      	ldrh	r3, [r7, #14]
 8001e0e:	4413      	add	r3, r2
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20007a98 	.word	0x20007a98

08001e24 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	e010      	b.n	8001e58 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	441a      	add	r2, r3
 8001e3c:	68f9      	ldr	r1, [r7, #12]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	440b      	add	r3, r1
 8001e42:	7812      	ldrb	r2, [r2, #0]
 8001e44:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d007      	beq.n	8001e62 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	3301      	adds	r3, #1
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d3ea      	bcc.n	8001e36 <prvStrncpy+0x12>
			break;
	}
}
 8001e60:	e000      	b.n	8001e64 <prvStrncpy+0x40>
			break;
 8001e62:	bf00      	nop
}
 8001e64:	bf00      	nop
 8001e66:	371c      	adds	r7, #28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	603a      	str	r2, [r7, #0]
 8001e7a:	71fb      	strb	r3, [r7, #7]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	71bb      	strb	r3, [r7, #6]
	static uint16_t idx;

	if (name == 0)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <prvTraceSetObjectName+0x1a>
	{
		name = "";
 8001e86:	4b21      	ldr	r3, [pc, #132]	; (8001f0c <prvTraceSetObjectName+0x9c>)
 8001e88:	603b      	str	r3, [r7, #0]
	}

	if (objectclass >= TRACE_NCLASSES)
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d903      	bls.n	8001e98 <prvTraceSetObjectName+0x28>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 8001e90:	481f      	ldr	r0, [pc, #124]	; (8001f10 <prvTraceSetObjectName+0xa0>)
 8001e92:	f000 f847 	bl	8001f24 <prvTraceError>
		return;
 8001e96:	e036      	b.n	8001f06 <prvTraceSetObjectName+0x96>
	}

	if (handle == 0)
 8001e98:	79bb      	ldrb	r3, [r7, #6]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d103      	bne.n	8001ea6 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 8001e9e:	481d      	ldr	r0, [pc, #116]	; (8001f14 <prvTraceSetObjectName+0xa4>)
 8001ea0:	f000 f840 	bl	8001f24 <prvTraceError>
		return;
 8001ea4:	e02f      	b.n	8001f06 <prvTraceSetObjectName+0x96>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 8001ea6:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <prvTraceSetObjectName+0xa8>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	4413      	add	r3, r2
 8001eae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001eb2:	79ba      	ldrb	r2, [r7, #6]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d908      	bls.n	8001eca <prvTraceSetObjectName+0x5a>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff f82c 	bl	8000f18 <pszTraceGetErrorNotEnoughHandles>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f82e 	bl	8001f24 <prvTraceError>
 8001ec8:	e01d      	b.n	8001f06 <prvTraceSetObjectName+0x96>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 8001eca:	79fa      	ldrb	r2, [r7, #7]
 8001ecc:	79bb      	ldrb	r3, [r7, #6]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fe83 	bl	8001bdc <uiIndexOfObject>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <prvTraceSetObjectName+0xac>)
 8001edc:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <prvTraceSetObjectName+0xb0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10f      	bne.n	8001f06 <prvTraceSetObjectName+0x96>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <prvTraceSetObjectName+0xa8>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <prvTraceSetObjectName+0xac>)
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	3388      	adds	r3, #136	; 0x88
 8001ef0:	18d0      	adds	r0, r2, r3
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 8001ef2:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <prvTraceSetObjectName+0xa8>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8001efe:	461a      	mov	r2, r3
 8001f00:	6839      	ldr	r1, [r7, #0]
 8001f02:	f7ff ff8f 	bl	8001e24 <prvStrncpy>
		}
	}
}
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	08008240 	.word	0x08008240
 8001f10:	08008244 	.word	0x08008244
 8001f14:	08008274 	.word	0x08008274
 8001f18:	20007a98 	.word	0x20007a98
 8001f1c:	20000068 	.word	0x20000068
 8001f20:	200093a4 	.word	0x200093a4

08001f24 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <prvTraceError+0x50>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <prvTraceError+0x14>
	{
		vTraceStop();
 8001f34:	f7ff f8b2 	bl	800109c <vTraceStop>
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
 8001f38:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <prvTraceError+0x54>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d115      	bne.n	8001f6c <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 8001f40:	4a0d      	ldr	r2, [pc, #52]	; (8001f78 <prvTraceError+0x54>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8001f46:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <prvTraceError+0x50>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00e      	beq.n	8001f6c <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <prvTraceError+0x50>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f56:	4a08      	ldr	r2, [pc, #32]	; (8001f78 <prvTraceError+0x54>)
 8001f58:	6811      	ldr	r1, [r2, #0]
 8001f5a:	2250      	movs	r2, #80	; 0x50
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff61 	bl	8001e24 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 8001f62:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <prvTraceError+0x50>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
		}
	}
}
 8001f6c:	bf00      	nop
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20007a98 	.word	0x20007a98
 8001f78:	200093a4 	.word	0x200093a4

08001f7c <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	71fb      	strb	r3, [r7, #7]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d175      	bne.n	8002080 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x104>
 8001f94:	483e      	ldr	r0, [pc, #248]	; (8002090 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x114>)
 8001f96:	f7ff ffc5 	bl	8001f24 <prvTraceError>
 8001f9a:	e075      	b.n	8002088 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 8001f9c:	4b3d      	ldr	r3, [pc, #244]	; (8002094 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8001fa8:	4b3a      	ldr	r3, [pc, #232]	; (8002094 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 8001fb6:	2b98      	cmp	r3, #152	; 0x98
 8001fb8:	d929      	bls.n	800200e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x92>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 8001fba:	4b36      	ldr	r3, [pc, #216]	; (8002094 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8001fc8:	2ba7      	cmp	r3, #167	; 0xa7
 8001fca:	d820      	bhi.n	800200e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x92>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 8001fcc:	4b31      	ldr	r3, [pc, #196]	; (8002094 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 8001fda:	3368      	adds	r3, #104	; 0x68
 8001fdc:	73fb      	strb	r3, [r7, #15]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 8001fde:	7bfa      	ldrb	r2, [r7, #15]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	441a      	add	r2, r3
 8001fe4:	4b2b      	ldr	r3, [pc, #172]	; (8002094 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d244      	bcs.n	8002078 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfc>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 8001fee:	4b29      	ldr	r3, [pc, #164]	; (8002094 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8001ffa:	4413      	add	r3, r2
 8001ffc:	1d18      	adds	r0, r3, #4
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	3301      	adds	r3, #1
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	461a      	mov	r2, r3
 8002006:	2100      	movs	r1, #0
 8002008:	f005 f898 	bl	800713c <memset>
		{
 800200c:	e034      	b.n	8002078 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfc>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 800200e:	4b21      	ldr	r3, [pc, #132]	; (8002094 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 800201c:	2b01      	cmp	r3, #1
 800201e:	d12c      	bne.n	800207a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfe>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	429a      	cmp	r2, r3
 800202c:	d20d      	bcs.n	800204a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xce>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 800202e:	4b19      	ldr	r3, [pc, #100]	; (8002094 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 800203a:	4413      	add	r3, r2
 800203c:	3304      	adds	r3, #4
 800203e:	2208      	movs	r2, #8
 8002040:	2100      	movs	r1, #0
 8002042:	4618      	mov	r0, r3
 8002044:	f005 f87a 	bl	800713c <memset>
 8002048:	e017      	b.n	800207a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfe>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 800204a:	4b12      	ldr	r3, [pc, #72]	; (8002094 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f603 1354 	addw	r3, r3, #2388	; 0x954
 8002052:	2204      	movs	r2, #4
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f005 f870 	bl	800713c <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 800205c:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8002068:	4413      	add	r3, r2
 800206a:	3304      	adds	r3, #4
 800206c:	2204      	movs	r2, #4
 800206e:	2100      	movs	r1, #0
 8002070:	4618      	mov	r0, r3
 8002072:	f005 f863 	bl	800713c <memset>
 8002076:	e000      	b.n	800207a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfe>
		{
 8002078:	bf00      	nop
			}
		}
		i++;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	3301      	adds	r3, #1
 800207e:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	429a      	cmp	r2, r3
 8002086:	d389      	bcc.n	8001f9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x20>
	}
}
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	080082d4 	.word	0x080082d4
 8002094:	20007a98 	.word	0x20007a98

08002098 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <prvTraceUpdateCounters+0x4c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d01b      	beq.n	80020de <prvTraceUpdateCounters+0x46>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 80020a6:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <prvTraceUpdateCounters+0x4c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	695a      	ldr	r2, [r3, #20]
 80020ac:	3201      	adds	r2, #1
 80020ae:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <prvTraceUpdateCounters+0x4c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	69da      	ldr	r2, [r3, #28]
 80020b6:	3201      	adds	r2, #1
 80020b8:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 80020ba:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <prvTraceUpdateCounters+0x4c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020c4:	d307      	bcc.n	80020d6 <prvTraceUpdateCounters+0x3e>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 80020c6:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <prvTraceUpdateCounters+0x4c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2201      	movs	r2, #1
 80020cc:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 80020ce:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <prvTraceUpdateCounters+0x4c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2200      	movs	r2, #0
 80020d4:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 80020d6:	2001      	movs	r0, #1
 80020d8:	f7ff ff50 	bl	8001f7c <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 80020dc:	e000      	b.n	80020e0 <prvTraceUpdateCounters+0x48>
		return;
 80020de:	bf00      	nop
#endif
}
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20007a98 	.word	0x20007a98

080020e8 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	80fb      	strh	r3, [r7, #6]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	2bff      	cmp	r3, #255	; 0xff
 8002102:	d009      	beq.n	8002118 <prvTraceGetDTS+0x30>
 8002104:	88fb      	ldrh	r3, [r7, #6]
 8002106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800210a:	4293      	cmp	r3, r2
 800210c:	d004      	beq.n	8002118 <prvTraceGetDTS+0x30>
 800210e:	4859      	ldr	r0, [pc, #356]	; (8002274 <prvTraceGetDTS+0x18c>)
 8002110:	f7ff ff08 	bl	8001f24 <prvTraceError>
 8002114:	2300      	movs	r3, #0
 8002116:	e0a9      	b.n	800226c <prvTraceGetDTS+0x184>

	
	if (RecorderDataPtr->frequency == 0)
 8002118:	4b57      	ldr	r3, [pc, #348]	; (8002278 <prvTraceGetDTS+0x190>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	2b00      	cmp	r3, #0
 8002120:	d114      	bne.n	800214c <prvTraceGetDTS+0x64>
	{	
		if (timestampFrequency != 0)
 8002122:	4b56      	ldr	r3, [pc, #344]	; (800227c <prvTraceGetDTS+0x194>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d006      	beq.n	8002138 <prvTraceGetDTS+0x50>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 800212a:	4b54      	ldr	r3, [pc, #336]	; (800227c <prvTraceGetDTS+0x194>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	4b52      	ldr	r3, [pc, #328]	; (8002278 <prvTraceGetDTS+0x190>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	0892      	lsrs	r2, r2, #2
 8002134:	625a      	str	r2, [r3, #36]	; 0x24
 8002136:	e009      	b.n	800214c <prvTraceGetDTS+0x64>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 8002138:	4b51      	ldr	r3, [pc, #324]	; (8002280 <prvTraceGetDTS+0x198>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b51      	ldr	r3, [pc, #324]	; (8002284 <prvTraceGetDTS+0x19c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d003      	beq.n	800214c <prvTraceGetDTS+0x64>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 8002144:	4b4c      	ldr	r3, [pc, #304]	; (8002278 <prvTraceGetDTS+0x190>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a4f      	ldr	r2, [pc, #316]	; (8002288 <prvTraceGetDTS+0x1a0>)
 800214a:	625a      	str	r2, [r3, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 800214c:	f107 030c 	add.w	r3, r7, #12
 8002150:	4618      	mov	r0, r3
 8002152:	f000 f8d7 	bl	8002304 <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4b4c      	ldr	r3, [pc, #304]	; (800228c <prvTraceGetDTS+0x1a4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4a4a      	ldr	r2, [pc, #296]	; (800228c <prvTraceGetDTS+0x1a4>)
 8002164:	6013      	str	r3, [r2, #0]

	if (RecorderDataPtr->frequency > 0)
 8002166:	4b44      	ldr	r3, [pc, #272]	; (8002278 <prvTraceGetDTS+0x190>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	2b00      	cmp	r3, #0
 800216e:	d043      	beq.n	80021f8 <prvTraceGetDTS+0x110>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 8002170:	4b41      	ldr	r3, [pc, #260]	; (8002278 <prvTraceGetDTS+0x190>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	429a      	cmp	r2, r3
 800217a:	d91d      	bls.n	80021b8 <prvTraceGetDTS+0xd0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 800217c:	4b3e      	ldr	r3, [pc, #248]	; (8002278 <prvTraceGetDTS+0x190>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002182:	4b3d      	ldr	r3, [pc, #244]	; (8002278 <prvTraceGetDTS+0x190>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	fbb2 f2f3 	udiv	r2, r2, r3
 800218e:	4b3a      	ldr	r3, [pc, #232]	; (8002278 <prvTraceGetDTS+0x190>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	440a      	add	r2, r1
 8002194:	62da      	str	r2, [r3, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 8002196:	4b38      	ldr	r3, [pc, #224]	; (8002278 <prvTraceGetDTS+0x190>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800219c:	4b36      	ldr	r3, [pc, #216]	; (8002278 <prvTraceGetDTS+0x190>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80021a8:	fb02 f200 	mul.w	r2, r2, r0
 80021ac:	1a9a      	subs	r2, r3, r2
 80021ae:	4b32      	ldr	r3, [pc, #200]	; (8002278 <prvTraceGetDTS+0x190>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	440a      	add	r2, r1
 80021b4:	629a      	str	r2, [r3, #40]	; 0x28
 80021b6:	e007      	b.n	80021c8 <prvTraceGetDTS+0xe0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 80021b8:	4b2f      	ldr	r3, [pc, #188]	; (8002278 <prvTraceGetDTS+0x190>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80021be:	4b2e      	ldr	r3, [pc, #184]	; (8002278 <prvTraceGetDTS+0x190>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	440a      	add	r2, r1
 80021c6:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 80021c8:	4b2b      	ldr	r3, [pc, #172]	; (8002278 <prvTraceGetDTS+0x190>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021ce:	4b2a      	ldr	r3, [pc, #168]	; (8002278 <prvTraceGetDTS+0x190>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d313      	bcc.n	8002200 <prvTraceGetDTS+0x118>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 80021d8:	4b27      	ldr	r3, [pc, #156]	; (8002278 <prvTraceGetDTS+0x190>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021de:	3201      	adds	r2, #1
 80021e0:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 80021e2:	4b25      	ldr	r3, [pc, #148]	; (8002278 <prvTraceGetDTS+0x190>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80021e8:	4b23      	ldr	r3, [pc, #140]	; (8002278 <prvTraceGetDTS+0x190>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ee:	4b22      	ldr	r3, [pc, #136]	; (8002278 <prvTraceGetDTS+0x190>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	1a8a      	subs	r2, r1, r2
 80021f4:	629a      	str	r2, [r3, #40]	; 0x28
 80021f6:	e003      	b.n	8002200 <prvTraceGetDTS+0x118>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 80021f8:	4b1f      	ldr	r3, [pc, #124]	; (8002278 <prvTraceGetDTS+0x190>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 8002200:	88fb      	ldrh	r3, [r7, #6]
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	429a      	cmp	r2, r3
 8002206:	d92c      	bls.n	8002262 <prvTraceGetDTS+0x17a>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 8002208:	f7ff fcc4 	bl	8001b94 <prvTraceNextFreeEventBufferSlot>
 800220c:	6178      	str	r0, [r7, #20]

		if (xts != NULL)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d026      	beq.n	8002262 <prvTraceGetDTS+0x17a>
		{
			if (param_maxDTS == 0xFFFF)
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800221a:	4293      	cmp	r3, r2
 800221c:	d10b      	bne.n	8002236 <prvTraceGetDTS+0x14e>
			{
				xts->type = XTS16;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	22a9      	movs	r2, #169	; 0xa9
 8002222:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	0c1b      	lsrs	r3, r3, #16
 8002228:	b29a      	uxth	r2, r3
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2200      	movs	r2, #0
 8002232:	705a      	strb	r2, [r3, #1]
 8002234:	e013      	b.n	800225e <prvTraceGetDTS+0x176>
			}
			else if (param_maxDTS == 0xFF)
 8002236:	88fb      	ldrh	r3, [r7, #6]
 8002238:	2bff      	cmp	r3, #255	; 0xff
 800223a:	d10d      	bne.n	8002258 <prvTraceGetDTS+0x170>
			{
				xts->type = XTS8;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	22a8      	movs	r2, #168	; 0xa8
 8002240:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	0a1b      	lsrs	r3, r3, #8
 8002246:	b29a      	uxth	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	0e1b      	lsrs	r3, r3, #24
 8002250:	b2da      	uxtb	r2, r3
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	705a      	strb	r2, [r3, #1]
 8002256:	e002      	b.n	800225e <prvTraceGetDTS+0x176>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 8002258:	480d      	ldr	r0, [pc, #52]	; (8002290 <prvTraceGetDTS+0x1a8>)
 800225a:	f7ff fe63 	bl	8001f24 <prvTraceError>
			}
			prvTraceUpdateCounters();
 800225e:	f7ff ff1b 	bl	8002098 <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	b29a      	uxth	r2, r3
 8002266:	88fb      	ldrh	r3, [r7, #6]
 8002268:	4013      	ands	r3, r2
 800226a:	b29b      	uxth	r3, r3
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	0800832c 	.word	0x0800832c
 8002278:	20007a98 	.word	0x20007a98
 800227c:	20000054 	.word	0x20000054
 8002280:	e0001004 	.word	0xe0001004
 8002284:	200093a8 	.word	0x200093a8
 8002288:	01312d00 	.word	0x01312d00
 800228c:	2000006c 	.word	0x2000006c
 8002290:	0800836c 	.word	0x0800836c

08002294 <prvTraceInitCortexM>:

/* If using DWT timestamping (default on ARM Cortex-M3, M4 and M7), make sure the DWT unit is initialized. */
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK
#if ((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))
void prvTraceInitCortexM()
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
	/* Ensure that the DWT registers are unlocked and can be modified. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 8002298:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <prvTraceInitCortexM+0x54>)
 800229a:	4a14      	ldr	r2, [pc, #80]	; (80022ec <prvTraceInitCortexM+0x58>)
 800229c:	601a      	str	r2, [r3, #0]

	/* Make sure DWT is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 800229e:	4b14      	ldr	r3, [pc, #80]	; (80022f0 <prvTraceInitCortexM+0x5c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a13      	ldr	r2, [pc, #76]	; (80022f0 <prvTraceInitCortexM+0x5c>)
 80022a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022a8:	6013      	str	r3, [r2, #0]

	do{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 80022aa:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <prvTraceInitCortexM+0x5c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d103      	bne.n	80022ba <prvTraceInitCortexM+0x26>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/
			
			prvTraceError("DWT unit not available, see code comment.");
 80022b2:	4810      	ldr	r0, [pc, #64]	; (80022f4 <prvTraceInitCortexM+0x60>)
 80022b4:	f7ff fe36 	bl	8001f24 <prvTraceError>
			break;
 80022b8:	e013      	b.n	80022e2 <prvTraceInitCortexM+0x4e>
		}

		/* Verify that DWT_CYCCNT is supported */
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 80022ba:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <prvTraceInitCortexM+0x64>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <prvTraceInitCortexM+0x3a>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			prvTraceError("DWT_CYCCNT not available, see code comment.");
 80022c6:	480d      	ldr	r0, [pc, #52]	; (80022fc <prvTraceInitCortexM+0x68>)
 80022c8:	f7ff fe2c 	bl	8001f24 <prvTraceError>
			break;
 80022cc:	e009      	b.n	80022e2 <prvTraceInitCortexM+0x4e>
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 80022ce:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <prvTraceInitCortexM+0x6c>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <prvTraceInitCortexM+0x64>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a07      	ldr	r2, [pc, #28]	; (80022f8 <prvTraceInitCortexM+0x64>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	6013      	str	r3, [r2, #0]

	}while(0);	/* breaks above jump here */
}
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	e0001fb0 	.word	0xe0001fb0
 80022ec:	c5acce55 	.word	0xc5acce55
 80022f0:	e000edfc 	.word	0xe000edfc
 80022f4:	08008558 	.word	0x08008558
 80022f8:	e0001000 	.word	0xe0001000
 80022fc:	08008584 	.word	0x08008584
 8002300:	e0001004 	.word	0xe0001004

08002304 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 8002304:	b480      	push	{r7}
 8002306:	b087      	sub	sp, #28
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
#else /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/
	/* Free running timer */
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	613b      	str	r3, [r7, #16]
	uint32_t diff_scaled = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	60fb      	str	r3, [r7, #12]
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 8002318:	4b1a      	ldr	r3, [pc, #104]	; (8002384 <prvTracePortGetTimeStamp+0x80>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d107      	bne.n	8002330 <prvTracePortGetTimeStamp+0x2c>
	{
		if (pTimestamp)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d028      	beq.n	8002378 <prvTracePortGetTimeStamp+0x74>
			*pTimestamp = last_timestamp;
 8002326:	4b18      	ldr	r3, [pc, #96]	; (8002388 <prvTracePortGetTimeStamp+0x84>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	601a      	str	r2, [r3, #0]
		return;
 800232e:	e023      	b.n	8002378 <prvTracePortGetTimeStamp+0x74>
	}

	/* Retrieve TRC_HWTC_COUNT only once since the same value should be used all throughout this function. */
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
 8002330:	4b16      	ldr	r3, [pc, #88]	; (800238c <prvTracePortGetTimeStamp+0x88>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	617b      	str	r3, [r7, #20]
	/* This part handles free running clocks that can be scaled down to avoid too large DTS values.
	Without this, the scaled timestamp will incorrectly wrap at (2^32 / TRC_HWTC_DIVISOR) ticks.
	The scaled timestamp returned from this function is supposed to go from 0 -> 2^32, which in real time would represent (0 -> 2^32 * TRC_HWTC_DIVISOR) ticks. */
	
	/* First we see how long time has passed since the last timestamp call, and we also add the ticks that was lost when we scaled down the last time. */
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8002336:	4b16      	ldr	r3, [pc, #88]	; (8002390 <prvTracePortGetTimeStamp+0x8c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	1ad2      	subs	r2, r2, r3
 800233e:	4b15      	ldr	r3, [pc, #84]	; (8002394 <prvTracePortGetTimeStamp+0x90>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4413      	add	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
	
	/* Scale down the diff */
	diff_scaled = diff / (TRC_HWTC_DIVISOR);
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	089b      	lsrs	r3, r3, #2
 800234a:	60fb      	str	r3, [r7, #12]
	
	/* Find out how many ticks were lost when scaling down, so we can add them the next time */
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	4a10      	ldr	r2, [pc, #64]	; (8002394 <prvTracePortGetTimeStamp+0x90>)
 8002354:	6013      	str	r3, [r2, #0]

	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
 8002356:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <prvTracePortGetTimeStamp+0x84>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4413      	add	r3, r2
 800235e:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <prvTracePortGetTimeStamp+0x84>)
 8002360:	6013      	str	r3, [r2, #0]
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <prvTracePortGetTimeStamp+0x6c>
		*pTimestamp = last_timestamp;
 8002368:	4b07      	ldr	r3, [pc, #28]	; (8002388 <prvTracePortGetTimeStamp+0x84>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 8002370:	4a07      	ldr	r2, [pc, #28]	; (8002390 <prvTracePortGetTimeStamp+0x8c>)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	e000      	b.n	800237a <prvTracePortGetTimeStamp+0x76>
		return;
 8002378:	bf00      	nop
}
 800237a:	371c      	adds	r7, #28
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	20000044 	.word	0x20000044
 8002388:	20000048 	.word	0x20000048
 800238c:	e0001004 	.word	0xe0001004
 8002390:	20000070 	.word	0x20000070
 8002394:	20000074 	.word	0x20000074

08002398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800239c:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <HAL_Init+0x40>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a0d      	ldr	r2, [pc, #52]	; (80023d8 <HAL_Init+0x40>)
 80023a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_Init+0x40>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <HAL_Init+0x40>)
 80023ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023b4:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <HAL_Init+0x40>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a07      	ldr	r2, [pc, #28]	; (80023d8 <HAL_Init+0x40>)
 80023ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c0:	2003      	movs	r0, #3
 80023c2:	f000 fb5e 	bl	8002a82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023c6:	200f      	movs	r0, #15
 80023c8:	f7fe facc 	bl	8000964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023cc:	f7fe fa38 	bl	8000840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40023c00 	.word	0x40023c00

080023dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_IncTick+0x20>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_IncTick+0x24>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4413      	add	r3, r2
 80023ec:	4a04      	ldr	r2, [pc, #16]	; (8002400 <HAL_IncTick+0x24>)
 80023ee:	6013      	str	r3, [r2, #0]
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	20000014 	.word	0x20000014
 8002400:	2000943c 	.word	0x2000943c

08002404 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return uwTick;
 8002408:	4b03      	ldr	r3, [pc, #12]	; (8002418 <HAL_GetTick+0x14>)
 800240a:	681b      	ldr	r3, [r3, #0]
}
 800240c:	4618      	mov	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	2000943c 	.word	0x2000943c

0800241c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002424:	f7ff ffee 	bl	8002404 <HAL_GetTick>
 8002428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002434:	d005      	beq.n	8002442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <HAL_Delay+0x44>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4413      	add	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002442:	bf00      	nop
 8002444:	f7ff ffde 	bl	8002404 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	429a      	cmp	r2, r3
 8002452:	d8f7      	bhi.n	8002444 <HAL_Delay+0x28>
  {
  }
}
 8002454:	bf00      	nop
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000014 	.word	0x20000014

08002464 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e033      	b.n	80024e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	2b00      	cmp	r3, #0
 8002480:	d109      	bne.n	8002496 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7fe fa04 	bl	8000890 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f003 0310 	and.w	r3, r3, #16
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d118      	bne.n	80024d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024aa:	f023 0302 	bic.w	r3, r3, #2
 80024ae:	f043 0202 	orr.w	r2, r3, #2
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f93a 	bl	8002730 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f023 0303 	bic.w	r3, r3, #3
 80024ca:	f043 0201 	orr.w	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	641a      	str	r2, [r3, #64]	; 0x40
 80024d2:	e001      	b.n	80024d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x1c>
 8002504:	2302      	movs	r3, #2
 8002506:	e105      	b.n	8002714 <HAL_ADC_ConfigChannel+0x228>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b09      	cmp	r3, #9
 8002516:	d925      	bls.n	8002564 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68d9      	ldr	r1, [r3, #12]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	b29b      	uxth	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	4613      	mov	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	4413      	add	r3, r2
 800252c:	3b1e      	subs	r3, #30
 800252e:	2207      	movs	r2, #7
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43da      	mvns	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	400a      	ands	r2, r1
 800253c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68d9      	ldr	r1, [r3, #12]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	b29b      	uxth	r3, r3
 800254e:	4618      	mov	r0, r3
 8002550:	4603      	mov	r3, r0
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4403      	add	r3, r0
 8002556:	3b1e      	subs	r3, #30
 8002558:	409a      	lsls	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	e022      	b.n	80025aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6919      	ldr	r1, [r3, #16]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	b29b      	uxth	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	4613      	mov	r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	4413      	add	r3, r2
 8002578:	2207      	movs	r2, #7
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43da      	mvns	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	400a      	ands	r2, r1
 8002586:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6919      	ldr	r1, [r3, #16]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	b29b      	uxth	r3, r3
 8002598:	4618      	mov	r0, r3
 800259a:	4603      	mov	r3, r0
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4403      	add	r3, r0
 80025a0:	409a      	lsls	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b06      	cmp	r3, #6
 80025b0:	d824      	bhi.n	80025fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	3b05      	subs	r3, #5
 80025c4:	221f      	movs	r2, #31
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43da      	mvns	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	400a      	ands	r2, r1
 80025d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	4618      	mov	r0, r3
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	3b05      	subs	r3, #5
 80025ee:	fa00 f203 	lsl.w	r2, r0, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	635a      	str	r2, [r3, #52]	; 0x34
 80025fa:	e04c      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b0c      	cmp	r3, #12
 8002602:	d824      	bhi.n	800264e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	3b23      	subs	r3, #35	; 0x23
 8002616:	221f      	movs	r2, #31
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43da      	mvns	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	400a      	ands	r2, r1
 8002624:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	b29b      	uxth	r3, r3
 8002632:	4618      	mov	r0, r3
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	3b23      	subs	r3, #35	; 0x23
 8002640:	fa00 f203 	lsl.w	r2, r0, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
 800264c:	e023      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	3b41      	subs	r3, #65	; 0x41
 8002660:	221f      	movs	r2, #31
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43da      	mvns	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	400a      	ands	r2, r1
 800266e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	b29b      	uxth	r3, r3
 800267c:	4618      	mov	r0, r3
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	3b41      	subs	r3, #65	; 0x41
 800268a:	fa00 f203 	lsl.w	r2, r0, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002696:	4b22      	ldr	r3, [pc, #136]	; (8002720 <HAL_ADC_ConfigChannel+0x234>)
 8002698:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a21      	ldr	r2, [pc, #132]	; (8002724 <HAL_ADC_ConfigChannel+0x238>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d109      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x1cc>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b12      	cmp	r3, #18
 80026aa:	d105      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a19      	ldr	r2, [pc, #100]	; (8002724 <HAL_ADC_ConfigChannel+0x238>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d123      	bne.n	800270a <HAL_ADC_ConfigChannel+0x21e>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b10      	cmp	r3, #16
 80026c8:	d003      	beq.n	80026d2 <HAL_ADC_ConfigChannel+0x1e6>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b11      	cmp	r3, #17
 80026d0:	d11b      	bne.n	800270a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b10      	cmp	r3, #16
 80026e4:	d111      	bne.n	800270a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026e6:	4b10      	ldr	r3, [pc, #64]	; (8002728 <HAL_ADC_ConfigChannel+0x23c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a10      	ldr	r2, [pc, #64]	; (800272c <HAL_ADC_ConfigChannel+0x240>)
 80026ec:	fba2 2303 	umull	r2, r3, r2, r3
 80026f0:	0c9a      	lsrs	r2, r3, #18
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80026fc:	e002      	b.n	8002704 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	3b01      	subs	r3, #1
 8002702:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f9      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	40012300 	.word	0x40012300
 8002724:	40012000 	.word	0x40012000
 8002728:	20000000 	.word	0x20000000
 800272c:	431bde83 	.word	0x431bde83

08002730 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002738:	4b79      	ldr	r3, [pc, #484]	; (8002920 <ADC_Init+0x1f0>)
 800273a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	431a      	orrs	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002764:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6859      	ldr	r1, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	021a      	lsls	r2, r3, #8
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002788:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6859      	ldr	r1, [r3, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6899      	ldr	r1, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c2:	4a58      	ldr	r2, [pc, #352]	; (8002924 <ADC_Init+0x1f4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d022      	beq.n	800280e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6899      	ldr	r1, [r3, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6899      	ldr	r1, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	e00f      	b.n	800282e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800281c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800282c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0202 	bic.w	r2, r2, #2
 800283c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6899      	ldr	r1, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7e1b      	ldrb	r3, [r3, #24]
 8002848:	005a      	lsls	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01b      	beq.n	8002894 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800286a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800287a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6859      	ldr	r1, [r3, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	3b01      	subs	r3, #1
 8002888:	035a      	lsls	r2, r3, #13
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	e007      	b.n	80028a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	3b01      	subs	r3, #1
 80028c0:	051a      	lsls	r2, r3, #20
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6899      	ldr	r1, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028e6:	025a      	lsls	r2, r3, #9
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6899      	ldr	r1, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	029a      	lsls	r2, r3, #10
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	609a      	str	r2, [r3, #8]
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	40012300 	.word	0x40012300
 8002924:	0f000001 	.word	0x0f000001

08002928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <__NVIC_SetPriorityGrouping+0x44>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002944:	4013      	ands	r3, r2
 8002946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002950:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800295a:	4a04      	ldr	r2, [pc, #16]	; (800296c <__NVIC_SetPriorityGrouping+0x44>)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	60d3      	str	r3, [r2, #12]
}
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002974:	4b04      	ldr	r3, [pc, #16]	; (8002988 <__NVIC_GetPriorityGrouping+0x18>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	0a1b      	lsrs	r3, r3, #8
 800297a:	f003 0307 	and.w	r3, r3, #7
}
 800297e:	4618      	mov	r0, r3
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	2b00      	cmp	r3, #0
 800299c:	db0b      	blt.n	80029b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	f003 021f 	and.w	r2, r3, #31
 80029a4:	4907      	ldr	r1, [pc, #28]	; (80029c4 <__NVIC_EnableIRQ+0x38>)
 80029a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	2001      	movs	r0, #1
 80029ae:	fa00 f202 	lsl.w	r2, r0, r2
 80029b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	e000e100 	.word	0xe000e100

080029c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	6039      	str	r1, [r7, #0]
 80029d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	db0a      	blt.n	80029f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	490c      	ldr	r1, [pc, #48]	; (8002a14 <__NVIC_SetPriority+0x4c>)
 80029e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e6:	0112      	lsls	r2, r2, #4
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	440b      	add	r3, r1
 80029ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f0:	e00a      	b.n	8002a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	4908      	ldr	r1, [pc, #32]	; (8002a18 <__NVIC_SetPriority+0x50>)
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	3b04      	subs	r3, #4
 8002a00:	0112      	lsls	r2, r2, #4
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	440b      	add	r3, r1
 8002a06:	761a      	strb	r2, [r3, #24]
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	e000e100 	.word	0xe000e100
 8002a18:	e000ed00 	.word	0xe000ed00

08002a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b089      	sub	sp, #36	; 0x24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f1c3 0307 	rsb	r3, r3, #7
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	bf28      	it	cs
 8002a3a:	2304      	movcs	r3, #4
 8002a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	3304      	adds	r3, #4
 8002a42:	2b06      	cmp	r3, #6
 8002a44:	d902      	bls.n	8002a4c <NVIC_EncodePriority+0x30>
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	3b03      	subs	r3, #3
 8002a4a:	e000      	b.n	8002a4e <NVIC_EncodePriority+0x32>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43da      	mvns	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	401a      	ands	r2, r3
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6e:	43d9      	mvns	r1, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a74:	4313      	orrs	r3, r2
         );
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3724      	adds	r7, #36	; 0x24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff ff4c 	bl	8002928 <__NVIC_SetPriorityGrouping>
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aaa:	f7ff ff61 	bl	8002970 <__NVIC_GetPriorityGrouping>
 8002aae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	68b9      	ldr	r1, [r7, #8]
 8002ab4:	6978      	ldr	r0, [r7, #20]
 8002ab6:	f7ff ffb1 	bl	8002a1c <NVIC_EncodePriority>
 8002aba:	4602      	mov	r2, r0
 8002abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff ff80 	bl	80029c8 <__NVIC_SetPriority>
}
 8002ac8:	bf00      	nop
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff ff54 	bl	800298c <__NVIC_EnableIRQ>
}
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b089      	sub	sp, #36	; 0x24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
 8002b06:	e16b      	b.n	8002de0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b08:	2201      	movs	r2, #1
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	f040 815a 	bne.w	8002dda <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d005      	beq.n	8002b3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d130      	bne.n	8002ba0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	2203      	movs	r2, #3
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4013      	ands	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b74:	2201      	movs	r2, #1
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	091b      	lsrs	r3, r3, #4
 8002b8a:	f003 0201 	and.w	r2, r3, #1
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d017      	beq.n	8002bdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 0303 	and.w	r3, r3, #3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d123      	bne.n	8002c30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	08da      	lsrs	r2, r3, #3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3208      	adds	r2, #8
 8002bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	220f      	movs	r2, #15
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	08da      	lsrs	r2, r3, #3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3208      	adds	r2, #8
 8002c2a:	69b9      	ldr	r1, [r7, #24]
 8002c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	2203      	movs	r2, #3
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 0203 	and.w	r2, r3, #3
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 80b4 	beq.w	8002dda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	4b60      	ldr	r3, [pc, #384]	; (8002df8 <HAL_GPIO_Init+0x30c>)
 8002c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7a:	4a5f      	ldr	r2, [pc, #380]	; (8002df8 <HAL_GPIO_Init+0x30c>)
 8002c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c80:	6453      	str	r3, [r2, #68]	; 0x44
 8002c82:	4b5d      	ldr	r3, [pc, #372]	; (8002df8 <HAL_GPIO_Init+0x30c>)
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c8e:	4a5b      	ldr	r2, [pc, #364]	; (8002dfc <HAL_GPIO_Init+0x310>)
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	089b      	lsrs	r3, r3, #2
 8002c94:	3302      	adds	r3, #2
 8002c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	220f      	movs	r2, #15
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a52      	ldr	r2, [pc, #328]	; (8002e00 <HAL_GPIO_Init+0x314>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d02b      	beq.n	8002d12 <HAL_GPIO_Init+0x226>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a51      	ldr	r2, [pc, #324]	; (8002e04 <HAL_GPIO_Init+0x318>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d025      	beq.n	8002d0e <HAL_GPIO_Init+0x222>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a50      	ldr	r2, [pc, #320]	; (8002e08 <HAL_GPIO_Init+0x31c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d01f      	beq.n	8002d0a <HAL_GPIO_Init+0x21e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a4f      	ldr	r2, [pc, #316]	; (8002e0c <HAL_GPIO_Init+0x320>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d019      	beq.n	8002d06 <HAL_GPIO_Init+0x21a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a4e      	ldr	r2, [pc, #312]	; (8002e10 <HAL_GPIO_Init+0x324>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d013      	beq.n	8002d02 <HAL_GPIO_Init+0x216>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a4d      	ldr	r2, [pc, #308]	; (8002e14 <HAL_GPIO_Init+0x328>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00d      	beq.n	8002cfe <HAL_GPIO_Init+0x212>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a4c      	ldr	r2, [pc, #304]	; (8002e18 <HAL_GPIO_Init+0x32c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d007      	beq.n	8002cfa <HAL_GPIO_Init+0x20e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a4b      	ldr	r2, [pc, #300]	; (8002e1c <HAL_GPIO_Init+0x330>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d101      	bne.n	8002cf6 <HAL_GPIO_Init+0x20a>
 8002cf2:	2307      	movs	r3, #7
 8002cf4:	e00e      	b.n	8002d14 <HAL_GPIO_Init+0x228>
 8002cf6:	2308      	movs	r3, #8
 8002cf8:	e00c      	b.n	8002d14 <HAL_GPIO_Init+0x228>
 8002cfa:	2306      	movs	r3, #6
 8002cfc:	e00a      	b.n	8002d14 <HAL_GPIO_Init+0x228>
 8002cfe:	2305      	movs	r3, #5
 8002d00:	e008      	b.n	8002d14 <HAL_GPIO_Init+0x228>
 8002d02:	2304      	movs	r3, #4
 8002d04:	e006      	b.n	8002d14 <HAL_GPIO_Init+0x228>
 8002d06:	2303      	movs	r3, #3
 8002d08:	e004      	b.n	8002d14 <HAL_GPIO_Init+0x228>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e002      	b.n	8002d14 <HAL_GPIO_Init+0x228>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <HAL_GPIO_Init+0x228>
 8002d12:	2300      	movs	r3, #0
 8002d14:	69fa      	ldr	r2, [r7, #28]
 8002d16:	f002 0203 	and.w	r2, r2, #3
 8002d1a:	0092      	lsls	r2, r2, #2
 8002d1c:	4093      	lsls	r3, r2
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d24:	4935      	ldr	r1, [pc, #212]	; (8002dfc <HAL_GPIO_Init+0x310>)
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	089b      	lsrs	r3, r3, #2
 8002d2a:	3302      	adds	r3, #2
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d32:	4b3b      	ldr	r3, [pc, #236]	; (8002e20 <HAL_GPIO_Init+0x334>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d56:	4a32      	ldr	r2, [pc, #200]	; (8002e20 <HAL_GPIO_Init+0x334>)
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d5c:	4b30      	ldr	r3, [pc, #192]	; (8002e20 <HAL_GPIO_Init+0x334>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d80:	4a27      	ldr	r2, [pc, #156]	; (8002e20 <HAL_GPIO_Init+0x334>)
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d86:	4b26      	ldr	r3, [pc, #152]	; (8002e20 <HAL_GPIO_Init+0x334>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4013      	ands	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002daa:	4a1d      	ldr	r2, [pc, #116]	; (8002e20 <HAL_GPIO_Init+0x334>)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002db0:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <HAL_GPIO_Init+0x334>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dd4:	4a12      	ldr	r2, [pc, #72]	; (8002e20 <HAL_GPIO_Init+0x334>)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	61fb      	str	r3, [r7, #28]
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	2b0f      	cmp	r3, #15
 8002de4:	f67f ae90 	bls.w	8002b08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002de8:	bf00      	nop
 8002dea:	bf00      	nop
 8002dec:	3724      	adds	r7, #36	; 0x24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40013800 	.word	0x40013800
 8002e00:	40020000 	.word	0x40020000
 8002e04:	40020400 	.word	0x40020400
 8002e08:	40020800 	.word	0x40020800
 8002e0c:	40020c00 	.word	0x40020c00
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40021400 	.word	0x40021400
 8002e18:	40021800 	.word	0x40021800
 8002e1c:	40021c00 	.word	0x40021c00
 8002e20:	40013c00 	.word	0x40013c00

08002e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	807b      	strh	r3, [r7, #2]
 8002e30:	4613      	mov	r3, r2
 8002e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e34:	787b      	ldrb	r3, [r7, #1]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e3a:	887a      	ldrh	r2, [r7, #2]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e40:	e003      	b.n	8002e4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e42:	887b      	ldrh	r3, [r7, #2]
 8002e44:	041a      	lsls	r2, r3, #16
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	619a      	str	r2, [r3, #24]
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b085      	sub	sp, #20
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e68:	887a      	ldrh	r2, [r7, #2]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	041a      	lsls	r2, r3, #16
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	43d9      	mvns	r1, r3
 8002e74:	887b      	ldrh	r3, [r7, #2]
 8002e76:	400b      	ands	r3, r1
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	619a      	str	r2, [r3, #24]
}
 8002e7e:	bf00      	nop
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e264      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d075      	beq.n	8002f96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eaa:	4ba3      	ldr	r3, [pc, #652]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 030c 	and.w	r3, r3, #12
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d00c      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eb6:	4ba0      	ldr	r3, [pc, #640]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d112      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ec2:	4b9d      	ldr	r3, [pc, #628]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ece:	d10b      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed0:	4b99      	ldr	r3, [pc, #612]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d05b      	beq.n	8002f94 <HAL_RCC_OscConfig+0x108>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d157      	bne.n	8002f94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e23f      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef0:	d106      	bne.n	8002f00 <HAL_RCC_OscConfig+0x74>
 8002ef2:	4b91      	ldr	r3, [pc, #580]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a90      	ldr	r2, [pc, #576]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	e01d      	b.n	8002f3c <HAL_RCC_OscConfig+0xb0>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f08:	d10c      	bne.n	8002f24 <HAL_RCC_OscConfig+0x98>
 8002f0a:	4b8b      	ldr	r3, [pc, #556]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a8a      	ldr	r2, [pc, #552]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	4b88      	ldr	r3, [pc, #544]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a87      	ldr	r2, [pc, #540]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	e00b      	b.n	8002f3c <HAL_RCC_OscConfig+0xb0>
 8002f24:	4b84      	ldr	r3, [pc, #528]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a83      	ldr	r2, [pc, #524]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	4b81      	ldr	r3, [pc, #516]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a80      	ldr	r2, [pc, #512]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d013      	beq.n	8002f6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f44:	f7ff fa5e 	bl	8002404 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f4c:	f7ff fa5a 	bl	8002404 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b64      	cmp	r3, #100	; 0x64
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e204      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5e:	4b76      	ldr	r3, [pc, #472]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0f0      	beq.n	8002f4c <HAL_RCC_OscConfig+0xc0>
 8002f6a:	e014      	b.n	8002f96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6c:	f7ff fa4a 	bl	8002404 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f74:	f7ff fa46 	bl	8002404 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	; 0x64
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e1f0      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f86:	4b6c      	ldr	r3, [pc, #432]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0xe8>
 8002f92:	e000      	b.n	8002f96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d063      	beq.n	800306a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fa2:	4b65      	ldr	r3, [pc, #404]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00b      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fae:	4b62      	ldr	r3, [pc, #392]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d11c      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fba:	4b5f      	ldr	r3, [pc, #380]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d116      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc6:	4b5c      	ldr	r3, [pc, #368]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d005      	beq.n	8002fde <HAL_RCC_OscConfig+0x152>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d001      	beq.n	8002fde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e1c4      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fde:	4b56      	ldr	r3, [pc, #344]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	4952      	ldr	r1, [pc, #328]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff2:	e03a      	b.n	800306a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d020      	beq.n	800303e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ffc:	4b4f      	ldr	r3, [pc, #316]	; (800313c <HAL_RCC_OscConfig+0x2b0>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003002:	f7ff f9ff 	bl	8002404 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800300a:	f7ff f9fb 	bl	8002404 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e1a5      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301c:	4b46      	ldr	r3, [pc, #280]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0f0      	beq.n	800300a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003028:	4b43      	ldr	r3, [pc, #268]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	4940      	ldr	r1, [pc, #256]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8003038:	4313      	orrs	r3, r2
 800303a:	600b      	str	r3, [r1, #0]
 800303c:	e015      	b.n	800306a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800303e:	4b3f      	ldr	r3, [pc, #252]	; (800313c <HAL_RCC_OscConfig+0x2b0>)
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7ff f9de 	bl	8002404 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800304c:	f7ff f9da 	bl	8002404 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e184      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800305e:	4b36      	ldr	r3, [pc, #216]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d030      	beq.n	80030d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d016      	beq.n	80030ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800307e:	4b30      	ldr	r3, [pc, #192]	; (8003140 <HAL_RCC_OscConfig+0x2b4>)
 8003080:	2201      	movs	r2, #1
 8003082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003084:	f7ff f9be 	bl	8002404 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800308c:	f7ff f9ba 	bl	8002404 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e164      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800309e:	4b26      	ldr	r3, [pc, #152]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0f0      	beq.n	800308c <HAL_RCC_OscConfig+0x200>
 80030aa:	e015      	b.n	80030d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ac:	4b24      	ldr	r3, [pc, #144]	; (8003140 <HAL_RCC_OscConfig+0x2b4>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b2:	f7ff f9a7 	bl	8002404 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ba:	f7ff f9a3 	bl	8002404 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e14d      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030cc:	4b1a      	ldr	r3, [pc, #104]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 80030ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1f0      	bne.n	80030ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 80a0 	beq.w	8003226 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e6:	2300      	movs	r3, #0
 80030e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ea:	4b13      	ldr	r3, [pc, #76]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10f      	bne.n	8003116 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	4b0f      	ldr	r3, [pc, #60]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	4a0e      	ldr	r2, [pc, #56]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8003100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003104:	6413      	str	r3, [r2, #64]	; 0x40
 8003106:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <HAL_RCC_OscConfig+0x2ac>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003112:	2301      	movs	r3, #1
 8003114:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003116:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <HAL_RCC_OscConfig+0x2b8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311e:	2b00      	cmp	r3, #0
 8003120:	d121      	bne.n	8003166 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003122:	4b08      	ldr	r3, [pc, #32]	; (8003144 <HAL_RCC_OscConfig+0x2b8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a07      	ldr	r2, [pc, #28]	; (8003144 <HAL_RCC_OscConfig+0x2b8>)
 8003128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800312e:	f7ff f969 	bl	8002404 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003134:	e011      	b.n	800315a <HAL_RCC_OscConfig+0x2ce>
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800
 800313c:	42470000 	.word	0x42470000
 8003140:	42470e80 	.word	0x42470e80
 8003144:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003148:	f7ff f95c 	bl	8002404 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e106      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315a:	4b85      	ldr	r3, [pc, #532]	; (8003370 <HAL_RCC_OscConfig+0x4e4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d106      	bne.n	800317c <HAL_RCC_OscConfig+0x2f0>
 800316e:	4b81      	ldr	r3, [pc, #516]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003172:	4a80      	ldr	r2, [pc, #512]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	6713      	str	r3, [r2, #112]	; 0x70
 800317a:	e01c      	b.n	80031b6 <HAL_RCC_OscConfig+0x32a>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b05      	cmp	r3, #5
 8003182:	d10c      	bne.n	800319e <HAL_RCC_OscConfig+0x312>
 8003184:	4b7b      	ldr	r3, [pc, #492]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 8003186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003188:	4a7a      	ldr	r2, [pc, #488]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 800318a:	f043 0304 	orr.w	r3, r3, #4
 800318e:	6713      	str	r3, [r2, #112]	; 0x70
 8003190:	4b78      	ldr	r3, [pc, #480]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 8003192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003194:	4a77      	ldr	r2, [pc, #476]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 8003196:	f043 0301 	orr.w	r3, r3, #1
 800319a:	6713      	str	r3, [r2, #112]	; 0x70
 800319c:	e00b      	b.n	80031b6 <HAL_RCC_OscConfig+0x32a>
 800319e:	4b75      	ldr	r3, [pc, #468]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	4a74      	ldr	r2, [pc, #464]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 80031a4:	f023 0301 	bic.w	r3, r3, #1
 80031a8:	6713      	str	r3, [r2, #112]	; 0x70
 80031aa:	4b72      	ldr	r3, [pc, #456]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ae:	4a71      	ldr	r2, [pc, #452]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 80031b0:	f023 0304 	bic.w	r3, r3, #4
 80031b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d015      	beq.n	80031ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031be:	f7ff f921 	bl	8002404 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c4:	e00a      	b.n	80031dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c6:	f7ff f91d 	bl	8002404 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e0c5      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031dc:	4b65      	ldr	r3, [pc, #404]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 80031de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0ee      	beq.n	80031c6 <HAL_RCC_OscConfig+0x33a>
 80031e8:	e014      	b.n	8003214 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ea:	f7ff f90b 	bl	8002404 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f0:	e00a      	b.n	8003208 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031f2:	f7ff f907 	bl	8002404 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003200:	4293      	cmp	r3, r2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e0af      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003208:	4b5a      	ldr	r3, [pc, #360]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 800320a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1ee      	bne.n	80031f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003214:	7dfb      	ldrb	r3, [r7, #23]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d105      	bne.n	8003226 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800321a:	4b56      	ldr	r3, [pc, #344]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	4a55      	ldr	r2, [pc, #340]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 8003220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003224:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 809b 	beq.w	8003366 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003230:	4b50      	ldr	r3, [pc, #320]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 030c 	and.w	r3, r3, #12
 8003238:	2b08      	cmp	r3, #8
 800323a:	d05c      	beq.n	80032f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d141      	bne.n	80032c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003244:	4b4c      	ldr	r3, [pc, #304]	; (8003378 <HAL_RCC_OscConfig+0x4ec>)
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324a:	f7ff f8db 	bl	8002404 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003252:	f7ff f8d7 	bl	8002404 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e081      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003264:	4b43      	ldr	r3, [pc, #268]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1f0      	bne.n	8003252 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69da      	ldr	r2, [r3, #28]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	019b      	lsls	r3, r3, #6
 8003280:	431a      	orrs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003286:	085b      	lsrs	r3, r3, #1
 8003288:	3b01      	subs	r3, #1
 800328a:	041b      	lsls	r3, r3, #16
 800328c:	431a      	orrs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003292:	061b      	lsls	r3, r3, #24
 8003294:	4937      	ldr	r1, [pc, #220]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 8003296:	4313      	orrs	r3, r2
 8003298:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800329a:	4b37      	ldr	r3, [pc, #220]	; (8003378 <HAL_RCC_OscConfig+0x4ec>)
 800329c:	2201      	movs	r2, #1
 800329e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a0:	f7ff f8b0 	bl	8002404 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a8:	f7ff f8ac 	bl	8002404 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e056      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ba:	4b2e      	ldr	r3, [pc, #184]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0f0      	beq.n	80032a8 <HAL_RCC_OscConfig+0x41c>
 80032c6:	e04e      	b.n	8003366 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c8:	4b2b      	ldr	r3, [pc, #172]	; (8003378 <HAL_RCC_OscConfig+0x4ec>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ce:	f7ff f899 	bl	8002404 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d6:	f7ff f895 	bl	8002404 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e03f      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e8:	4b22      	ldr	r3, [pc, #136]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f0      	bne.n	80032d6 <HAL_RCC_OscConfig+0x44a>
 80032f4:	e037      	b.n	8003366 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e032      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003302:	4b1c      	ldr	r3, [pc, #112]	; (8003374 <HAL_RCC_OscConfig+0x4e8>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d028      	beq.n	8003362 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800331a:	429a      	cmp	r2, r3
 800331c:	d121      	bne.n	8003362 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003328:	429a      	cmp	r2, r3
 800332a:	d11a      	bne.n	8003362 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003332:	4013      	ands	r3, r2
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003338:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800333a:	4293      	cmp	r3, r2
 800333c:	d111      	bne.n	8003362 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	085b      	lsrs	r3, r3, #1
 800334a:	3b01      	subs	r3, #1
 800334c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800334e:	429a      	cmp	r2, r3
 8003350:	d107      	bne.n	8003362 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800335e:	429a      	cmp	r2, r3
 8003360:	d001      	beq.n	8003366 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40007000 	.word	0x40007000
 8003374:	40023800 	.word	0x40023800
 8003378:	42470060 	.word	0x42470060

0800337c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0cc      	b.n	800352a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003390:	4b68      	ldr	r3, [pc, #416]	; (8003534 <HAL_RCC_ClockConfig+0x1b8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d90c      	bls.n	80033b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339e:	4b65      	ldr	r3, [pc, #404]	; (8003534 <HAL_RCC_ClockConfig+0x1b8>)
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a6:	4b63      	ldr	r3, [pc, #396]	; (8003534 <HAL_RCC_ClockConfig+0x1b8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d001      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0b8      	b.n	800352a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d020      	beq.n	8003406 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d005      	beq.n	80033dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033d0:	4b59      	ldr	r3, [pc, #356]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	4a58      	ldr	r2, [pc, #352]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d005      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033e8:	4b53      	ldr	r3, [pc, #332]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	4a52      	ldr	r2, [pc, #328]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f4:	4b50      	ldr	r3, [pc, #320]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	494d      	ldr	r1, [pc, #308]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	4313      	orrs	r3, r2
 8003404:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d044      	beq.n	800349c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d107      	bne.n	800342a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341a:	4b47      	ldr	r3, [pc, #284]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d119      	bne.n	800345a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e07f      	b.n	800352a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d003      	beq.n	800343a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003436:	2b03      	cmp	r3, #3
 8003438:	d107      	bne.n	800344a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343a:	4b3f      	ldr	r3, [pc, #252]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d109      	bne.n	800345a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e06f      	b.n	800352a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344a:	4b3b      	ldr	r3, [pc, #236]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e067      	b.n	800352a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800345a:	4b37      	ldr	r3, [pc, #220]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f023 0203 	bic.w	r2, r3, #3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	4934      	ldr	r1, [pc, #208]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 8003468:	4313      	orrs	r3, r2
 800346a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800346c:	f7fe ffca 	bl	8002404 <HAL_GetTick>
 8003470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003472:	e00a      	b.n	800348a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003474:	f7fe ffc6 	bl	8002404 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003482:	4293      	cmp	r3, r2
 8003484:	d901      	bls.n	800348a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e04f      	b.n	800352a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348a:	4b2b      	ldr	r3, [pc, #172]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 020c 	and.w	r2, r3, #12
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	429a      	cmp	r2, r3
 800349a:	d1eb      	bne.n	8003474 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800349c:	4b25      	ldr	r3, [pc, #148]	; (8003534 <HAL_RCC_ClockConfig+0x1b8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d20c      	bcs.n	80034c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034aa:	4b22      	ldr	r3, [pc, #136]	; (8003534 <HAL_RCC_ClockConfig+0x1b8>)
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b2:	4b20      	ldr	r3, [pc, #128]	; (8003534 <HAL_RCC_ClockConfig+0x1b8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d001      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e032      	b.n	800352a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d0:	4b19      	ldr	r3, [pc, #100]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4916      	ldr	r1, [pc, #88]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d009      	beq.n	8003502 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ee:	4b12      	ldr	r3, [pc, #72]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	490e      	ldr	r1, [pc, #56]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003502:	f000 f821 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 8003506:	4602      	mov	r2, r0
 8003508:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	091b      	lsrs	r3, r3, #4
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	490a      	ldr	r1, [pc, #40]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 8003514:	5ccb      	ldrb	r3, [r1, r3]
 8003516:	fa22 f303 	lsr.w	r3, r2, r3
 800351a:	4a09      	ldr	r2, [pc, #36]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 800351c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800351e:	4b09      	ldr	r3, [pc, #36]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7fd fa1e 	bl	8000964 <HAL_InitTick>

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40023c00 	.word	0x40023c00
 8003538:	40023800 	.word	0x40023800
 800353c:	080085c0 	.word	0x080085c0
 8003540:	20000000 	.word	0x20000000
 8003544:	20000010 	.word	0x20000010

08003548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003548:	b5b0      	push	{r4, r5, r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800354e:	2100      	movs	r1, #0
 8003550:	6079      	str	r1, [r7, #4]
 8003552:	2100      	movs	r1, #0
 8003554:	60f9      	str	r1, [r7, #12]
 8003556:	2100      	movs	r1, #0
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800355a:	2100      	movs	r1, #0
 800355c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800355e:	4952      	ldr	r1, [pc, #328]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003560:	6889      	ldr	r1, [r1, #8]
 8003562:	f001 010c 	and.w	r1, r1, #12
 8003566:	2908      	cmp	r1, #8
 8003568:	d00d      	beq.n	8003586 <HAL_RCC_GetSysClockFreq+0x3e>
 800356a:	2908      	cmp	r1, #8
 800356c:	f200 8094 	bhi.w	8003698 <HAL_RCC_GetSysClockFreq+0x150>
 8003570:	2900      	cmp	r1, #0
 8003572:	d002      	beq.n	800357a <HAL_RCC_GetSysClockFreq+0x32>
 8003574:	2904      	cmp	r1, #4
 8003576:	d003      	beq.n	8003580 <HAL_RCC_GetSysClockFreq+0x38>
 8003578:	e08e      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800357a:	4b4c      	ldr	r3, [pc, #304]	; (80036ac <HAL_RCC_GetSysClockFreq+0x164>)
 800357c:	60bb      	str	r3, [r7, #8]
       break;
 800357e:	e08e      	b.n	800369e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003580:	4b4b      	ldr	r3, [pc, #300]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003582:	60bb      	str	r3, [r7, #8]
      break;
 8003584:	e08b      	b.n	800369e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003586:	4948      	ldr	r1, [pc, #288]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003588:	6849      	ldr	r1, [r1, #4]
 800358a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800358e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003590:	4945      	ldr	r1, [pc, #276]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003592:	6849      	ldr	r1, [r1, #4]
 8003594:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003598:	2900      	cmp	r1, #0
 800359a:	d024      	beq.n	80035e6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800359c:	4942      	ldr	r1, [pc, #264]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800359e:	6849      	ldr	r1, [r1, #4]
 80035a0:	0989      	lsrs	r1, r1, #6
 80035a2:	4608      	mov	r0, r1
 80035a4:	f04f 0100 	mov.w	r1, #0
 80035a8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80035ac:	f04f 0500 	mov.w	r5, #0
 80035b0:	ea00 0204 	and.w	r2, r0, r4
 80035b4:	ea01 0305 	and.w	r3, r1, r5
 80035b8:	493d      	ldr	r1, [pc, #244]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80035ba:	fb01 f003 	mul.w	r0, r1, r3
 80035be:	2100      	movs	r1, #0
 80035c0:	fb01 f102 	mul.w	r1, r1, r2
 80035c4:	1844      	adds	r4, r0, r1
 80035c6:	493a      	ldr	r1, [pc, #232]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80035c8:	fba2 0101 	umull	r0, r1, r2, r1
 80035cc:	1863      	adds	r3, r4, r1
 80035ce:	4619      	mov	r1, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	461a      	mov	r2, r3
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	f7fc fdfa 	bl	80001d0 <__aeabi_uldivmod>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4613      	mov	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	e04a      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035e6:	4b30      	ldr	r3, [pc, #192]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	099b      	lsrs	r3, r3, #6
 80035ec:	461a      	mov	r2, r3
 80035ee:	f04f 0300 	mov.w	r3, #0
 80035f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035f6:	f04f 0100 	mov.w	r1, #0
 80035fa:	ea02 0400 	and.w	r4, r2, r0
 80035fe:	ea03 0501 	and.w	r5, r3, r1
 8003602:	4620      	mov	r0, r4
 8003604:	4629      	mov	r1, r5
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	f04f 0300 	mov.w	r3, #0
 800360e:	014b      	lsls	r3, r1, #5
 8003610:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003614:	0142      	lsls	r2, r0, #5
 8003616:	4610      	mov	r0, r2
 8003618:	4619      	mov	r1, r3
 800361a:	1b00      	subs	r0, r0, r4
 800361c:	eb61 0105 	sbc.w	r1, r1, r5
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	018b      	lsls	r3, r1, #6
 800362a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800362e:	0182      	lsls	r2, r0, #6
 8003630:	1a12      	subs	r2, r2, r0
 8003632:	eb63 0301 	sbc.w	r3, r3, r1
 8003636:	f04f 0000 	mov.w	r0, #0
 800363a:	f04f 0100 	mov.w	r1, #0
 800363e:	00d9      	lsls	r1, r3, #3
 8003640:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003644:	00d0      	lsls	r0, r2, #3
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	1912      	adds	r2, r2, r4
 800364c:	eb45 0303 	adc.w	r3, r5, r3
 8003650:	f04f 0000 	mov.w	r0, #0
 8003654:	f04f 0100 	mov.w	r1, #0
 8003658:	0299      	lsls	r1, r3, #10
 800365a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800365e:	0290      	lsls	r0, r2, #10
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4610      	mov	r0, r2
 8003666:	4619      	mov	r1, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	461a      	mov	r2, r3
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	f7fc fdae 	bl	80001d0 <__aeabi_uldivmod>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4613      	mov	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800367c:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	0c1b      	lsrs	r3, r3, #16
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	3301      	adds	r3, #1
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	fbb2 f3f3 	udiv	r3, r2, r3
 8003694:	60bb      	str	r3, [r7, #8]
      break;
 8003696:	e002      	b.n	800369e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003698:	4b04      	ldr	r3, [pc, #16]	; (80036ac <HAL_RCC_GetSysClockFreq+0x164>)
 800369a:	60bb      	str	r3, [r7, #8]
      break;
 800369c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800369e:	68bb      	ldr	r3, [r7, #8]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bdb0      	pop	{r4, r5, r7, pc}
 80036a8:	40023800 	.word	0x40023800
 80036ac:	00f42400 	.word	0x00f42400
 80036b0:	017d7840 	.word	0x017d7840

080036b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036b8:	4b03      	ldr	r3, [pc, #12]	; (80036c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036ba:	681b      	ldr	r3, [r3, #0]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	20000000 	.word	0x20000000

080036cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036d0:	f7ff fff0 	bl	80036b4 <HAL_RCC_GetHCLKFreq>
 80036d4:	4602      	mov	r2, r0
 80036d6:	4b05      	ldr	r3, [pc, #20]	; (80036ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	0a9b      	lsrs	r3, r3, #10
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	4903      	ldr	r1, [pc, #12]	; (80036f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036e2:	5ccb      	ldrb	r3, [r1, r3]
 80036e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40023800 	.word	0x40023800
 80036f0:	080085d0 	.word	0x080085d0

080036f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036f8:	f7ff ffdc 	bl	80036b4 <HAL_RCC_GetHCLKFreq>
 80036fc:	4602      	mov	r2, r0
 80036fe:	4b05      	ldr	r3, [pc, #20]	; (8003714 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	0b5b      	lsrs	r3, r3, #13
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	4903      	ldr	r1, [pc, #12]	; (8003718 <HAL_RCC_GetPCLK2Freq+0x24>)
 800370a:	5ccb      	ldrb	r3, [r1, r3]
 800370c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003710:	4618      	mov	r0, r3
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40023800 	.word	0x40023800
 8003718:	080085d0 	.word	0x080085d0

0800371c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	220f      	movs	r2, #15
 800372a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800372c:	4b12      	ldr	r3, [pc, #72]	; (8003778 <HAL_RCC_GetClockConfig+0x5c>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 0203 	and.w	r2, r3, #3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003738:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <HAL_RCC_GetClockConfig+0x5c>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003744:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <HAL_RCC_GetClockConfig+0x5c>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003750:	4b09      	ldr	r3, [pc, #36]	; (8003778 <HAL_RCC_GetClockConfig+0x5c>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	08db      	lsrs	r3, r3, #3
 8003756:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800375e:	4b07      	ldr	r3, [pc, #28]	; (800377c <HAL_RCC_GetClockConfig+0x60>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0207 	and.w	r2, r3, #7
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	601a      	str	r2, [r3, #0]
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40023800 	.word	0x40023800
 800377c:	40023c00 	.word	0x40023c00

08003780 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e041      	b.n	8003816 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d106      	bne.n	80037ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f839 	bl	800381e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3304      	adds	r3, #4
 80037bc:	4619      	mov	r1, r3
 80037be:	4610      	mov	r0, r2
 80037c0:	f000 f9d8 	bl	8003b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
	...

08003834 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b01      	cmp	r3, #1
 8003846:	d001      	beq.n	800384c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e04e      	b.n	80038ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0201 	orr.w	r2, r2, #1
 8003862:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a23      	ldr	r2, [pc, #140]	; (80038f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d022      	beq.n	80038b4 <HAL_TIM_Base_Start_IT+0x80>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003876:	d01d      	beq.n	80038b4 <HAL_TIM_Base_Start_IT+0x80>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a1f      	ldr	r2, [pc, #124]	; (80038fc <HAL_TIM_Base_Start_IT+0xc8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d018      	beq.n	80038b4 <HAL_TIM_Base_Start_IT+0x80>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a1e      	ldr	r2, [pc, #120]	; (8003900 <HAL_TIM_Base_Start_IT+0xcc>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d013      	beq.n	80038b4 <HAL_TIM_Base_Start_IT+0x80>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a1c      	ldr	r2, [pc, #112]	; (8003904 <HAL_TIM_Base_Start_IT+0xd0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d00e      	beq.n	80038b4 <HAL_TIM_Base_Start_IT+0x80>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a1b      	ldr	r2, [pc, #108]	; (8003908 <HAL_TIM_Base_Start_IT+0xd4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d009      	beq.n	80038b4 <HAL_TIM_Base_Start_IT+0x80>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a19      	ldr	r2, [pc, #100]	; (800390c <HAL_TIM_Base_Start_IT+0xd8>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d004      	beq.n	80038b4 <HAL_TIM_Base_Start_IT+0x80>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a18      	ldr	r2, [pc, #96]	; (8003910 <HAL_TIM_Base_Start_IT+0xdc>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d111      	bne.n	80038d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b06      	cmp	r3, #6
 80038c4:	d010      	beq.n	80038e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0201 	orr.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d6:	e007      	b.n	80038e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0201 	orr.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40010000 	.word	0x40010000
 80038fc:	40000400 	.word	0x40000400
 8003900:	40000800 	.word	0x40000800
 8003904:	40000c00 	.word	0x40000c00
 8003908:	40010400 	.word	0x40010400
 800390c:	40014000 	.word	0x40014000
 8003910:	40001800 	.word	0x40001800

08003914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b02      	cmp	r3, #2
 8003928:	d122      	bne.n	8003970 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b02      	cmp	r3, #2
 8003936:	d11b      	bne.n	8003970 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f06f 0202 	mvn.w	r2, #2
 8003940:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f8ee 	bl	8003b38 <HAL_TIM_IC_CaptureCallback>
 800395c:	e005      	b.n	800396a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f8e0 	bl	8003b24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f8f1 	bl	8003b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	f003 0304 	and.w	r3, r3, #4
 800397a:	2b04      	cmp	r3, #4
 800397c:	d122      	bne.n	80039c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b04      	cmp	r3, #4
 800398a:	d11b      	bne.n	80039c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0204 	mvn.w	r2, #4
 8003994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2202      	movs	r2, #2
 800399a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f8c4 	bl	8003b38 <HAL_TIM_IC_CaptureCallback>
 80039b0:	e005      	b.n	80039be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f8b6 	bl	8003b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f8c7 	bl	8003b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d122      	bne.n	8003a18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d11b      	bne.n	8003a18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f06f 0208 	mvn.w	r2, #8
 80039e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2204      	movs	r2, #4
 80039ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f89a 	bl	8003b38 <HAL_TIM_IC_CaptureCallback>
 8003a04:	e005      	b.n	8003a12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f88c 	bl	8003b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f89d 	bl	8003b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	f003 0310 	and.w	r3, r3, #16
 8003a22:	2b10      	cmp	r3, #16
 8003a24:	d122      	bne.n	8003a6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f003 0310 	and.w	r3, r3, #16
 8003a30:	2b10      	cmp	r3, #16
 8003a32:	d11b      	bne.n	8003a6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f06f 0210 	mvn.w	r2, #16
 8003a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2208      	movs	r2, #8
 8003a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f870 	bl	8003b38 <HAL_TIM_IC_CaptureCallback>
 8003a58:	e005      	b.n	8003a66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f862 	bl	8003b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f873 	bl	8003b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d10e      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d107      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0201 	mvn.w	r2, #1
 8003a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fc febc 	bl	8000810 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa2:	2b80      	cmp	r3, #128	; 0x80
 8003aa4:	d10e      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab0:	2b80      	cmp	r3, #128	; 0x80
 8003ab2:	d107      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f902 	bl	8003cc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ace:	2b40      	cmp	r3, #64	; 0x40
 8003ad0:	d10e      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003adc:	2b40      	cmp	r3, #64	; 0x40
 8003ade:	d107      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f838 	bl	8003b60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f003 0320 	and.w	r3, r3, #32
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	d10e      	bne.n	8003b1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d107      	bne.n	8003b1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0220 	mvn.w	r2, #32
 8003b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f8cc 	bl	8003cb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b1c:	bf00      	nop
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a40      	ldr	r2, [pc, #256]	; (8003c88 <TIM_Base_SetConfig+0x114>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d013      	beq.n	8003bb4 <TIM_Base_SetConfig+0x40>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b92:	d00f      	beq.n	8003bb4 <TIM_Base_SetConfig+0x40>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a3d      	ldr	r2, [pc, #244]	; (8003c8c <TIM_Base_SetConfig+0x118>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d00b      	beq.n	8003bb4 <TIM_Base_SetConfig+0x40>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a3c      	ldr	r2, [pc, #240]	; (8003c90 <TIM_Base_SetConfig+0x11c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d007      	beq.n	8003bb4 <TIM_Base_SetConfig+0x40>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a3b      	ldr	r2, [pc, #236]	; (8003c94 <TIM_Base_SetConfig+0x120>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d003      	beq.n	8003bb4 <TIM_Base_SetConfig+0x40>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a3a      	ldr	r2, [pc, #232]	; (8003c98 <TIM_Base_SetConfig+0x124>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d108      	bne.n	8003bc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a2f      	ldr	r2, [pc, #188]	; (8003c88 <TIM_Base_SetConfig+0x114>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d02b      	beq.n	8003c26 <TIM_Base_SetConfig+0xb2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd4:	d027      	beq.n	8003c26 <TIM_Base_SetConfig+0xb2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a2c      	ldr	r2, [pc, #176]	; (8003c8c <TIM_Base_SetConfig+0x118>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d023      	beq.n	8003c26 <TIM_Base_SetConfig+0xb2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a2b      	ldr	r2, [pc, #172]	; (8003c90 <TIM_Base_SetConfig+0x11c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d01f      	beq.n	8003c26 <TIM_Base_SetConfig+0xb2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a2a      	ldr	r2, [pc, #168]	; (8003c94 <TIM_Base_SetConfig+0x120>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d01b      	beq.n	8003c26 <TIM_Base_SetConfig+0xb2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a29      	ldr	r2, [pc, #164]	; (8003c98 <TIM_Base_SetConfig+0x124>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d017      	beq.n	8003c26 <TIM_Base_SetConfig+0xb2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a28      	ldr	r2, [pc, #160]	; (8003c9c <TIM_Base_SetConfig+0x128>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d013      	beq.n	8003c26 <TIM_Base_SetConfig+0xb2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a27      	ldr	r2, [pc, #156]	; (8003ca0 <TIM_Base_SetConfig+0x12c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00f      	beq.n	8003c26 <TIM_Base_SetConfig+0xb2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a26      	ldr	r2, [pc, #152]	; (8003ca4 <TIM_Base_SetConfig+0x130>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00b      	beq.n	8003c26 <TIM_Base_SetConfig+0xb2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a25      	ldr	r2, [pc, #148]	; (8003ca8 <TIM_Base_SetConfig+0x134>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d007      	beq.n	8003c26 <TIM_Base_SetConfig+0xb2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a24      	ldr	r2, [pc, #144]	; (8003cac <TIM_Base_SetConfig+0x138>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d003      	beq.n	8003c26 <TIM_Base_SetConfig+0xb2>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a23      	ldr	r2, [pc, #140]	; (8003cb0 <TIM_Base_SetConfig+0x13c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d108      	bne.n	8003c38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a0a      	ldr	r2, [pc, #40]	; (8003c88 <TIM_Base_SetConfig+0x114>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d003      	beq.n	8003c6c <TIM_Base_SetConfig+0xf8>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a0c      	ldr	r2, [pc, #48]	; (8003c98 <TIM_Base_SetConfig+0x124>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d103      	bne.n	8003c74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	615a      	str	r2, [r3, #20]
}
 8003c7a:	bf00      	nop
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40010000 	.word	0x40010000
 8003c8c:	40000400 	.word	0x40000400
 8003c90:	40000800 	.word	0x40000800
 8003c94:	40000c00 	.word	0x40000c00
 8003c98:	40010400 	.word	0x40010400
 8003c9c:	40014000 	.word	0x40014000
 8003ca0:	40014400 	.word	0x40014400
 8003ca4:	40014800 	.word	0x40014800
 8003ca8:	40001800 	.word	0x40001800
 8003cac:	40001c00 	.word	0x40001c00
 8003cb0:	40002000 	.word	0x40002000

08003cb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e03f      	b.n	8003d6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7fc fde6 	bl	80008d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2224      	movs	r2, #36	; 0x24
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f829 	bl	8003d78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695a      	ldr	r2, [r3, #20]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68da      	ldr	r2, [r3, #12]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d7c:	b09f      	sub	sp, #124	; 0x7c
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8e:	68d9      	ldr	r1, [r3, #12]
 8003d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	ea40 0301 	orr.w	r3, r0, r1
 8003d98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	431a      	orrs	r2, r3
 8003da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	431a      	orrs	r2, r3
 8003daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003dbc:	f021 010c 	bic.w	r1, r1, #12
 8003dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dc6:	430b      	orrs	r3, r1
 8003dc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd6:	6999      	ldr	r1, [r3, #24]
 8003dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	ea40 0301 	orr.w	r3, r0, r1
 8003de0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	4bc5      	ldr	r3, [pc, #788]	; (80040fc <UART_SetConfig+0x384>)
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d004      	beq.n	8003df6 <UART_SetConfig+0x7e>
 8003dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	4bc3      	ldr	r3, [pc, #780]	; (8004100 <UART_SetConfig+0x388>)
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d103      	bne.n	8003dfe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003df6:	f7ff fc7d 	bl	80036f4 <HAL_RCC_GetPCLK2Freq>
 8003dfa:	6778      	str	r0, [r7, #116]	; 0x74
 8003dfc:	e002      	b.n	8003e04 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dfe:	f7ff fc65 	bl	80036cc <HAL_RCC_GetPCLK1Freq>
 8003e02:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e0c:	f040 80b6 	bne.w	8003f7c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e12:	461c      	mov	r4, r3
 8003e14:	f04f 0500 	mov.w	r5, #0
 8003e18:	4622      	mov	r2, r4
 8003e1a:	462b      	mov	r3, r5
 8003e1c:	1891      	adds	r1, r2, r2
 8003e1e:	6439      	str	r1, [r7, #64]	; 0x40
 8003e20:	415b      	adcs	r3, r3
 8003e22:	647b      	str	r3, [r7, #68]	; 0x44
 8003e24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e28:	1912      	adds	r2, r2, r4
 8003e2a:	eb45 0303 	adc.w	r3, r5, r3
 8003e2e:	f04f 0000 	mov.w	r0, #0
 8003e32:	f04f 0100 	mov.w	r1, #0
 8003e36:	00d9      	lsls	r1, r3, #3
 8003e38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e3c:	00d0      	lsls	r0, r2, #3
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	1911      	adds	r1, r2, r4
 8003e44:	6639      	str	r1, [r7, #96]	; 0x60
 8003e46:	416b      	adcs	r3, r5
 8003e48:	667b      	str	r3, [r7, #100]	; 0x64
 8003e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f04f 0300 	mov.w	r3, #0
 8003e54:	1891      	adds	r1, r2, r2
 8003e56:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e58:	415b      	adcs	r3, r3
 8003e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e60:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003e64:	f7fc f9b4 	bl	80001d0 <__aeabi_uldivmod>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4ba5      	ldr	r3, [pc, #660]	; (8004104 <UART_SetConfig+0x38c>)
 8003e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e72:	095b      	lsrs	r3, r3, #5
 8003e74:	011e      	lsls	r6, r3, #4
 8003e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e78:	461c      	mov	r4, r3
 8003e7a:	f04f 0500 	mov.w	r5, #0
 8003e7e:	4622      	mov	r2, r4
 8003e80:	462b      	mov	r3, r5
 8003e82:	1891      	adds	r1, r2, r2
 8003e84:	6339      	str	r1, [r7, #48]	; 0x30
 8003e86:	415b      	adcs	r3, r3
 8003e88:	637b      	str	r3, [r7, #52]	; 0x34
 8003e8a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e8e:	1912      	adds	r2, r2, r4
 8003e90:	eb45 0303 	adc.w	r3, r5, r3
 8003e94:	f04f 0000 	mov.w	r0, #0
 8003e98:	f04f 0100 	mov.w	r1, #0
 8003e9c:	00d9      	lsls	r1, r3, #3
 8003e9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ea2:	00d0      	lsls	r0, r2, #3
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	1911      	adds	r1, r2, r4
 8003eaa:	65b9      	str	r1, [r7, #88]	; 0x58
 8003eac:	416b      	adcs	r3, r5
 8003eae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	1891      	adds	r1, r2, r2
 8003ebc:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ebe:	415b      	adcs	r3, r3
 8003ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ec2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ec6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003eca:	f7fc f981 	bl	80001d0 <__aeabi_uldivmod>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4b8c      	ldr	r3, [pc, #560]	; (8004104 <UART_SetConfig+0x38c>)
 8003ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed8:	095b      	lsrs	r3, r3, #5
 8003eda:	2164      	movs	r1, #100	; 0x64
 8003edc:	fb01 f303 	mul.w	r3, r1, r3
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	3332      	adds	r3, #50	; 0x32
 8003ee6:	4a87      	ldr	r2, [pc, #540]	; (8004104 <UART_SetConfig+0x38c>)
 8003ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ef4:	441e      	add	r6, r3
 8003ef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f04f 0100 	mov.w	r1, #0
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	1894      	adds	r4, r2, r2
 8003f04:	623c      	str	r4, [r7, #32]
 8003f06:	415b      	adcs	r3, r3
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f0e:	1812      	adds	r2, r2, r0
 8003f10:	eb41 0303 	adc.w	r3, r1, r3
 8003f14:	f04f 0400 	mov.w	r4, #0
 8003f18:	f04f 0500 	mov.w	r5, #0
 8003f1c:	00dd      	lsls	r5, r3, #3
 8003f1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f22:	00d4      	lsls	r4, r2, #3
 8003f24:	4622      	mov	r2, r4
 8003f26:	462b      	mov	r3, r5
 8003f28:	1814      	adds	r4, r2, r0
 8003f2a:	653c      	str	r4, [r7, #80]	; 0x50
 8003f2c:	414b      	adcs	r3, r1
 8003f2e:	657b      	str	r3, [r7, #84]	; 0x54
 8003f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	461a      	mov	r2, r3
 8003f36:	f04f 0300 	mov.w	r3, #0
 8003f3a:	1891      	adds	r1, r2, r2
 8003f3c:	61b9      	str	r1, [r7, #24]
 8003f3e:	415b      	adcs	r3, r3
 8003f40:	61fb      	str	r3, [r7, #28]
 8003f42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f46:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003f4a:	f7fc f941 	bl	80001d0 <__aeabi_uldivmod>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4b6c      	ldr	r3, [pc, #432]	; (8004104 <UART_SetConfig+0x38c>)
 8003f54:	fba3 1302 	umull	r1, r3, r3, r2
 8003f58:	095b      	lsrs	r3, r3, #5
 8003f5a:	2164      	movs	r1, #100	; 0x64
 8003f5c:	fb01 f303 	mul.w	r3, r1, r3
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	3332      	adds	r3, #50	; 0x32
 8003f66:	4a67      	ldr	r2, [pc, #412]	; (8004104 <UART_SetConfig+0x38c>)
 8003f68:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6c:	095b      	lsrs	r3, r3, #5
 8003f6e:	f003 0207 	and.w	r2, r3, #7
 8003f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4432      	add	r2, r6
 8003f78:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f7a:	e0b9      	b.n	80040f0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f7e:	461c      	mov	r4, r3
 8003f80:	f04f 0500 	mov.w	r5, #0
 8003f84:	4622      	mov	r2, r4
 8003f86:	462b      	mov	r3, r5
 8003f88:	1891      	adds	r1, r2, r2
 8003f8a:	6139      	str	r1, [r7, #16]
 8003f8c:	415b      	adcs	r3, r3
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f94:	1912      	adds	r2, r2, r4
 8003f96:	eb45 0303 	adc.w	r3, r5, r3
 8003f9a:	f04f 0000 	mov.w	r0, #0
 8003f9e:	f04f 0100 	mov.w	r1, #0
 8003fa2:	00d9      	lsls	r1, r3, #3
 8003fa4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fa8:	00d0      	lsls	r0, r2, #3
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	eb12 0804 	adds.w	r8, r2, r4
 8003fb2:	eb43 0905 	adc.w	r9, r3, r5
 8003fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f04f 0100 	mov.w	r1, #0
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	f04f 0300 	mov.w	r3, #0
 8003fc8:	008b      	lsls	r3, r1, #2
 8003fca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fce:	0082      	lsls	r2, r0, #2
 8003fd0:	4640      	mov	r0, r8
 8003fd2:	4649      	mov	r1, r9
 8003fd4:	f7fc f8fc 	bl	80001d0 <__aeabi_uldivmod>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4b49      	ldr	r3, [pc, #292]	; (8004104 <UART_SetConfig+0x38c>)
 8003fde:	fba3 2302 	umull	r2, r3, r3, r2
 8003fe2:	095b      	lsrs	r3, r3, #5
 8003fe4:	011e      	lsls	r6, r3, #4
 8003fe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f04f 0100 	mov.w	r1, #0
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	1894      	adds	r4, r2, r2
 8003ff4:	60bc      	str	r4, [r7, #8]
 8003ff6:	415b      	adcs	r3, r3
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ffe:	1812      	adds	r2, r2, r0
 8004000:	eb41 0303 	adc.w	r3, r1, r3
 8004004:	f04f 0400 	mov.w	r4, #0
 8004008:	f04f 0500 	mov.w	r5, #0
 800400c:	00dd      	lsls	r5, r3, #3
 800400e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004012:	00d4      	lsls	r4, r2, #3
 8004014:	4622      	mov	r2, r4
 8004016:	462b      	mov	r3, r5
 8004018:	1814      	adds	r4, r2, r0
 800401a:	64bc      	str	r4, [r7, #72]	; 0x48
 800401c:	414b      	adcs	r3, r1
 800401e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	4618      	mov	r0, r3
 8004026:	f04f 0100 	mov.w	r1, #0
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	008b      	lsls	r3, r1, #2
 8004034:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004038:	0082      	lsls	r2, r0, #2
 800403a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800403e:	f7fc f8c7 	bl	80001d0 <__aeabi_uldivmod>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4b2f      	ldr	r3, [pc, #188]	; (8004104 <UART_SetConfig+0x38c>)
 8004048:	fba3 1302 	umull	r1, r3, r3, r2
 800404c:	095b      	lsrs	r3, r3, #5
 800404e:	2164      	movs	r1, #100	; 0x64
 8004050:	fb01 f303 	mul.w	r3, r1, r3
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	3332      	adds	r3, #50	; 0x32
 800405a:	4a2a      	ldr	r2, [pc, #168]	; (8004104 <UART_SetConfig+0x38c>)
 800405c:	fba2 2303 	umull	r2, r3, r2, r3
 8004060:	095b      	lsrs	r3, r3, #5
 8004062:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004066:	441e      	add	r6, r3
 8004068:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800406a:	4618      	mov	r0, r3
 800406c:	f04f 0100 	mov.w	r1, #0
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	1894      	adds	r4, r2, r2
 8004076:	603c      	str	r4, [r7, #0]
 8004078:	415b      	adcs	r3, r3
 800407a:	607b      	str	r3, [r7, #4]
 800407c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004080:	1812      	adds	r2, r2, r0
 8004082:	eb41 0303 	adc.w	r3, r1, r3
 8004086:	f04f 0400 	mov.w	r4, #0
 800408a:	f04f 0500 	mov.w	r5, #0
 800408e:	00dd      	lsls	r5, r3, #3
 8004090:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004094:	00d4      	lsls	r4, r2, #3
 8004096:	4622      	mov	r2, r4
 8004098:	462b      	mov	r3, r5
 800409a:	eb12 0a00 	adds.w	sl, r2, r0
 800409e:	eb43 0b01 	adc.w	fp, r3, r1
 80040a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f04f 0100 	mov.w	r1, #0
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	008b      	lsls	r3, r1, #2
 80040b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040ba:	0082      	lsls	r2, r0, #2
 80040bc:	4650      	mov	r0, sl
 80040be:	4659      	mov	r1, fp
 80040c0:	f7fc f886 	bl	80001d0 <__aeabi_uldivmod>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4b0e      	ldr	r3, [pc, #56]	; (8004104 <UART_SetConfig+0x38c>)
 80040ca:	fba3 1302 	umull	r1, r3, r3, r2
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	2164      	movs	r1, #100	; 0x64
 80040d2:	fb01 f303 	mul.w	r3, r1, r3
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	011b      	lsls	r3, r3, #4
 80040da:	3332      	adds	r3, #50	; 0x32
 80040dc:	4a09      	ldr	r2, [pc, #36]	; (8004104 <UART_SetConfig+0x38c>)
 80040de:	fba2 2303 	umull	r2, r3, r2, r3
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	f003 020f 	and.w	r2, r3, #15
 80040e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4432      	add	r2, r6
 80040ee:	609a      	str	r2, [r3, #8]
}
 80040f0:	bf00      	nop
 80040f2:	377c      	adds	r7, #124	; 0x7c
 80040f4:	46bd      	mov	sp, r7
 80040f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040fa:	bf00      	nop
 80040fc:	40011000 	.word	0x40011000
 8004100:	40011400 	.word	0x40011400
 8004104:	51eb851f 	.word	0x51eb851f

08004108 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f103 0208 	add.w	r2, r3, #8
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004120:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f103 0208 	add.w	r2, r3, #8
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f103 0208 	add.w	r2, r3, #8
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004162:	b480      	push	{r7}
 8004164:	b085      	sub	sp, #20
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	601a      	str	r2, [r3, #0]
}
 800419e:	bf00      	nop
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80041aa:	b480      	push	{r7}
 80041ac:	b085      	sub	sp, #20
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041c0:	d103      	bne.n	80041ca <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	e00c      	b.n	80041e4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	3308      	adds	r3, #8
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	e002      	b.n	80041d8 <vListInsert+0x2e>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d2f6      	bcs.n	80041d2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	601a      	str	r2, [r3, #0]
}
 8004210:	bf00      	nop
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6892      	ldr	r2, [r2, #8]
 8004232:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6852      	ldr	r2, [r2, #4]
 800423c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	429a      	cmp	r2, r3
 8004246:	d103      	bne.n	8004250 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	1e5a      	subs	r2, r3, #1
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10a      	bne.n	800429a <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8004284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8004296:	bf00      	nop
 8004298:	e7fe      	b.n	8004298 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800429a:	f002 fbed 	bl	8006a78 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a6:	68f9      	ldr	r1, [r7, #12]
 80042a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042aa:	fb01 f303 	mul.w	r3, r1, r3
 80042ae:	441a      	add	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ca:	3b01      	subs	r3, #1
 80042cc:	68f9      	ldr	r1, [r7, #12]
 80042ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042d0:	fb01 f303 	mul.w	r3, r1, r3
 80042d4:	441a      	add	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	22ff      	movs	r2, #255	; 0xff
 80042de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	22ff      	movs	r2, #255	; 0xff
 80042e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d114      	bne.n	800431a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d01a      	beq.n	800432e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	3310      	adds	r3, #16
 80042fc:	4618      	mov	r0, r3
 80042fe:	f001 fca5 	bl	8005c4c <xTaskRemoveFromEventList>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d012      	beq.n	800432e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004308:	4b0c      	ldr	r3, [pc, #48]	; (800433c <xQueueGenericReset+0xcc>)
 800430a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	e009      	b.n	800432e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3310      	adds	r3, #16
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff fef2 	bl	8004108 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	3324      	adds	r3, #36	; 0x24
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff feed 	bl	8004108 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800432e:	f002 fbd3 	bl	8006ad8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004332:	2301      	movs	r3, #1
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	e000ed04 	.word	0xe000ed04

08004340 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004340:	b580      	push	{r7, lr}
 8004342:	b08c      	sub	sp, #48	; 0x30
 8004344:	af02      	add	r7, sp, #8
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	4613      	mov	r3, r2
 800434c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10a      	bne.n	800436a <xQueueGenericCreate+0x2a>
        __asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	61bb      	str	r3, [r7, #24]
    }
 8004366:	bf00      	nop
 8004368:	e7fe      	b.n	8004368 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	fb02 f303 	mul.w	r3, r2, r3
 8004372:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d006      	beq.n	8004388 <xQueueGenericCreate+0x48>
 800437a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	429a      	cmp	r2, r3
 8004386:	d101      	bne.n	800438c <xQueueGenericCreate+0x4c>
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <xQueueGenericCreate+0x4e>
 800438c:	2300      	movs	r3, #0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10a      	bne.n	80043a8 <xQueueGenericCreate+0x68>
        __asm volatile
 8004392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004396:	f383 8811 	msr	BASEPRI, r3
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	617b      	str	r3, [r7, #20]
    }
 80043a4:	bf00      	nop
 80043a6:	e7fe      	b.n	80043a6 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80043ae:	d90a      	bls.n	80043c6 <xQueueGenericCreate+0x86>
        __asm volatile
 80043b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	613b      	str	r3, [r7, #16]
    }
 80043c2:	bf00      	nop
 80043c4:	e7fe      	b.n	80043c4 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	3350      	adds	r3, #80	; 0x50
 80043ca:	4618      	mov	r0, r3
 80043cc:	f002 fc6e 	bl	8006cac <pvPortMalloc>
 80043d0:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00e      	beq.n	80043f6 <xQueueGenericCreate+0xb6>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	3350      	adds	r3, #80	; 0x50
 80043e0:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043e2:	79fa      	ldrb	r2, [r7, #7]
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	4613      	mov	r3, r2
 80043ea:	69fa      	ldr	r2, [r7, #28]
 80043ec:	68b9      	ldr	r1, [r7, #8]
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 f822 	bl	8004438 <prvInitialiseNewQueue>
 80043f4:	e016      	b.n	8004424 <xQueueGenericCreate+0xe4>
        }
        else
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
 80043f6:	f7fc fc0e 	bl	8000c16 <prvTraceGetCurrentTaskHandle>
 80043fa:	4603      	mov	r3, r0
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7fc fb89 	bl	8000b14 <prvTraceGetTaskNumberHigh16>
 8004402:	4603      	mov	r3, r0
 8004404:	461a      	mov	r2, r3
 8004406:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <xQueueGenericCreate+0xf0>)
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	4013      	ands	r3, r2
 800440c:	b29b      	uxth	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d008      	beq.n	8004424 <xQueueGenericCreate+0xe4>
 8004412:	79fb      	ldrb	r3, [r7, #7]
 8004414:	4a07      	ldr	r2, [pc, #28]	; (8004434 <xQueueGenericCreate+0xf4>)
 8004416:	5cd3      	ldrb	r3, [r2, r3]
 8004418:	3340      	adds	r3, #64	; 0x40
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2100      	movs	r1, #0
 800441e:	4618      	mov	r0, r3
 8004420:	f7fd f9c4 	bl	80017ac <prvTraceStoreKernelCallWithNumericParamOnly>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004424:	6a3b      	ldr	r3, [r7, #32]
    }
 8004426:	4618      	mov	r0, r3
 8004428:	3728      	adds	r7, #40	; 0x28
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	20007a94 	.word	0x20007a94
 8004434:	20000004 	.word	0x20000004

08004438 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004438:	b5b0      	push	{r4, r5, r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
 8004444:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d103      	bne.n	8004454 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	6a3a      	ldr	r2, [r7, #32]
 8004450:	601a      	str	r2, [r3, #0]
 8004452:	e002      	b.n	800445a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004466:	2101      	movs	r1, #1
 8004468:	6a38      	ldr	r0, [r7, #32]
 800446a:	f7ff ff01 	bl	8004270 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	78fa      	ldrb	r2, [r7, #3]
 8004472:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8004476:	6a38      	ldr	r0, [r7, #32]
 8004478:	f7fc fb33 	bl	8000ae2 <prvTraceGetQueueType>
 800447c:	4603      	mov	r3, r0
 800447e:	461a      	mov	r2, r3
 8004480:	4b34      	ldr	r3, [pc, #208]	; (8004554 <prvInitialiseNewQueue+0x11c>)
 8004482:	5c9b      	ldrb	r3, [r3, r2]
 8004484:	4618      	mov	r0, r3
 8004486:	f7fd fc01 	bl	8001c8c <prvTraceGetObjectHandle>
 800448a:	4603      	mov	r3, r0
 800448c:	b29b      	uxth	r3, r3
 800448e:	4619      	mov	r1, r3
 8004490:	6a38      	ldr	r0, [r7, #32]
 8004492:	f7fc fb94 	bl	8000bbe <prvTraceSetQueueNumberLow16>
 8004496:	4b30      	ldr	r3, [pc, #192]	; (8004558 <prvInitialiseNewQueue+0x120>)
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	4619      	mov	r1, r3
 800449c:	6a38      	ldr	r0, [r7, #32]
 800449e:	f7fc fba4 	bl	8000bea <prvTraceSetQueueNumberHigh16>
 80044a2:	6a38      	ldr	r0, [r7, #32]
 80044a4:	f7fc fb1d 	bl	8000ae2 <prvTraceGetQueueType>
 80044a8:	4603      	mov	r3, r0
 80044aa:	461a      	mov	r2, r3
 80044ac:	4b29      	ldr	r3, [pc, #164]	; (8004554 <prvInitialiseNewQueue+0x11c>)
 80044ae:	5c9c      	ldrb	r4, [r3, r2]
 80044b0:	6a38      	ldr	r0, [r7, #32]
 80044b2:	f7fc fb69 	bl	8000b88 <prvTraceGetQueueNumberLow16>
 80044b6:	4603      	mov	r3, r0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	4619      	mov	r1, r3
 80044bc:	4620      	mov	r0, r4
 80044be:	f7fd fc93 	bl	8001de8 <prvMarkObjectAsUsed>
 80044c2:	f7fc fba8 	bl	8000c16 <prvTraceGetCurrentTaskHandle>
 80044c6:	4603      	mov	r3, r0
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7fc fb23 	bl	8000b14 <prvTraceGetTaskNumberHigh16>
 80044ce:	4603      	mov	r3, r0
 80044d0:	461a      	mov	r2, r3
 80044d2:	4b22      	ldr	r3, [pc, #136]	; (800455c <prvInitialiseNewQueue+0x124>)
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	4013      	ands	r3, r2
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d025      	beq.n	800452a <prvInitialiseNewQueue+0xf2>
 80044de:	6a38      	ldr	r0, [r7, #32]
 80044e0:	f7fc fb5f 	bl	8000ba2 <prvTraceGetQueueNumberHigh16>
 80044e4:	4603      	mov	r3, r0
 80044e6:	461a      	mov	r2, r3
 80044e8:	4b1c      	ldr	r3, [pc, #112]	; (800455c <prvInitialiseNewQueue+0x124>)
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	4013      	ands	r3, r2
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d01a      	beq.n	800452a <prvInitialiseNewQueue+0xf2>
 80044f4:	6a38      	ldr	r0, [r7, #32]
 80044f6:	f7fc faf4 	bl	8000ae2 <prvTraceGetQueueType>
 80044fa:	4603      	mov	r3, r0
 80044fc:	461a      	mov	r2, r3
 80044fe:	4b15      	ldr	r3, [pc, #84]	; (8004554 <prvInitialiseNewQueue+0x11c>)
 8004500:	5c9b      	ldrb	r3, [r3, r2]
 8004502:	3318      	adds	r3, #24
 8004504:	b2db      	uxtb	r3, r3
 8004506:	461d      	mov	r5, r3
 8004508:	6a38      	ldr	r0, [r7, #32]
 800450a:	f7fc faea 	bl	8000ae2 <prvTraceGetQueueType>
 800450e:	4603      	mov	r3, r0
 8004510:	461a      	mov	r2, r3
 8004512:	4b10      	ldr	r3, [pc, #64]	; (8004554 <prvInitialiseNewQueue+0x11c>)
 8004514:	5c9c      	ldrb	r4, [r3, r2]
 8004516:	6a38      	ldr	r0, [r7, #32]
 8004518:	f7fc fb36 	bl	8000b88 <prvTraceGetQueueNumberLow16>
 800451c:	4603      	mov	r3, r0
 800451e:	b2db      	uxtb	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	4621      	mov	r1, r4
 8004524:	4628      	mov	r0, r5
 8004526:	f7fc fffd 	bl	8001524 <prvTraceStoreKernelCall>
 800452a:	6a38      	ldr	r0, [r7, #32]
 800452c:	f7fc fad9 	bl	8000ae2 <prvTraceGetQueueType>
 8004530:	4603      	mov	r3, r0
 8004532:	461a      	mov	r2, r3
 8004534:	4b07      	ldr	r3, [pc, #28]	; (8004554 <prvInitialiseNewQueue+0x11c>)
 8004536:	5c9c      	ldrb	r4, [r3, r2]
 8004538:	6a38      	ldr	r0, [r7, #32]
 800453a:	f7fc fb25 	bl	8000b88 <prvTraceGetQueueNumberLow16>
 800453e:	4603      	mov	r3, r0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2200      	movs	r2, #0
 8004544:	4619      	mov	r1, r3
 8004546:	4620      	mov	r0, r4
 8004548:	f7fd fa82 	bl	8001a50 <prvTraceSetObjectState>
}
 800454c:	bf00      	nop
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bdb0      	pop	{r4, r5, r7, pc}
 8004554:	20000004 	.word	0x20000004
 8004558:	200093a0 	.word	0x200093a0
 800455c:	20007a94 	.word	0x20007a94

08004560 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004560:	b5b0      	push	{r4, r5, r7, lr}
 8004562:	b08e      	sub	sp, #56	; 0x38
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800456e:	2300      	movs	r3, #0
 8004570:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10a      	bne.n	8004592 <xQueueGenericSend+0x32>
        __asm volatile
 800457c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800458e:	bf00      	nop
 8004590:	e7fe      	b.n	8004590 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d103      	bne.n	80045a0 <xQueueGenericSend+0x40>
 8004598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <xQueueGenericSend+0x44>
 80045a0:	2301      	movs	r3, #1
 80045a2:	e000      	b.n	80045a6 <xQueueGenericSend+0x46>
 80045a4:	2300      	movs	r3, #0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10a      	bne.n	80045c0 <xQueueGenericSend+0x60>
        __asm volatile
 80045aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80045bc:	bf00      	nop
 80045be:	e7fe      	b.n	80045be <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d103      	bne.n	80045ce <xQueueGenericSend+0x6e>
 80045c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d101      	bne.n	80045d2 <xQueueGenericSend+0x72>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <xQueueGenericSend+0x74>
 80045d2:	2300      	movs	r3, #0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <xQueueGenericSend+0x8e>
        __asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	623b      	str	r3, [r7, #32]
    }
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045ee:	f001 fcd1 	bl	8005f94 <xTaskGetSchedulerState>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d102      	bne.n	80045fe <xQueueGenericSend+0x9e>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <xQueueGenericSend+0xa2>
 80045fe:	2301      	movs	r3, #1
 8004600:	e000      	b.n	8004604 <xQueueGenericSend+0xa4>
 8004602:	2300      	movs	r3, #0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10a      	bne.n	800461e <xQueueGenericSend+0xbe>
        __asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	61fb      	str	r3, [r7, #28]
    }
 800461a:	bf00      	nop
 800461c:	e7fe      	b.n	800461c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800461e:	f002 fa2b 	bl	8006a78 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462a:	429a      	cmp	r2, r3
 800462c:	d303      	bcc.n	8004636 <xQueueGenericSend+0xd6>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b02      	cmp	r3, #2
 8004632:	f040 8084 	bne.w	800473e <xQueueGenericSend+0x1de>
            {
                traceQUEUE_SEND( pxQueue );
 8004636:	f7fc faee 	bl	8000c16 <prvTraceGetCurrentTaskHandle>
 800463a:	4603      	mov	r3, r0
 800463c:	4618      	mov	r0, r3
 800463e:	f7fc fa69 	bl	8000b14 <prvTraceGetTaskNumberHigh16>
 8004642:	4603      	mov	r3, r0
 8004644:	461a      	mov	r2, r3
 8004646:	4ba6      	ldr	r3, [pc, #664]	; (80048e0 <xQueueGenericSend+0x380>)
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	4013      	ands	r3, r2
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d02a      	beq.n	80046a8 <xQueueGenericSend+0x148>
 8004652:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004654:	f7fc faa5 	bl	8000ba2 <prvTraceGetQueueNumberHigh16>
 8004658:	4603      	mov	r3, r0
 800465a:	461a      	mov	r2, r3
 800465c:	4ba0      	ldr	r3, [pc, #640]	; (80048e0 <xQueueGenericSend+0x380>)
 800465e:	881b      	ldrh	r3, [r3, #0]
 8004660:	4013      	ands	r3, r2
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d01f      	beq.n	80046a8 <xQueueGenericSend+0x148>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10a      	bne.n	8004684 <xQueueGenericSend+0x124>
 800466e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004670:	f7fc fa37 	bl	8000ae2 <prvTraceGetQueueType>
 8004674:	4603      	mov	r3, r0
 8004676:	461a      	mov	r2, r3
 8004678:	4b9a      	ldr	r3, [pc, #616]	; (80048e4 <xQueueGenericSend+0x384>)
 800467a:	5c9b      	ldrb	r3, [r3, r2]
 800467c:	3320      	adds	r3, #32
 800467e:	b2db      	uxtb	r3, r3
 8004680:	461d      	mov	r5, r3
 8004682:	e000      	b.n	8004686 <xQueueGenericSend+0x126>
 8004684:	2525      	movs	r5, #37	; 0x25
 8004686:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004688:	f7fc fa2b 	bl	8000ae2 <prvTraceGetQueueType>
 800468c:	4603      	mov	r3, r0
 800468e:	461a      	mov	r2, r3
 8004690:	4b94      	ldr	r3, [pc, #592]	; (80048e4 <xQueueGenericSend+0x384>)
 8004692:	5c9c      	ldrb	r4, [r3, r2]
 8004694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004696:	f7fc fa77 	bl	8000b88 <prvTraceGetQueueNumberLow16>
 800469a:	4603      	mov	r3, r0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	461a      	mov	r2, r3
 80046a0:	4621      	mov	r1, r4
 80046a2:	4628      	mov	r0, r5
 80046a4:	f7fc ff3e 	bl	8001524 <prvTraceStoreKernelCall>
 80046a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046aa:	f7fc fa1a 	bl	8000ae2 <prvTraceGetQueueType>
 80046ae:	4603      	mov	r3, r0
 80046b0:	461a      	mov	r2, r3
 80046b2:	4b8c      	ldr	r3, [pc, #560]	; (80048e4 <xQueueGenericSend+0x384>)
 80046b4:	5c9c      	ldrb	r4, [r3, r2]
 80046b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046b8:	f7fc fa66 	bl	8000b88 <prvTraceGetQueueNumberLow16>
 80046bc:	4603      	mov	r3, r0
 80046be:	b2dd      	uxtb	r5, r3
 80046c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046c2:	f7fc fa0e 	bl	8000ae2 <prvTraceGetQueueType>
 80046c6:	4603      	mov	r3, r0
 80046c8:	461a      	mov	r2, r3
 80046ca:	4b86      	ldr	r3, [pc, #536]	; (80048e4 <xQueueGenericSend+0x384>)
 80046cc:	5c9b      	ldrb	r3, [r3, r2]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d005      	beq.n	80046de <xQueueGenericSend+0x17e>
 80046d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	3301      	adds	r3, #1
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	e000      	b.n	80046e0 <xQueueGenericSend+0x180>
 80046de:	2300      	movs	r3, #0
 80046e0:	461a      	mov	r2, r3
 80046e2:	4629      	mov	r1, r5
 80046e4:	4620      	mov	r0, r4
 80046e6:	f7fd f9b3 	bl	8001a50 <prvTraceSetObjectState>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046f0:	f000 fc89 	bl	8005006 <prvCopyDataToQueue>
 80046f4:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d010      	beq.n	8004720 <xQueueGenericSend+0x1c0>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004700:	3324      	adds	r3, #36	; 0x24
 8004702:	4618      	mov	r0, r3
 8004704:	f001 faa2 	bl	8005c4c <xTaskRemoveFromEventList>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d013      	beq.n	8004736 <xQueueGenericSend+0x1d6>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800470e:	4b76      	ldr	r3, [pc, #472]	; (80048e8 <xQueueGenericSend+0x388>)
 8004710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	e00a      	b.n	8004736 <xQueueGenericSend+0x1d6>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8004720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004722:	2b00      	cmp	r3, #0
 8004724:	d007      	beq.n	8004736 <xQueueGenericSend+0x1d6>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004726:	4b70      	ldr	r3, [pc, #448]	; (80048e8 <xQueueGenericSend+0x388>)
 8004728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004736:	f002 f9cf 	bl	8006ad8 <vPortExitCritical>
                return pdPASS;
 800473a:	2301      	movs	r3, #1
 800473c:	e115      	b.n	800496a <xQueueGenericSend+0x40a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d13c      	bne.n	80047be <xQueueGenericSend+0x25e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004744:	f002 f9c8 	bl	8006ad8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8004748:	f7fc fa65 	bl	8000c16 <prvTraceGetCurrentTaskHandle>
 800474c:	4603      	mov	r3, r0
 800474e:	4618      	mov	r0, r3
 8004750:	f7fc f9e0 	bl	8000b14 <prvTraceGetTaskNumberHigh16>
 8004754:	4603      	mov	r3, r0
 8004756:	461a      	mov	r2, r3
 8004758:	4b61      	ldr	r3, [pc, #388]	; (80048e0 <xQueueGenericSend+0x380>)
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	4013      	ands	r3, r2
 800475e:	b29b      	uxth	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	d02a      	beq.n	80047ba <xQueueGenericSend+0x25a>
 8004764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004766:	f7fc fa1c 	bl	8000ba2 <prvTraceGetQueueNumberHigh16>
 800476a:	4603      	mov	r3, r0
 800476c:	461a      	mov	r2, r3
 800476e:	4b5c      	ldr	r3, [pc, #368]	; (80048e0 <xQueueGenericSend+0x380>)
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	4013      	ands	r3, r2
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d01f      	beq.n	80047ba <xQueueGenericSend+0x25a>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10a      	bne.n	8004796 <xQueueGenericSend+0x236>
 8004780:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004782:	f7fc f9ae 	bl	8000ae2 <prvTraceGetQueueType>
 8004786:	4603      	mov	r3, r0
 8004788:	461a      	mov	r2, r3
 800478a:	4b56      	ldr	r3, [pc, #344]	; (80048e4 <xQueueGenericSend+0x384>)
 800478c:	5c9b      	ldrb	r3, [r3, r2]
 800478e:	3348      	adds	r3, #72	; 0x48
 8004790:	b2db      	uxtb	r3, r3
 8004792:	461d      	mov	r5, r3
 8004794:	e000      	b.n	8004798 <xQueueGenericSend+0x238>
 8004796:	254d      	movs	r5, #77	; 0x4d
 8004798:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800479a:	f7fc f9a2 	bl	8000ae2 <prvTraceGetQueueType>
 800479e:	4603      	mov	r3, r0
 80047a0:	461a      	mov	r2, r3
 80047a2:	4b50      	ldr	r3, [pc, #320]	; (80048e4 <xQueueGenericSend+0x384>)
 80047a4:	5c9c      	ldrb	r4, [r3, r2]
 80047a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047a8:	f7fc f9ee 	bl	8000b88 <prvTraceGetQueueNumberLow16>
 80047ac:	4603      	mov	r3, r0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	4621      	mov	r1, r4
 80047b4:	4628      	mov	r0, r5
 80047b6:	f7fc feb5 	bl	8001524 <prvTraceStoreKernelCall>
                    return errQUEUE_FULL;
 80047ba:	2300      	movs	r3, #0
 80047bc:	e0d5      	b.n	800496a <xQueueGenericSend+0x40a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80047be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d106      	bne.n	80047d2 <xQueueGenericSend+0x272>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80047c4:	f107 0314 	add.w	r3, r7, #20
 80047c8:	4618      	mov	r0, r3
 80047ca:	f001 fab7 	bl	8005d3c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80047ce:	2301      	movs	r3, #1
 80047d0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80047d2:	f002 f981 	bl	8006ad8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80047d6:	f000 ff77 	bl	80056c8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80047da:	f002 f94d 	bl	8006a78 <vPortEnterCritical>
 80047de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047e4:	b25b      	sxtb	r3, r3
 80047e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047ea:	d103      	bne.n	80047f4 <xQueueGenericSend+0x294>
 80047ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047fa:	b25b      	sxtb	r3, r3
 80047fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004800:	d103      	bne.n	800480a <xQueueGenericSend+0x2aa>
 8004802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800480a:	f002 f965 	bl	8006ad8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800480e:	1d3a      	adds	r2, r7, #4
 8004810:	f107 0314 	add.w	r3, r7, #20
 8004814:	4611      	mov	r1, r2
 8004816:	4618      	mov	r0, r3
 8004818:	f001 faa6 	bl	8005d68 <xTaskCheckForTimeOut>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d164      	bne.n	80048ec <xQueueGenericSend+0x38c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004822:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004824:	f000 fce7 	bl	80051f6 <prvIsQueueFull>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d051      	beq.n	80048d2 <xQueueGenericSend+0x372>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 800482e:	f7fc f9f2 	bl	8000c16 <prvTraceGetCurrentTaskHandle>
 8004832:	4603      	mov	r3, r0
 8004834:	4618      	mov	r0, r3
 8004836:	f7fc f96d 	bl	8000b14 <prvTraceGetTaskNumberHigh16>
 800483a:	4603      	mov	r3, r0
 800483c:	461a      	mov	r2, r3
 800483e:	4b28      	ldr	r3, [pc, #160]	; (80048e0 <xQueueGenericSend+0x380>)
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	4013      	ands	r3, r2
 8004844:	b29b      	uxth	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d02a      	beq.n	80048a0 <xQueueGenericSend+0x340>
 800484a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800484c:	f7fc f9a9 	bl	8000ba2 <prvTraceGetQueueNumberHigh16>
 8004850:	4603      	mov	r3, r0
 8004852:	461a      	mov	r2, r3
 8004854:	4b22      	ldr	r3, [pc, #136]	; (80048e0 <xQueueGenericSend+0x380>)
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	4013      	ands	r3, r2
 800485a:	b29b      	uxth	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d01f      	beq.n	80048a0 <xQueueGenericSend+0x340>
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10a      	bne.n	800487c <xQueueGenericSend+0x31c>
 8004866:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004868:	f7fc f93b 	bl	8000ae2 <prvTraceGetQueueType>
 800486c:	4603      	mov	r3, r0
 800486e:	461a      	mov	r2, r3
 8004870:	4b1c      	ldr	r3, [pc, #112]	; (80048e4 <xQueueGenericSend+0x384>)
 8004872:	5c9b      	ldrb	r3, [r3, r2]
 8004874:	3370      	adds	r3, #112	; 0x70
 8004876:	b2db      	uxtb	r3, r3
 8004878:	461d      	mov	r5, r3
 800487a:	e000      	b.n	800487e <xQueueGenericSend+0x31e>
 800487c:	2575      	movs	r5, #117	; 0x75
 800487e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004880:	f7fc f92f 	bl	8000ae2 <prvTraceGetQueueType>
 8004884:	4603      	mov	r3, r0
 8004886:	461a      	mov	r2, r3
 8004888:	4b16      	ldr	r3, [pc, #88]	; (80048e4 <xQueueGenericSend+0x384>)
 800488a:	5c9c      	ldrb	r4, [r3, r2]
 800488c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800488e:	f7fc f97b 	bl	8000b88 <prvTraceGetQueueNumberLow16>
 8004892:	4603      	mov	r3, r0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	461a      	mov	r2, r3
 8004898:	4621      	mov	r1, r4
 800489a:	4628      	mov	r0, r5
 800489c:	f7fc fe42 	bl	8001524 <prvTraceStoreKernelCall>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80048a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a2:	3310      	adds	r3, #16
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	4611      	mov	r1, r2
 80048a8:	4618      	mov	r0, r3
 80048aa:	f001 f943 	bl	8005b34 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80048ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048b0:	f000 fc39 	bl	8005126 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80048b4:	f000 ff16 	bl	80056e4 <xTaskResumeAll>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f47f aeaf 	bne.w	800461e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80048c0:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <xQueueGenericSend+0x388>)
 80048c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	e6a5      	b.n	800461e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80048d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048d4:	f000 fc27 	bl	8005126 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80048d8:	f000 ff04 	bl	80056e4 <xTaskResumeAll>
 80048dc:	e69f      	b.n	800461e <xQueueGenericSend+0xbe>
 80048de:	bf00      	nop
 80048e0:	20007a94 	.word	0x20007a94
 80048e4:	20000004 	.word	0x20000004
 80048e8:	e000ed04 	.word	0xe000ed04
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80048ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048ee:	f000 fc1a 	bl	8005126 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80048f2:	f000 fef7 	bl	80056e4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80048f6:	f7fc f98e 	bl	8000c16 <prvTraceGetCurrentTaskHandle>
 80048fa:	4603      	mov	r3, r0
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fc f909 	bl	8000b14 <prvTraceGetTaskNumberHigh16>
 8004902:	4603      	mov	r3, r0
 8004904:	461a      	mov	r2, r3
 8004906:	4b1b      	ldr	r3, [pc, #108]	; (8004974 <xQueueGenericSend+0x414>)
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	4013      	ands	r3, r2
 800490c:	b29b      	uxth	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d02a      	beq.n	8004968 <xQueueGenericSend+0x408>
 8004912:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004914:	f7fc f945 	bl	8000ba2 <prvTraceGetQueueNumberHigh16>
 8004918:	4603      	mov	r3, r0
 800491a:	461a      	mov	r2, r3
 800491c:	4b15      	ldr	r3, [pc, #84]	; (8004974 <xQueueGenericSend+0x414>)
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	4013      	ands	r3, r2
 8004922:	b29b      	uxth	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d01f      	beq.n	8004968 <xQueueGenericSend+0x408>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10a      	bne.n	8004944 <xQueueGenericSend+0x3e4>
 800492e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004930:	f7fc f8d7 	bl	8000ae2 <prvTraceGetQueueType>
 8004934:	4603      	mov	r3, r0
 8004936:	461a      	mov	r2, r3
 8004938:	4b0f      	ldr	r3, [pc, #60]	; (8004978 <xQueueGenericSend+0x418>)
 800493a:	5c9b      	ldrb	r3, [r3, r2]
 800493c:	3348      	adds	r3, #72	; 0x48
 800493e:	b2db      	uxtb	r3, r3
 8004940:	461d      	mov	r5, r3
 8004942:	e000      	b.n	8004946 <xQueueGenericSend+0x3e6>
 8004944:	254d      	movs	r5, #77	; 0x4d
 8004946:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004948:	f7fc f8cb 	bl	8000ae2 <prvTraceGetQueueType>
 800494c:	4603      	mov	r3, r0
 800494e:	461a      	mov	r2, r3
 8004950:	4b09      	ldr	r3, [pc, #36]	; (8004978 <xQueueGenericSend+0x418>)
 8004952:	5c9c      	ldrb	r4, [r3, r2]
 8004954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004956:	f7fc f917 	bl	8000b88 <prvTraceGetQueueNumberLow16>
 800495a:	4603      	mov	r3, r0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	461a      	mov	r2, r3
 8004960:	4621      	mov	r1, r4
 8004962:	4628      	mov	r0, r5
 8004964:	f7fc fdde 	bl	8001524 <prvTraceStoreKernelCall>
            return errQUEUE_FULL;
 8004968:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800496a:	4618      	mov	r0, r3
 800496c:	3738      	adds	r7, #56	; 0x38
 800496e:	46bd      	mov	sp, r7
 8004970:	bdb0      	pop	{r4, r5, r7, pc}
 8004972:	bf00      	nop
 8004974:	20007a94 	.word	0x20007a94
 8004978:	20000004 	.word	0x20000004

0800497c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800497c:	b5b0      	push	{r4, r5, r7, lr}
 800497e:	b090      	sub	sp, #64	; 0x40
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
 8004988:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800498e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10a      	bne.n	80049aa <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80049a6:	bf00      	nop
 80049a8:	e7fe      	b.n	80049a8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d103      	bne.n	80049b8 <xQueueGenericSendFromISR+0x3c>
 80049b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <xQueueGenericSendFromISR+0x40>
 80049b8:	2301      	movs	r3, #1
 80049ba:	e000      	b.n	80049be <xQueueGenericSendFromISR+0x42>
 80049bc:	2300      	movs	r3, #0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10a      	bne.n	80049d8 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80049d4:	bf00      	nop
 80049d6:	e7fe      	b.n	80049d6 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d103      	bne.n	80049e6 <xQueueGenericSendFromISR+0x6a>
 80049de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <xQueueGenericSendFromISR+0x6e>
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <xQueueGenericSendFromISR+0x70>
 80049ea:	2300      	movs	r3, #0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10a      	bne.n	8004a06 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	623b      	str	r3, [r7, #32]
    }
 8004a02:	bf00      	nop
 8004a04:	e7fe      	b.n	8004a04 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a06:	f002 f911 	bl	8006c2c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004a0a:	f3ef 8211 	mrs	r2, BASEPRI
 8004a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	61fa      	str	r2, [r7, #28]
 8004a20:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004a22:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a24:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d302      	bcc.n	8004a38 <xQueueGenericSendFromISR+0xbc>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d17e      	bne.n	8004b36 <xQueueGenericSendFromISR+0x1ba>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a46:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8004a48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a4a:	f7fc f8aa 	bl	8000ba2 <prvTraceGetQueueNumberHigh16>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	461a      	mov	r2, r3
 8004a52:	4b55      	ldr	r3, [pc, #340]	; (8004ba8 <xQueueGenericSendFromISR+0x22c>)
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	4013      	ands	r3, r2
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d01f      	beq.n	8004a9e <xQueueGenericSendFromISR+0x122>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10a      	bne.n	8004a7a <xQueueGenericSendFromISR+0xfe>
 8004a64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a66:	f7fc f83c 	bl	8000ae2 <prvTraceGetQueueType>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	4b4f      	ldr	r3, [pc, #316]	; (8004bac <xQueueGenericSendFromISR+0x230>)
 8004a70:	5c9b      	ldrb	r3, [r3, r2]
 8004a72:	3330      	adds	r3, #48	; 0x30
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	461d      	mov	r5, r3
 8004a78:	e000      	b.n	8004a7c <xQueueGenericSendFromISR+0x100>
 8004a7a:	2535      	movs	r5, #53	; 0x35
 8004a7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a7e:	f7fc f830 	bl	8000ae2 <prvTraceGetQueueType>
 8004a82:	4603      	mov	r3, r0
 8004a84:	461a      	mov	r2, r3
 8004a86:	4b49      	ldr	r3, [pc, #292]	; (8004bac <xQueueGenericSendFromISR+0x230>)
 8004a88:	5c9c      	ldrb	r4, [r3, r2]
 8004a8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a8c:	f7fc f87c 	bl	8000b88 <prvTraceGetQueueNumberLow16>
 8004a90:	4603      	mov	r3, r0
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	461a      	mov	r2, r3
 8004a96:	4621      	mov	r1, r4
 8004a98:	4628      	mov	r0, r5
 8004a9a:	f7fc fd43 	bl	8001524 <prvTraceStoreKernelCall>
 8004a9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004aa0:	f7fc f81f 	bl	8000ae2 <prvTraceGetQueueType>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	4b40      	ldr	r3, [pc, #256]	; (8004bac <xQueueGenericSendFromISR+0x230>)
 8004aaa:	5c9c      	ldrb	r4, [r3, r2]
 8004aac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004aae:	f7fc f86b 	bl	8000b88 <prvTraceGetQueueNumberLow16>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	b2d9      	uxtb	r1, r3
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	3301      	adds	r3, #1
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	f7fc ffc4 	bl	8001a50 <prvTraceSetObjectState>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	68b9      	ldr	r1, [r7, #8]
 8004acc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ace:	f000 fa9a 	bl	8005006 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004ad2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004ad6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ada:	d112      	bne.n	8004b02 <xQueueGenericSendFromISR+0x186>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d025      	beq.n	8004b30 <xQueueGenericSendFromISR+0x1b4>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae6:	3324      	adds	r3, #36	; 0x24
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f001 f8af 	bl	8005c4c <xTaskRemoveFromEventList>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d01d      	beq.n	8004b30 <xQueueGenericSendFromISR+0x1b4>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d01a      	beq.n	8004b30 <xQueueGenericSendFromISR+0x1b4>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	e016      	b.n	8004b30 <xQueueGenericSendFromISR+0x1b4>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004b02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004b06:	2b7f      	cmp	r3, #127	; 0x7f
 8004b08:	d10a      	bne.n	8004b20 <xQueueGenericSendFromISR+0x1a4>
        __asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	617b      	str	r3, [r7, #20]
    }
 8004b1c:	bf00      	nop
 8004b1e:	e7fe      	b.n	8004b1e <xQueueGenericSendFromISR+0x1a2>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004b24:	3301      	adds	r3, #1
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	b25a      	sxtb	r2, r3
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004b30:	2301      	movs	r3, #1
 8004b32:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8004b34:	e02c      	b.n	8004b90 <xQueueGenericSendFromISR+0x214>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8004b36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004b38:	f7fc f833 	bl	8000ba2 <prvTraceGetQueueNumberHigh16>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	461a      	mov	r2, r3
 8004b40:	4b19      	ldr	r3, [pc, #100]	; (8004ba8 <xQueueGenericSendFromISR+0x22c>)
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	4013      	ands	r3, r2
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01f      	beq.n	8004b8c <xQueueGenericSendFromISR+0x210>
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10a      	bne.n	8004b68 <xQueueGenericSendFromISR+0x1ec>
 8004b52:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004b54:	f7fb ffc5 	bl	8000ae2 <prvTraceGetQueueType>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	4b13      	ldr	r3, [pc, #76]	; (8004bac <xQueueGenericSendFromISR+0x230>)
 8004b5e:	5c9b      	ldrb	r3, [r3, r2]
 8004b60:	3358      	adds	r3, #88	; 0x58
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	461d      	mov	r5, r3
 8004b66:	e000      	b.n	8004b6a <xQueueGenericSendFromISR+0x1ee>
 8004b68:	255d      	movs	r5, #93	; 0x5d
 8004b6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004b6c:	f7fb ffb9 	bl	8000ae2 <prvTraceGetQueueType>
 8004b70:	4603      	mov	r3, r0
 8004b72:	461a      	mov	r2, r3
 8004b74:	4b0d      	ldr	r3, [pc, #52]	; (8004bac <xQueueGenericSendFromISR+0x230>)
 8004b76:	5c9c      	ldrb	r4, [r3, r2]
 8004b78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004b7a:	f7fc f805 	bl	8000b88 <prvTraceGetQueueNumberLow16>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	461a      	mov	r2, r3
 8004b84:	4621      	mov	r1, r4
 8004b86:	4628      	mov	r0, r5
 8004b88:	f7fc fccc 	bl	8001524 <prvTraceStoreKernelCall>
            xReturn = errQUEUE_FULL;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b92:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004b9a:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3740      	adds	r7, #64	; 0x40
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20007a94 	.word	0x20007a94
 8004bac:	20000004 	.word	0x20000004

08004bb0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004bb0:	b5b0      	push	{r4, r5, r7, lr}
 8004bb2:	b08c      	sub	sp, #48	; 0x30
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10a      	bne.n	8004be0 <xQueueReceive+0x30>
        __asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	623b      	str	r3, [r7, #32]
    }
 8004bdc:	bf00      	nop
 8004bde:	e7fe      	b.n	8004bde <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d103      	bne.n	8004bee <xQueueReceive+0x3e>
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <xQueueReceive+0x42>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e000      	b.n	8004bf4 <xQueueReceive+0x44>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10a      	bne.n	8004c0e <xQueueReceive+0x5e>
        __asm volatile
 8004bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	61fb      	str	r3, [r7, #28]
    }
 8004c0a:	bf00      	nop
 8004c0c:	e7fe      	b.n	8004c0c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c0e:	f001 f9c1 	bl	8005f94 <xTaskGetSchedulerState>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d102      	bne.n	8004c1e <xQueueReceive+0x6e>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <xQueueReceive+0x72>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e000      	b.n	8004c24 <xQueueReceive+0x74>
 8004c22:	2300      	movs	r3, #0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10a      	bne.n	8004c3e <xQueueReceive+0x8e>
        __asm volatile
 8004c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2c:	f383 8811 	msr	BASEPRI, r3
 8004c30:	f3bf 8f6f 	isb	sy
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	61bb      	str	r3, [r7, #24]
    }
 8004c3a:	bf00      	nop
 8004c3c:	e7fe      	b.n	8004c3c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004c3e:	f001 ff1b 	bl	8006a78 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d07b      	beq.n	8004d46 <xQueueReceive+0x196>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c4e:	68b9      	ldr	r1, [r7, #8]
 8004c50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c52:	f000 fa42 	bl	80050da <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8004c56:	f7fb ffde 	bl	8000c16 <prvTraceGetCurrentTaskHandle>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fb ff59 	bl	8000b14 <prvTraceGetTaskNumberHigh16>
 8004c62:	4603      	mov	r3, r0
 8004c64:	461a      	mov	r2, r3
 8004c66:	4bac      	ldr	r3, [pc, #688]	; (8004f18 <xQueueReceive+0x368>)
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d025      	beq.n	8004cbe <xQueueReceive+0x10e>
 8004c72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c74:	f7fb ff95 	bl	8000ba2 <prvTraceGetQueueNumberHigh16>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	4ba6      	ldr	r3, [pc, #664]	; (8004f18 <xQueueReceive+0x368>)
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	4013      	ands	r3, r2
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01a      	beq.n	8004cbe <xQueueReceive+0x10e>
 8004c88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c8a:	f7fb ff2a 	bl	8000ae2 <prvTraceGetQueueType>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	461a      	mov	r2, r3
 8004c92:	4ba2      	ldr	r3, [pc, #648]	; (8004f1c <xQueueReceive+0x36c>)
 8004c94:	5c9b      	ldrb	r3, [r3, r2]
 8004c96:	3328      	adds	r3, #40	; 0x28
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	461d      	mov	r5, r3
 8004c9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c9e:	f7fb ff20 	bl	8000ae2 <prvTraceGetQueueType>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	4b9d      	ldr	r3, [pc, #628]	; (8004f1c <xQueueReceive+0x36c>)
 8004ca8:	5c9c      	ldrb	r4, [r3, r2]
 8004caa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cac:	f7fb ff6c 	bl	8000b88 <prvTraceGetQueueNumberLow16>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	4621      	mov	r1, r4
 8004cb8:	4628      	mov	r0, r5
 8004cba:	f7fc fc33 	bl	8001524 <prvTraceStoreKernelCall>
 8004cbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cc0:	f7fb ff0f 	bl	8000ae2 <prvTraceGetQueueType>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	4b94      	ldr	r3, [pc, #592]	; (8004f1c <xQueueReceive+0x36c>)
 8004cca:	5c9c      	ldrb	r4, [r3, r2]
 8004ccc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cce:	f7fb ff5b 	bl	8000b88 <prvTraceGetQueueNumberLow16>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	b2dd      	uxtb	r5, r3
 8004cd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cd8:	f7fb ff03 	bl	8000ae2 <prvTraceGetQueueType>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	461a      	mov	r2, r3
 8004ce0:	4b8e      	ldr	r3, [pc, #568]	; (8004f1c <xQueueReceive+0x36c>)
 8004ce2:	5c9b      	ldrb	r3, [r3, r2]
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d108      	bne.n	8004cfa <xQueueReceive+0x14a>
 8004ce8:	f7fb ff95 	bl	8000c16 <prvTraceGetCurrentTaskHandle>
 8004cec:	4603      	mov	r3, r0
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fb ff03 	bl	8000afa <prvTraceGetTaskNumberLow16>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	e004      	b.n	8004d04 <xQueueReceive+0x154>
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	461a      	mov	r2, r3
 8004d06:	4629      	mov	r1, r5
 8004d08:	4620      	mov	r0, r4
 8004d0a:	f7fc fea1 	bl	8001a50 <prvTraceSetObjectState>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d10:	1e5a      	subs	r2, r3, #1
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00f      	beq.n	8004d3e <xQueueReceive+0x18e>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	3310      	adds	r3, #16
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 ff92 	bl	8005c4c <xTaskRemoveFromEventList>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d007      	beq.n	8004d3e <xQueueReceive+0x18e>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004d2e:	4b7c      	ldr	r3, [pc, #496]	; (8004f20 <xQueueReceive+0x370>)
 8004d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004d3e:	f001 fecb 	bl	8006ad8 <vPortExitCritical>
                return pdPASS;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e12f      	b.n	8004fa6 <xQueueReceive+0x3f6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d137      	bne.n	8004dbc <xQueueReceive+0x20c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004d4c:	f001 fec4 	bl	8006ad8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004d50:	f7fb ff61 	bl	8000c16 <prvTraceGetCurrentTaskHandle>
 8004d54:	4603      	mov	r3, r0
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fb fedc 	bl	8000b14 <prvTraceGetTaskNumberHigh16>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	461a      	mov	r2, r3
 8004d60:	4b6d      	ldr	r3, [pc, #436]	; (8004f18 <xQueueReceive+0x368>)
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	4013      	ands	r3, r2
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d025      	beq.n	8004db8 <xQueueReceive+0x208>
 8004d6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d6e:	f7fb ff18 	bl	8000ba2 <prvTraceGetQueueNumberHigh16>
 8004d72:	4603      	mov	r3, r0
 8004d74:	461a      	mov	r2, r3
 8004d76:	4b68      	ldr	r3, [pc, #416]	; (8004f18 <xQueueReceive+0x368>)
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d01a      	beq.n	8004db8 <xQueueReceive+0x208>
 8004d82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d84:	f7fb fead 	bl	8000ae2 <prvTraceGetQueueType>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	4b63      	ldr	r3, [pc, #396]	; (8004f1c <xQueueReceive+0x36c>)
 8004d8e:	5c9b      	ldrb	r3, [r3, r2]
 8004d90:	3350      	adds	r3, #80	; 0x50
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	461d      	mov	r5, r3
 8004d96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d98:	f7fb fea3 	bl	8000ae2 <prvTraceGetQueueType>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	461a      	mov	r2, r3
 8004da0:	4b5e      	ldr	r3, [pc, #376]	; (8004f1c <xQueueReceive+0x36c>)
 8004da2:	5c9c      	ldrb	r4, [r3, r2]
 8004da4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004da6:	f7fb feef 	bl	8000b88 <prvTraceGetQueueNumberLow16>
 8004daa:	4603      	mov	r3, r0
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	461a      	mov	r2, r3
 8004db0:	4621      	mov	r1, r4
 8004db2:	4628      	mov	r0, r5
 8004db4:	f7fc fbb6 	bl	8001524 <prvTraceStoreKernelCall>
                    return errQUEUE_EMPTY;
 8004db8:	2300      	movs	r3, #0
 8004dba:	e0f4      	b.n	8004fa6 <xQueueReceive+0x3f6>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d106      	bne.n	8004dd0 <xQueueReceive+0x220>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004dc2:	f107 0310 	add.w	r3, r7, #16
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 ffb8 	bl	8005d3c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004dd0:	f001 fe82 	bl	8006ad8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004dd4:	f000 fc78 	bl	80056c8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004dd8:	f001 fe4e 	bl	8006a78 <vPortEnterCritical>
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004de2:	b25b      	sxtb	r3, r3
 8004de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004de8:	d103      	bne.n	8004df2 <xQueueReceive+0x242>
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004df8:	b25b      	sxtb	r3, r3
 8004dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dfe:	d103      	bne.n	8004e08 <xQueueReceive+0x258>
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e08:	f001 fe66 	bl	8006ad8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e0c:	1d3a      	adds	r2, r7, #4
 8004e0e:	f107 0310 	add.w	r3, r7, #16
 8004e12:	4611      	mov	r1, r2
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 ffa7 	bl	8005d68 <xTaskCheckForTimeOut>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f040 8081 	bne.w	8004f24 <xQueueReceive+0x374>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e24:	f000 f9d1 	bl	80051ca <prvIsQueueEmpty>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d06e      	beq.n	8004f0c <xQueueReceive+0x35c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8004e2e:	f7fb fef2 	bl	8000c16 <prvTraceGetCurrentTaskHandle>
 8004e32:	4603      	mov	r3, r0
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7fb fe6d 	bl	8000b14 <prvTraceGetTaskNumberHigh16>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	4b36      	ldr	r3, [pc, #216]	; (8004f18 <xQueueReceive+0x368>)
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	4013      	ands	r3, r2
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d025      	beq.n	8004e96 <xQueueReceive+0x2e6>
 8004e4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e4c:	f7fb fea9 	bl	8000ba2 <prvTraceGetQueueNumberHigh16>
 8004e50:	4603      	mov	r3, r0
 8004e52:	461a      	mov	r2, r3
 8004e54:	4b30      	ldr	r3, [pc, #192]	; (8004f18 <xQueueReceive+0x368>)
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d01a      	beq.n	8004e96 <xQueueReceive+0x2e6>
 8004e60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e62:	f7fb fe3e 	bl	8000ae2 <prvTraceGetQueueType>
 8004e66:	4603      	mov	r3, r0
 8004e68:	461a      	mov	r2, r3
 8004e6a:	4b2c      	ldr	r3, [pc, #176]	; (8004f1c <xQueueReceive+0x36c>)
 8004e6c:	5c9b      	ldrb	r3, [r3, r2]
 8004e6e:	3368      	adds	r3, #104	; 0x68
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	461d      	mov	r5, r3
 8004e74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e76:	f7fb fe34 	bl	8000ae2 <prvTraceGetQueueType>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	4b27      	ldr	r3, [pc, #156]	; (8004f1c <xQueueReceive+0x36c>)
 8004e80:	5c9c      	ldrb	r4, [r3, r2]
 8004e82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e84:	f7fb fe80 	bl	8000b88 <prvTraceGetQueueNumberLow16>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	4621      	mov	r1, r4
 8004e90:	4628      	mov	r0, r5
 8004e92:	f7fc fb47 	bl	8001524 <prvTraceStoreKernelCall>
 8004e96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e98:	f7fb fe23 	bl	8000ae2 <prvTraceGetQueueType>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	4b1e      	ldr	r3, [pc, #120]	; (8004f1c <xQueueReceive+0x36c>)
 8004ea2:	5c9b      	ldrb	r3, [r3, r2]
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d018      	beq.n	8004eda <xQueueReceive+0x32a>
 8004ea8:	f7fb feb5 	bl	8000c16 <prvTraceGetCurrentTaskHandle>
 8004eac:	4603      	mov	r3, r0
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fb fe30 	bl	8000b14 <prvTraceGetTaskNumberHigh16>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	4b17      	ldr	r3, [pc, #92]	; (8004f18 <xQueueReceive+0x368>)
 8004eba:	881b      	ldrh	r3, [r3, #0]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <xQueueReceive+0x32a>
 8004ec4:	f7fb fea7 	bl	8000c16 <prvTraceGetCurrentTaskHandle>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fb fe15 	bl	8000afa <prvTraceGetTaskNumberLow16>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7fc fe33 	bl	8001b40 <prvTraceSetTaskInstanceFinished>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	3324      	adds	r3, #36	; 0x24
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fe26 	bl	8005b34 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004ee8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004eea:	f000 f91c 	bl	8005126 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004eee:	f000 fbf9 	bl	80056e4 <xTaskResumeAll>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f47f aea2 	bne.w	8004c3e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004efa:	4b09      	ldr	r3, [pc, #36]	; (8004f20 <xQueueReceive+0x370>)
 8004efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	f3bf 8f4f 	dsb	sy
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	e698      	b.n	8004c3e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004f0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f0e:	f000 f90a 	bl	8005126 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004f12:	f000 fbe7 	bl	80056e4 <xTaskResumeAll>
 8004f16:	e692      	b.n	8004c3e <xQueueReceive+0x8e>
 8004f18:	20007a94 	.word	0x20007a94
 8004f1c:	20000004 	.word	0x20000004
 8004f20:	e000ed04 	.word	0xe000ed04
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004f24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f26:	f000 f8fe 	bl	8005126 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004f2a:	f000 fbdb 	bl	80056e4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f30:	f000 f94b 	bl	80051ca <prvIsQueueEmpty>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f43f ae81 	beq.w	8004c3e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004f3c:	f7fb fe6b 	bl	8000c16 <prvTraceGetCurrentTaskHandle>
 8004f40:	4603      	mov	r3, r0
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7fb fde6 	bl	8000b14 <prvTraceGetTaskNumberHigh16>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	4b18      	ldr	r3, [pc, #96]	; (8004fb0 <xQueueReceive+0x400>)
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	4013      	ands	r3, r2
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d025      	beq.n	8004fa4 <xQueueReceive+0x3f4>
 8004f58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f5a:	f7fb fe22 	bl	8000ba2 <prvTraceGetQueueNumberHigh16>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	461a      	mov	r2, r3
 8004f62:	4b13      	ldr	r3, [pc, #76]	; (8004fb0 <xQueueReceive+0x400>)
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	4013      	ands	r3, r2
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d01a      	beq.n	8004fa4 <xQueueReceive+0x3f4>
 8004f6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f70:	f7fb fdb7 	bl	8000ae2 <prvTraceGetQueueType>
 8004f74:	4603      	mov	r3, r0
 8004f76:	461a      	mov	r2, r3
 8004f78:	4b0e      	ldr	r3, [pc, #56]	; (8004fb4 <xQueueReceive+0x404>)
 8004f7a:	5c9b      	ldrb	r3, [r3, r2]
 8004f7c:	3350      	adds	r3, #80	; 0x50
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	461d      	mov	r5, r3
 8004f82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f84:	f7fb fdad 	bl	8000ae2 <prvTraceGetQueueType>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	4b09      	ldr	r3, [pc, #36]	; (8004fb4 <xQueueReceive+0x404>)
 8004f8e:	5c9c      	ldrb	r4, [r3, r2]
 8004f90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f92:	f7fb fdf9 	bl	8000b88 <prvTraceGetQueueNumberLow16>
 8004f96:	4603      	mov	r3, r0
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	4621      	mov	r1, r4
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	f7fc fac0 	bl	8001524 <prvTraceStoreKernelCall>
                return errQUEUE_EMPTY;
 8004fa4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3730      	adds	r7, #48	; 0x30
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bdb0      	pop	{r4, r5, r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	20007a94 	.word	0x20007a94
 8004fb4:	20000004 	.word	0x20000004

08004fb8 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
    {
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <vQueueSetQueueNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vQueueSetQueueNumber( QueueHandle_t xQueue,
                               UBaseType_t uxQueueNumber )
    {
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
        ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	649a      	str	r2, [r3, #72]	; 0x48
    }
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
    {
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->ucQueueType;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    }
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b086      	sub	sp, #24
 800500a:	af00      	add	r7, sp, #0
 800500c:	60f8      	str	r0, [r7, #12]
 800500e:	60b9      	str	r1, [r7, #8]
 8005010:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005012:	2300      	movs	r3, #0
 8005014:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501a:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10d      	bne.n	8005040 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d14d      	bne.n	80050c8 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	4618      	mov	r0, r3
 8005032:	f000 ffcd 	bl	8005fd0 <xTaskPriorityDisinherit>
 8005036:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	609a      	str	r2, [r3, #8]
 800503e:	e043      	b.n	80050c8 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d119      	bne.n	800507a <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6858      	ldr	r0, [r3, #4]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	461a      	mov	r2, r3
 8005050:	68b9      	ldr	r1, [r7, #8]
 8005052:	f002 f865 	bl	8007120 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	441a      	add	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	429a      	cmp	r2, r3
 800506e:	d32b      	bcc.n	80050c8 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	605a      	str	r2, [r3, #4]
 8005078:	e026      	b.n	80050c8 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	68d8      	ldr	r0, [r3, #12]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	461a      	mov	r2, r3
 8005084:	68b9      	ldr	r1, [r7, #8]
 8005086:	f002 f84b 	bl	8007120 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	68da      	ldr	r2, [r3, #12]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	425b      	negs	r3, r3
 8005094:	441a      	add	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d207      	bcs.n	80050b6 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	425b      	negs	r3, r3
 80050b0:	441a      	add	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d105      	bne.n	80050c8 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d002      	beq.n	80050c8 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	3b01      	subs	r3, #1
 80050c6:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80050d0:	697b      	ldr	r3, [r7, #20]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b082      	sub	sp, #8
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
 80050e2:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d018      	beq.n	800511e <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f4:	441a      	add	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	429a      	cmp	r2, r3
 8005104:	d303      	bcc.n	800510e <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68d9      	ldr	r1, [r3, #12]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	461a      	mov	r2, r3
 8005118:	6838      	ldr	r0, [r7, #0]
 800511a:	f002 f801 	bl	8007120 <memcpy>
    }
}
 800511e:	bf00      	nop
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b084      	sub	sp, #16
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800512e:	f001 fca3 	bl	8006a78 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005138:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800513a:	e011      	b.n	8005160 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	2b00      	cmp	r3, #0
 8005142:	d012      	beq.n	800516a <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	3324      	adds	r3, #36	; 0x24
 8005148:	4618      	mov	r0, r3
 800514a:	f000 fd7f 	bl	8005c4c <xTaskRemoveFromEventList>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8005154:	f000 fe66 	bl	8005e24 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005158:	7bfb      	ldrb	r3, [r7, #15]
 800515a:	3b01      	subs	r3, #1
 800515c:	b2db      	uxtb	r3, r3
 800515e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005164:	2b00      	cmp	r3, #0
 8005166:	dce9      	bgt.n	800513c <prvUnlockQueue+0x16>
 8005168:	e000      	b.n	800516c <prvUnlockQueue+0x46>
                        break;
 800516a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	22ff      	movs	r2, #255	; 0xff
 8005170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005174:	f001 fcb0 	bl	8006ad8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005178:	f001 fc7e 	bl	8006a78 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005182:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005184:	e011      	b.n	80051aa <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d012      	beq.n	80051b4 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	3310      	adds	r3, #16
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fd5a 	bl	8005c4c <xTaskRemoveFromEventList>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800519e:	f000 fe41 	bl	8005e24 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80051a2:	7bbb      	ldrb	r3, [r7, #14]
 80051a4:	3b01      	subs	r3, #1
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80051aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	dce9      	bgt.n	8005186 <prvUnlockQueue+0x60>
 80051b2:	e000      	b.n	80051b6 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80051b4:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	22ff      	movs	r2, #255	; 0xff
 80051ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80051be:	f001 fc8b 	bl	8006ad8 <vPortExitCritical>
}
 80051c2:	bf00      	nop
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b084      	sub	sp, #16
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80051d2:	f001 fc51 	bl	8006a78 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d102      	bne.n	80051e4 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80051de:	2301      	movs	r3, #1
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	e001      	b.n	80051e8 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80051e4:	2300      	movs	r3, #0
 80051e6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80051e8:	f001 fc76 	bl	8006ad8 <vPortExitCritical>

    return xReturn;
 80051ec:	68fb      	ldr	r3, [r7, #12]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b084      	sub	sp, #16
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80051fe:	f001 fc3b 	bl	8006a78 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520a:	429a      	cmp	r2, r3
 800520c:	d102      	bne.n	8005214 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800520e:	2301      	movs	r3, #1
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	e001      	b.n	8005218 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005214:	2300      	movs	r3, #0
 8005216:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005218:	f001 fc5e 	bl	8006ad8 <vPortExitCritical>

    return xReturn;
 800521c:	68fb      	ldr	r3, [r7, #12]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005226:	b580      	push	{r7, lr}
 8005228:	b086      	sub	sp, #24
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005236:	f001 fc1f 	bl	8006a78 <vPortEnterCritical>
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005240:	b25b      	sxtb	r3, r3
 8005242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005246:	d103      	bne.n	8005250 <vQueueWaitForMessageRestricted+0x2a>
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005256:	b25b      	sxtb	r3, r3
 8005258:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800525c:	d103      	bne.n	8005266 <vQueueWaitForMessageRestricted+0x40>
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005266:	f001 fc37 	bl	8006ad8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526e:	2b00      	cmp	r3, #0
 8005270:	d106      	bne.n	8005280 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	3324      	adds	r3, #36	; 0x24
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	68b9      	ldr	r1, [r7, #8]
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fc7e 	bl	8005b7c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005280:	6978      	ldr	r0, [r7, #20]
 8005282:	f7ff ff50 	bl	8005126 <prvUnlockQueue>
    }
 8005286:	bf00      	nop
 8005288:	3718      	adds	r7, #24
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800528e:	b580      	push	{r7, lr}
 8005290:	b08c      	sub	sp, #48	; 0x30
 8005292:	af04      	add	r7, sp, #16
 8005294:	60f8      	str	r0, [r7, #12]
 8005296:	60b9      	str	r1, [r7, #8]
 8005298:	603b      	str	r3, [r7, #0]
 800529a:	4613      	mov	r3, r2
 800529c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800529e:	88fb      	ldrh	r3, [r7, #6]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4618      	mov	r0, r3
 80052a4:	f001 fd02 	bl	8006cac <pvPortMalloc>
 80052a8:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00e      	beq.n	80052ce <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052b0:	2058      	movs	r0, #88	; 0x58
 80052b2:	f001 fcfb 	bl	8006cac <pvPortMalloc>
 80052b6:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	631a      	str	r2, [r3, #48]	; 0x30
 80052c4:	e005      	b.n	80052d2 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80052c6:	6978      	ldr	r0, [r7, #20]
 80052c8:	f001 fde0 	bl	8006e8c <vPortFree>
 80052cc:	e001      	b.n	80052d2 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d013      	beq.n	8005300 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052d8:	88fa      	ldrh	r2, [r7, #6]
 80052da:	2300      	movs	r3, #0
 80052dc:	9303      	str	r3, [sp, #12]
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	9302      	str	r3, [sp, #8]
 80052e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e4:	9301      	str	r3, [sp, #4]
 80052e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	68b9      	ldr	r1, [r7, #8]
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 f80e 	bl	8005310 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80052f4:	69f8      	ldr	r0, [r7, #28]
 80052f6:	f000 f8a1 	bl	800543c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80052fa:	2301      	movs	r3, #1
 80052fc:	61bb      	str	r3, [r7, #24]
 80052fe:	e002      	b.n	8005306 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005300:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005304:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005306:	69bb      	ldr	r3, [r7, #24]
    }
 8005308:	4618      	mov	r0, r3
 800530a:	3720      	adds	r7, #32
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b088      	sub	sp, #32
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	461a      	mov	r2, r3
 8005328:	21a5      	movs	r1, #165	; 0xa5
 800532a:	f001 ff07 	bl	800713c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005338:	3b01      	subs	r3, #1
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	f023 0307 	bic.w	r3, r3, #7
 8005346:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <prvInitialiseNewTask+0x58>
        __asm volatile
 8005352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	617b      	str	r3, [r7, #20]
    }
 8005364:	bf00      	nop
 8005366:	e7fe      	b.n	8005366 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d01f      	beq.n	80053ae <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800536e:	2300      	movs	r3, #0
 8005370:	61fb      	str	r3, [r7, #28]
 8005372:	e012      	b.n	800539a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	4413      	add	r3, r2
 800537a:	7819      	ldrb	r1, [r3, #0]
 800537c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	4413      	add	r3, r2
 8005382:	3334      	adds	r3, #52	; 0x34
 8005384:	460a      	mov	r2, r1
 8005386:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	4413      	add	r3, r2
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d006      	beq.n	80053a2 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	3301      	adds	r3, #1
 8005398:	61fb      	str	r3, [r7, #28]
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	2b09      	cmp	r3, #9
 800539e:	d9e9      	bls.n	8005374 <prvInitialiseNewTask+0x64>
 80053a0:	e000      	b.n	80053a4 <prvInitialiseNewTask+0x94>
            {
                break;
 80053a2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80053ac:	e003      	b.n	80053b6 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d901      	bls.n	80053c0 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053bc:	2304      	movs	r3, #4
 80053be:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80053c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053c4:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80053c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053ca:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80053cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ce:	2200      	movs	r2, #0
 80053d0:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d4:	3304      	adds	r3, #4
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fe feb6 	bl	8004148 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053de:	3318      	adds	r3, #24
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fe feb1 	bl	8004148 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ea:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ee:	f1c3 0205 	rsb	r2, r3, #5
 80053f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053fa:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80053fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fe:	3350      	adds	r3, #80	; 0x50
 8005400:	2204      	movs	r2, #4
 8005402:	2100      	movs	r1, #0
 8005404:	4618      	mov	r0, r3
 8005406:	f001 fe99 	bl	800713c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540c:	3354      	adds	r3, #84	; 0x54
 800540e:	2201      	movs	r2, #1
 8005410:	2100      	movs	r1, #0
 8005412:	4618      	mov	r0, r3
 8005414:	f001 fe92 	bl	800713c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	68f9      	ldr	r1, [r7, #12]
 800541c:	69b8      	ldr	r0, [r7, #24]
 800541e:	f001 f9ed 	bl	80067fc <pxPortInitialiseStack>
 8005422:	4602      	mov	r2, r0
 8005424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005426:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800542e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005432:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005434:	bf00      	nop
 8005436:	3720      	adds	r7, #32
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005444:	f001 fb18 	bl	8006a78 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005448:	4b5c      	ldr	r3, [pc, #368]	; (80055bc <prvAddNewTaskToReadyList+0x180>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3301      	adds	r3, #1
 800544e:	4a5b      	ldr	r2, [pc, #364]	; (80055bc <prvAddNewTaskToReadyList+0x180>)
 8005450:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005452:	4b5b      	ldr	r3, [pc, #364]	; (80055c0 <prvAddNewTaskToReadyList+0x184>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d109      	bne.n	800546e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800545a:	4a59      	ldr	r2, [pc, #356]	; (80055c0 <prvAddNewTaskToReadyList+0x184>)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005460:	4b56      	ldr	r3, [pc, #344]	; (80055bc <prvAddNewTaskToReadyList+0x180>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d110      	bne.n	800548a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005468:	f000 fd2a 	bl	8005ec0 <prvInitialiseTaskLists>
 800546c:	e00d      	b.n	800548a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800546e:	4b55      	ldr	r3, [pc, #340]	; (80055c4 <prvAddNewTaskToReadyList+0x188>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d109      	bne.n	800548a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005476:	4b52      	ldr	r3, [pc, #328]	; (80055c0 <prvAddNewTaskToReadyList+0x184>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005480:	429a      	cmp	r2, r3
 8005482:	d802      	bhi.n	800548a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005484:	4a4e      	ldr	r2, [pc, #312]	; (80055c0 <prvAddNewTaskToReadyList+0x184>)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800548a:	4b4f      	ldr	r3, [pc, #316]	; (80055c8 <prvAddNewTaskToReadyList+0x18c>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3301      	adds	r3, #1
 8005490:	4a4d      	ldr	r2, [pc, #308]	; (80055c8 <prvAddNewTaskToReadyList+0x18c>)
 8005492:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005494:	4b4c      	ldr	r3, [pc, #304]	; (80055c8 <prvAddNewTaskToReadyList+0x18c>)
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d048      	beq.n	8005534 <prvAddNewTaskToReadyList+0xf8>
 80054a2:	2003      	movs	r0, #3
 80054a4:	f7fc fbf2 	bl	8001c8c <prvTraceGetObjectHandle>
 80054a8:	4603      	mov	r3, r0
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	4619      	mov	r1, r3
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7fb fb3e 	bl	8000b30 <prvTraceSetTaskNumberLow16>
 80054b4:	4b45      	ldr	r3, [pc, #276]	; (80055cc <prvAddNewTaskToReadyList+0x190>)
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	4619      	mov	r1, r3
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7fb fb4e 	bl	8000b5c <prvTraceSetTaskNumberHigh16>
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f7fb fb1a 	bl	8000afa <prvTraceGetTaskNumberLow16>
 80054c6:	4603      	mov	r3, r0
 80054c8:	b2d9      	uxtb	r1, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	3334      	adds	r3, #52	; 0x34
 80054ce:	461a      	mov	r2, r3
 80054d0:	2003      	movs	r0, #3
 80054d2:	f7fc fccd 	bl	8001e70 <prvTraceSetObjectName>
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7fb fb0f 	bl	8000afa <prvTraceGetTaskNumberLow16>
 80054dc:	4603      	mov	r3, r0
 80054de:	b2d9      	uxtb	r1, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	461a      	mov	r2, r3
 80054e8:	2003      	movs	r0, #3
 80054ea:	f7fc fa37 	bl	800195c <prvTraceSetPriorityProperty>
 80054ee:	f7fb fb92 	bl	8000c16 <prvTraceGetCurrentTaskHandle>
 80054f2:	4603      	mov	r3, r0
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7fb fb0d 	bl	8000b14 <prvTraceGetTaskNumberHigh16>
 80054fa:	4603      	mov	r3, r0
 80054fc:	461a      	mov	r2, r3
 80054fe:	4b34      	ldr	r3, [pc, #208]	; (80055d0 <prvAddNewTaskToReadyList+0x194>)
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	4013      	ands	r3, r2
 8005504:	b29b      	uxth	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d014      	beq.n	8005534 <prvAddNewTaskToReadyList+0xf8>
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7fb fb02 	bl	8000b14 <prvTraceGetTaskNumberHigh16>
 8005510:	4603      	mov	r3, r0
 8005512:	461a      	mov	r2, r3
 8005514:	4b2e      	ldr	r3, [pc, #184]	; (80055d0 <prvAddNewTaskToReadyList+0x194>)
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	4013      	ands	r3, r2
 800551a:	b29b      	uxth	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d009      	beq.n	8005534 <prvAddNewTaskToReadyList+0xf8>
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7fb faea 	bl	8000afa <prvTraceGetTaskNumberLow16>
 8005526:	4603      	mov	r3, r0
 8005528:	b2db      	uxtb	r3, r3
 800552a:	461a      	mov	r2, r3
 800552c:	2103      	movs	r1, #3
 800552e:	201b      	movs	r0, #27
 8005530:	f7fb fff8 	bl	8001524 <prvTraceStoreKernelCall>

        prvAddTaskToReadyList( pxNewTCB );
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f7fb faed 	bl	8000b14 <prvTraceGetTaskNumberHigh16>
 800553a:	4603      	mov	r3, r0
 800553c:	461a      	mov	r2, r3
 800553e:	4b24      	ldr	r3, [pc, #144]	; (80055d0 <prvAddNewTaskToReadyList+0x194>)
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	4013      	ands	r3, r2
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d007      	beq.n	800555a <prvAddNewTaskToReadyList+0x11e>
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fb fad5 	bl	8000afa <prvTraceGetTaskNumberLow16>
 8005550:	4603      	mov	r3, r0
 8005552:	b2db      	uxtb	r3, r3
 8005554:	4618      	mov	r0, r3
 8005556:	f7fb fee9 	bl	800132c <prvTraceStoreTaskReady>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555e:	2201      	movs	r2, #1
 8005560:	409a      	lsls	r2, r3
 8005562:	4b1c      	ldr	r3, [pc, #112]	; (80055d4 <prvAddNewTaskToReadyList+0x198>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4313      	orrs	r3, r2
 8005568:	4a1a      	ldr	r2, [pc, #104]	; (80055d4 <prvAddNewTaskToReadyList+0x198>)
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005570:	4613      	mov	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4a17      	ldr	r2, [pc, #92]	; (80055d8 <prvAddNewTaskToReadyList+0x19c>)
 800557a:	441a      	add	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3304      	adds	r3, #4
 8005580:	4619      	mov	r1, r3
 8005582:	4610      	mov	r0, r2
 8005584:	f7fe fded 	bl	8004162 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005588:	f001 faa6 	bl	8006ad8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800558c:	4b0d      	ldr	r3, [pc, #52]	; (80055c4 <prvAddNewTaskToReadyList+0x188>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00e      	beq.n	80055b2 <prvAddNewTaskToReadyList+0x176>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005594:	4b0a      	ldr	r3, [pc, #40]	; (80055c0 <prvAddNewTaskToReadyList+0x184>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559e:	429a      	cmp	r2, r3
 80055a0:	d207      	bcs.n	80055b2 <prvAddNewTaskToReadyList+0x176>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80055a2:	4b0e      	ldr	r3, [pc, #56]	; (80055dc <prvAddNewTaskToReadyList+0x1a0>)
 80055a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80055b2:	bf00      	nop
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	20000124 	.word	0x20000124
 80055c0:	20000078 	.word	0x20000078
 80055c4:	20000130 	.word	0x20000130
 80055c8:	20000140 	.word	0x20000140
 80055cc:	200093a0 	.word	0x200093a0
 80055d0:	20007a94 	.word	0x20007a94
 80055d4:	2000012c 	.word	0x2000012c
 80055d8:	2000007c 	.word	0x2000007c
 80055dc:	e000ed04 	.word	0xe000ed04

080055e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80055e6:	4b2f      	ldr	r3, [pc, #188]	; (80056a4 <vTaskStartScheduler+0xc4>)
 80055e8:	9301      	str	r3, [sp, #4]
 80055ea:	2300      	movs	r3, #0
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	2300      	movs	r3, #0
 80055f0:	2280      	movs	r2, #128	; 0x80
 80055f2:	492d      	ldr	r1, [pc, #180]	; (80056a8 <vTaskStartScheduler+0xc8>)
 80055f4:	482d      	ldr	r0, [pc, #180]	; (80056ac <vTaskStartScheduler+0xcc>)
 80055f6:	f7ff fe4a 	bl	800528e <xTaskCreate>
 80055fa:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d102      	bne.n	8005608 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8005602:	f000 fdf5 	bl	80061f0 <xTimerCreateTimerTask>
 8005606:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d135      	bne.n	800567a <vTaskStartScheduler+0x9a>
        __asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	60bb      	str	r3, [r7, #8]
    }
 8005620:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8005622:	4b23      	ldr	r3, [pc, #140]	; (80056b0 <vTaskStartScheduler+0xd0>)
 8005624:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005628:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800562a:	4b22      	ldr	r3, [pc, #136]	; (80056b4 <vTaskStartScheduler+0xd4>)
 800562c:	2201      	movs	r2, #1
 800562e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005630:	4b21      	ldr	r3, [pc, #132]	; (80056b8 <vTaskStartScheduler+0xd8>)
 8005632:	2200      	movs	r2, #0
 8005634:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8005636:	4b21      	ldr	r3, [pc, #132]	; (80056bc <vTaskStartScheduler+0xdc>)
 8005638:	2201      	movs	r2, #1
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	f7fb faeb 	bl	8000c16 <prvTraceGetCurrentTaskHandle>
 8005640:	4603      	mov	r3, r0
 8005642:	4618      	mov	r0, r3
 8005644:	f7fb fa66 	bl	8000b14 <prvTraceGetTaskNumberHigh16>
 8005648:	4603      	mov	r3, r0
 800564a:	461a      	mov	r2, r3
 800564c:	4b1c      	ldr	r3, [pc, #112]	; (80056c0 <vTaskStartScheduler+0xe0>)
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	4013      	ands	r3, r2
 8005652:	b29b      	uxth	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00a      	beq.n	800566e <vTaskStartScheduler+0x8e>
 8005658:	f7fb fadd 	bl	8000c16 <prvTraceGetCurrentTaskHandle>
 800565c:	4603      	mov	r3, r0
 800565e:	4618      	mov	r0, r3
 8005660:	f7fb fa4b 	bl	8000afa <prvTraceGetTaskNumberLow16>
 8005664:	4603      	mov	r3, r0
 8005666:	b2db      	uxtb	r3, r3
 8005668:	4618      	mov	r0, r3
 800566a:	f7fc f905 	bl	8001878 <prvTraceStoreTaskswitch>
 800566e:	4b13      	ldr	r3, [pc, #76]	; (80056bc <vTaskStartScheduler+0xdc>)
 8005670:	2202      	movs	r2, #2
 8005672:	601a      	str	r2, [r3, #0]

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005674:	f001 f94e 	bl	8006914 <xPortStartScheduler>
 8005678:	e00e      	b.n	8005698 <vTaskStartScheduler+0xb8>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005680:	d10a      	bne.n	8005698 <vTaskStartScheduler+0xb8>
        __asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	607b      	str	r3, [r7, #4]
    }
 8005694:	bf00      	nop
 8005696:	e7fe      	b.n	8005696 <vTaskStartScheduler+0xb6>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005698:	4b0a      	ldr	r3, [pc, #40]	; (80056c4 <vTaskStartScheduler+0xe4>)
 800569a:	681b      	ldr	r3, [r3, #0]
}
 800569c:	bf00      	nop
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	20000148 	.word	0x20000148
 80056a8:	080085b0 	.word	0x080085b0
 80056ac:	08005e91 	.word	0x08005e91
 80056b0:	20000144 	.word	0x20000144
 80056b4:	20000130 	.word	0x20000130
 80056b8:	20000128 	.word	0x20000128
 80056bc:	2000004c 	.word	0x2000004c
 80056c0:	20007a94 	.word	0x20007a94
 80056c4:	20000018 	.word	0x20000018

080056c8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80056c8:	b480      	push	{r7}
 80056ca:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80056cc:	4b04      	ldr	r3, [pc, #16]	; (80056e0 <vTaskSuspendAll+0x18>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3301      	adds	r3, #1
 80056d2:	4a03      	ldr	r2, [pc, #12]	; (80056e0 <vTaskSuspendAll+0x18>)
 80056d4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80056d6:	bf00      	nop
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	2000014c 	.word	0x2000014c

080056e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80056f2:	4b4b      	ldr	r3, [pc, #300]	; (8005820 <xTaskResumeAll+0x13c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10a      	bne.n	8005710 <xTaskResumeAll+0x2c>
        __asm volatile
 80056fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	603b      	str	r3, [r7, #0]
    }
 800570c:	bf00      	nop
 800570e:	e7fe      	b.n	800570e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005710:	f001 f9b2 	bl	8006a78 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005714:	4b42      	ldr	r3, [pc, #264]	; (8005820 <xTaskResumeAll+0x13c>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3b01      	subs	r3, #1
 800571a:	4a41      	ldr	r2, [pc, #260]	; (8005820 <xTaskResumeAll+0x13c>)
 800571c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800571e:	4b40      	ldr	r3, [pc, #256]	; (8005820 <xTaskResumeAll+0x13c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d174      	bne.n	8005810 <xTaskResumeAll+0x12c>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005726:	4b3f      	ldr	r3, [pc, #252]	; (8005824 <xTaskResumeAll+0x140>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d070      	beq.n	8005810 <xTaskResumeAll+0x12c>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800572e:	e041      	b.n	80057b4 <xTaskResumeAll+0xd0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005730:	4b3d      	ldr	r3, [pc, #244]	; (8005828 <xTaskResumeAll+0x144>)
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	3318      	adds	r3, #24
 800573c:	4618      	mov	r0, r3
 800573e:	f7fe fd6d 	bl	800421c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	3304      	adds	r3, #4
 8005746:	4618      	mov	r0, r3
 8005748:	f7fe fd68 	bl	800421c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f7fb f9e1 	bl	8000b14 <prvTraceGetTaskNumberHigh16>
 8005752:	4603      	mov	r3, r0
 8005754:	461a      	mov	r2, r3
 8005756:	4b35      	ldr	r3, [pc, #212]	; (800582c <xTaskResumeAll+0x148>)
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	4013      	ands	r3, r2
 800575c:	b29b      	uxth	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d007      	beq.n	8005772 <xTaskResumeAll+0x8e>
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f7fb f9c9 	bl	8000afa <prvTraceGetTaskNumberLow16>
 8005768:	4603      	mov	r3, r0
 800576a:	b2db      	uxtb	r3, r3
 800576c:	4618      	mov	r0, r3
 800576e:	f7fb fddd 	bl	800132c <prvTraceStoreTaskReady>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005776:	2201      	movs	r2, #1
 8005778:	409a      	lsls	r2, r3
 800577a:	4b2d      	ldr	r3, [pc, #180]	; (8005830 <xTaskResumeAll+0x14c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4313      	orrs	r3, r2
 8005780:	4a2b      	ldr	r2, [pc, #172]	; (8005830 <xTaskResumeAll+0x14c>)
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005788:	4613      	mov	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4a28      	ldr	r2, [pc, #160]	; (8005834 <xTaskResumeAll+0x150>)
 8005792:	441a      	add	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	3304      	adds	r3, #4
 8005798:	4619      	mov	r1, r3
 800579a:	4610      	mov	r0, r2
 800579c:	f7fe fce1 	bl	8004162 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a4:	4b24      	ldr	r3, [pc, #144]	; (8005838 <xTaskResumeAll+0x154>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d302      	bcc.n	80057b4 <xTaskResumeAll+0xd0>
                    {
                        xYieldPending = pdTRUE;
 80057ae:	4b23      	ldr	r3, [pc, #140]	; (800583c <xTaskResumeAll+0x158>)
 80057b0:	2201      	movs	r2, #1
 80057b2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057b4:	4b1c      	ldr	r3, [pc, #112]	; (8005828 <xTaskResumeAll+0x144>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1b9      	bne.n	8005730 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d001      	beq.n	80057c6 <xTaskResumeAll+0xe2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80057c2:	f000 fbbb 	bl	8005f3c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80057c6:	4b1e      	ldr	r3, [pc, #120]	; (8005840 <xTaskResumeAll+0x15c>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d010      	beq.n	80057f4 <xTaskResumeAll+0x110>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80057d2:	f000 f849 	bl	8005868 <xTaskIncrementTick>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <xTaskResumeAll+0xfe>
                            {
                                xYieldPending = pdTRUE;
 80057dc:	4b17      	ldr	r3, [pc, #92]	; (800583c <xTaskResumeAll+0x158>)
 80057de:	2201      	movs	r2, #1
 80057e0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	3b01      	subs	r3, #1
 80057e6:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1f1      	bne.n	80057d2 <xTaskResumeAll+0xee>

                        xPendedTicks = 0;
 80057ee:	4b14      	ldr	r3, [pc, #80]	; (8005840 <xTaskResumeAll+0x15c>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80057f4:	4b11      	ldr	r3, [pc, #68]	; (800583c <xTaskResumeAll+0x158>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d009      	beq.n	8005810 <xTaskResumeAll+0x12c>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80057fc:	2301      	movs	r3, #1
 80057fe:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005800:	4b10      	ldr	r3, [pc, #64]	; (8005844 <xTaskResumeAll+0x160>)
 8005802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005806:	601a      	str	r2, [r3, #0]
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005810:	f001 f962 	bl	8006ad8 <vPortExitCritical>

    return xAlreadyYielded;
 8005814:	68bb      	ldr	r3, [r7, #8]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	2000014c 	.word	0x2000014c
 8005824:	20000124 	.word	0x20000124
 8005828:	20000110 	.word	0x20000110
 800582c:	20007a94 	.word	0x20007a94
 8005830:	2000012c 	.word	0x2000012c
 8005834:	2000007c 	.word	0x2000007c
 8005838:	20000078 	.word	0x20000078
 800583c:	20000138 	.word	0x20000138
 8005840:	20000134 	.word	0x20000134
 8005844:	e000ed04 	.word	0xe000ed04

08005848 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800584e:	4b05      	ldr	r3, [pc, #20]	; (8005864 <xTaskGetTickCount+0x1c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005854:	687b      	ldr	r3, [r7, #4]
}
 8005856:	4618      	mov	r0, r3
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	20000128 	.word	0x20000128

08005868 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800586e:	2300      	movs	r3, #0
 8005870:	617b      	str	r3, [r7, #20]

    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );
 8005872:	4b65      	ldr	r3, [pc, #404]	; (8005a08 <xTaskIncrementTick+0x1a0>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d003      	beq.n	8005882 <xTaskIncrementTick+0x1a>
 800587a:	4b64      	ldr	r3, [pc, #400]	; (8005a0c <xTaskIncrementTick+0x1a4>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d107      	bne.n	8005892 <xTaskIncrementTick+0x2a>
 8005882:	4b63      	ldr	r3, [pc, #396]	; (8005a10 <xTaskIncrementTick+0x1a8>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3301      	adds	r3, #1
 8005888:	4a61      	ldr	r2, [pc, #388]	; (8005a10 <xTaskIncrementTick+0x1a8>)
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	2000      	movs	r0, #0
 800588e:	f7fc fd39 	bl	8002304 <prvTracePortGetTimeStamp>
 8005892:	4b5d      	ldr	r3, [pc, #372]	; (8005a08 <xTaskIncrementTick+0x1a0>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d106      	bne.n	80058a8 <xTaskIncrementTick+0x40>
 800589a:	4b5e      	ldr	r3, [pc, #376]	; (8005a14 <xTaskIncrementTick+0x1ac>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3301      	adds	r3, #1
 80058a0:	4619      	mov	r1, r3
 80058a2:	2003      	movs	r0, #3
 80058a4:	f7fb ff82 	bl	80017ac <prvTraceStoreKernelCallWithNumericParamOnly>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058a8:	4b57      	ldr	r3, [pc, #348]	; (8005a08 <xTaskIncrementTick+0x1a0>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f040 80a1 	bne.w	80059f4 <xTaskIncrementTick+0x18c>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058b2:	4b58      	ldr	r3, [pc, #352]	; (8005a14 <xTaskIncrementTick+0x1ac>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3301      	adds	r3, #1
 80058b8:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80058ba:	4a56      	ldr	r2, [pc, #344]	; (8005a14 <xTaskIncrementTick+0x1ac>)
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d120      	bne.n	8005908 <xTaskIncrementTick+0xa0>
        {
            taskSWITCH_DELAYED_LISTS();
 80058c6:	4b54      	ldr	r3, [pc, #336]	; (8005a18 <xTaskIncrementTick+0x1b0>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00a      	beq.n	80058e6 <xTaskIncrementTick+0x7e>
        __asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	603b      	str	r3, [r7, #0]
    }
 80058e2:	bf00      	nop
 80058e4:	e7fe      	b.n	80058e4 <xTaskIncrementTick+0x7c>
 80058e6:	4b4c      	ldr	r3, [pc, #304]	; (8005a18 <xTaskIncrementTick+0x1b0>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	4b4b      	ldr	r3, [pc, #300]	; (8005a1c <xTaskIncrementTick+0x1b4>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a49      	ldr	r2, [pc, #292]	; (8005a18 <xTaskIncrementTick+0x1b0>)
 80058f2:	6013      	str	r3, [r2, #0]
 80058f4:	4a49      	ldr	r2, [pc, #292]	; (8005a1c <xTaskIncrementTick+0x1b4>)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6013      	str	r3, [r2, #0]
 80058fa:	4b49      	ldr	r3, [pc, #292]	; (8005a20 <xTaskIncrementTick+0x1b8>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	3301      	adds	r3, #1
 8005900:	4a47      	ldr	r2, [pc, #284]	; (8005a20 <xTaskIncrementTick+0x1b8>)
 8005902:	6013      	str	r3, [r2, #0]
 8005904:	f000 fb1a 	bl	8005f3c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005908:	4b46      	ldr	r3, [pc, #280]	; (8005a24 <xTaskIncrementTick+0x1bc>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	429a      	cmp	r2, r3
 8005910:	d35b      	bcc.n	80059ca <xTaskIncrementTick+0x162>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005912:	4b41      	ldr	r3, [pc, #260]	; (8005a18 <xTaskIncrementTick+0x1b0>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d104      	bne.n	8005926 <xTaskIncrementTick+0xbe>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800591c:	4b41      	ldr	r3, [pc, #260]	; (8005a24 <xTaskIncrementTick+0x1bc>)
 800591e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005922:	601a      	str	r2, [r3, #0]
                    break;
 8005924:	e051      	b.n	80059ca <xTaskIncrementTick+0x162>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005926:	4b3c      	ldr	r3, [pc, #240]	; (8005a18 <xTaskIncrementTick+0x1b0>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	429a      	cmp	r2, r3
 800593c:	d203      	bcs.n	8005946 <xTaskIncrementTick+0xde>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800593e:	4a39      	ldr	r2, [pc, #228]	; (8005a24 <xTaskIncrementTick+0x1bc>)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005944:	e041      	b.n	80059ca <xTaskIncrementTick+0x162>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	3304      	adds	r3, #4
 800594a:	4618      	mov	r0, r3
 800594c:	f7fe fc66 	bl	800421c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005954:	2b00      	cmp	r3, #0
 8005956:	d004      	beq.n	8005962 <xTaskIncrementTick+0xfa>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	3318      	adds	r3, #24
 800595c:	4618      	mov	r0, r3
 800595e:	f7fe fc5d 	bl	800421c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005962:	68b8      	ldr	r0, [r7, #8]
 8005964:	f7fb f8d6 	bl	8000b14 <prvTraceGetTaskNumberHigh16>
 8005968:	4603      	mov	r3, r0
 800596a:	461a      	mov	r2, r3
 800596c:	4b2e      	ldr	r3, [pc, #184]	; (8005a28 <xTaskIncrementTick+0x1c0>)
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	4013      	ands	r3, r2
 8005972:	b29b      	uxth	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	d007      	beq.n	8005988 <xTaskIncrementTick+0x120>
 8005978:	68b8      	ldr	r0, [r7, #8]
 800597a:	f7fb f8be 	bl	8000afa <prvTraceGetTaskNumberLow16>
 800597e:	4603      	mov	r3, r0
 8005980:	b2db      	uxtb	r3, r3
 8005982:	4618      	mov	r0, r3
 8005984:	f7fb fcd2 	bl	800132c <prvTraceStoreTaskReady>
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598c:	2201      	movs	r2, #1
 800598e:	409a      	lsls	r2, r3
 8005990:	4b26      	ldr	r3, [pc, #152]	; (8005a2c <xTaskIncrementTick+0x1c4>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4313      	orrs	r3, r2
 8005996:	4a25      	ldr	r2, [pc, #148]	; (8005a2c <xTaskIncrementTick+0x1c4>)
 8005998:	6013      	str	r3, [r2, #0]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800599e:	4613      	mov	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4a22      	ldr	r2, [pc, #136]	; (8005a30 <xTaskIncrementTick+0x1c8>)
 80059a8:	441a      	add	r2, r3
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	3304      	adds	r3, #4
 80059ae:	4619      	mov	r1, r3
 80059b0:	4610      	mov	r0, r2
 80059b2:	f7fe fbd6 	bl	8004162 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ba:	4b1e      	ldr	r3, [pc, #120]	; (8005a34 <xTaskIncrementTick+0x1cc>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d3a6      	bcc.n	8005912 <xTaskIncrementTick+0xaa>
                            {
                                xSwitchRequired = pdTRUE;
 80059c4:	2301      	movs	r3, #1
 80059c6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059c8:	e7a3      	b.n	8005912 <xTaskIncrementTick+0xaa>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059ca:	4b1a      	ldr	r3, [pc, #104]	; (8005a34 <xTaskIncrementTick+0x1cc>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d0:	4917      	ldr	r1, [pc, #92]	; (8005a30 <xTaskIncrementTick+0x1c8>)
 80059d2:	4613      	mov	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	440b      	add	r3, r1
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d901      	bls.n	80059e6 <xTaskIncrementTick+0x17e>
                {
                    xSwitchRequired = pdTRUE;
 80059e2:	2301      	movs	r3, #1
 80059e4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80059e6:	4b14      	ldr	r3, [pc, #80]	; (8005a38 <xTaskIncrementTick+0x1d0>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d007      	beq.n	80059fe <xTaskIncrementTick+0x196>
                {
                    xSwitchRequired = pdTRUE;
 80059ee:	2301      	movs	r3, #1
 80059f0:	617b      	str	r3, [r7, #20]
 80059f2:	e004      	b.n	80059fe <xTaskIncrementTick+0x196>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80059f4:	4b05      	ldr	r3, [pc, #20]	; (8005a0c <xTaskIncrementTick+0x1a4>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3301      	adds	r3, #1
 80059fa:	4a04      	ldr	r2, [pc, #16]	; (8005a0c <xTaskIncrementTick+0x1a4>)
 80059fc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80059fe:	697b      	ldr	r3, [r7, #20]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	2000014c 	.word	0x2000014c
 8005a0c:	20000134 	.word	0x20000134
 8005a10:	20000040 	.word	0x20000040
 8005a14:	20000128 	.word	0x20000128
 8005a18:	20000108 	.word	0x20000108
 8005a1c:	2000010c 	.word	0x2000010c
 8005a20:	2000013c 	.word	0x2000013c
 8005a24:	20000144 	.word	0x20000144
 8005a28:	20007a94 	.word	0x20007a94
 8005a2c:	2000012c 	.word	0x2000012c
 8005a30:	2000007c 	.word	0x2000007c
 8005a34:	20000078 	.word	0x20000078
 8005a38:	20000138 	.word	0x20000138

08005a3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a42:	4b35      	ldr	r3, [pc, #212]	; (8005b18 <vTaskSwitchContext+0xdc>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005a4a:	4b34      	ldr	r3, [pc, #208]	; (8005b1c <vTaskSwitchContext+0xe0>)
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005a50:	e05e      	b.n	8005b10 <vTaskSwitchContext+0xd4>
        xYieldPending = pdFALSE;
 8005a52:	4b32      	ldr	r3, [pc, #200]	; (8005b1c <vTaskSwitchContext+0xe0>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a58:	4b31      	ldr	r3, [pc, #196]	; (8005b20 <vTaskSwitchContext+0xe4>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	fab3 f383 	clz	r3, r3
 8005a64:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005a66:	7afb      	ldrb	r3, [r7, #11]
 8005a68:	f1c3 031f 	rsb	r3, r3, #31
 8005a6c:	617b      	str	r3, [r7, #20]
 8005a6e:	492d      	ldr	r1, [pc, #180]	; (8005b24 <vTaskSwitchContext+0xe8>)
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	4613      	mov	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4413      	add	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	440b      	add	r3, r1
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10a      	bne.n	8005a98 <vTaskSwitchContext+0x5c>
        __asm volatile
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	607b      	str	r3, [r7, #4]
    }
 8005a94:	bf00      	nop
 8005a96:	e7fe      	b.n	8005a96 <vTaskSwitchContext+0x5a>
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4a20      	ldr	r2, [pc, #128]	; (8005b24 <vTaskSwitchContext+0xe8>)
 8005aa4:	4413      	add	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	605a      	str	r2, [r3, #4]
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	3308      	adds	r3, #8
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d104      	bne.n	8005ac8 <vTaskSwitchContext+0x8c>
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	605a      	str	r2, [r3, #4]
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	4a16      	ldr	r2, [pc, #88]	; (8005b28 <vTaskSwitchContext+0xec>)
 8005ad0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8005ad2:	4b16      	ldr	r3, [pc, #88]	; (8005b2c <vTaskSwitchContext+0xf0>)
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	f7fb f89d 	bl	8000c16 <prvTraceGetCurrentTaskHandle>
 8005adc:	4603      	mov	r3, r0
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fb f818 	bl	8000b14 <prvTraceGetTaskNumberHigh16>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	4b11      	ldr	r3, [pc, #68]	; (8005b30 <vTaskSwitchContext+0xf4>)
 8005aea:	881b      	ldrh	r3, [r3, #0]
 8005aec:	4013      	ands	r3, r2
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00a      	beq.n	8005b0a <vTaskSwitchContext+0xce>
 8005af4:	f7fb f88f 	bl	8000c16 <prvTraceGetCurrentTaskHandle>
 8005af8:	4603      	mov	r3, r0
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fa fffd 	bl	8000afa <prvTraceGetTaskNumberLow16>
 8005b00:	4603      	mov	r3, r0
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fb feb7 	bl	8001878 <prvTraceStoreTaskswitch>
 8005b0a:	4b08      	ldr	r3, [pc, #32]	; (8005b2c <vTaskSwitchContext+0xf0>)
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	601a      	str	r2, [r3, #0]
}
 8005b10:	bf00      	nop
 8005b12:	3718      	adds	r7, #24
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	2000014c 	.word	0x2000014c
 8005b1c:	20000138 	.word	0x20000138
 8005b20:	2000012c 	.word	0x2000012c
 8005b24:	2000007c 	.word	0x2000007c
 8005b28:	20000078 	.word	0x20000078
 8005b2c:	2000004c 	.word	0x2000004c
 8005b30:	20007a94 	.word	0x20007a94

08005b34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10a      	bne.n	8005b5a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	60fb      	str	r3, [r7, #12]
    }
 8005b56:	bf00      	nop
 8005b58:	e7fe      	b.n	8005b58 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b5a:	4b07      	ldr	r3, [pc, #28]	; (8005b78 <vTaskPlaceOnEventList+0x44>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3318      	adds	r3, #24
 8005b60:	4619      	mov	r1, r3
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7fe fb21 	bl	80041aa <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b68:	2101      	movs	r1, #1
 8005b6a:	6838      	ldr	r0, [r7, #0]
 8005b6c:	f000 faec 	bl	8006148 <prvAddCurrentTaskToDelayedList>
}
 8005b70:	bf00      	nop
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	20000078 	.word	0x20000078

08005b7c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10a      	bne.n	8005ba4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	617b      	str	r3, [r7, #20]
    }
 8005ba0:	bf00      	nop
 8005ba2:	e7fe      	b.n	8005ba2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ba4:	4b26      	ldr	r3, [pc, #152]	; (8005c40 <vTaskPlaceOnEventListRestricted+0xc4>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3318      	adds	r3, #24
 8005baa:	4619      	mov	r1, r3
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f7fe fad8 	bl	8004162 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8005bb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bbc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8005bbe:	4b20      	ldr	r3, [pc, #128]	; (8005c40 <vTaskPlaceOnEventListRestricted+0xc4>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7fa ffa6 	bl	8000b14 <prvTraceGetTaskNumberHigh16>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	461a      	mov	r2, r3
 8005bcc:	4b1d      	ldr	r3, [pc, #116]	; (8005c44 <vTaskPlaceOnEventListRestricted+0xc8>)
 8005bce:	881b      	ldrh	r3, [r3, #0]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d011      	beq.n	8005bfc <vTaskPlaceOnEventListRestricted+0x80>
 8005bd8:	4b1b      	ldr	r3, [pc, #108]	; (8005c48 <vTaskPlaceOnEventListRestricted+0xcc>)
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	4413      	add	r3, r2
 8005be0:	4619      	mov	r1, r3
 8005be2:	2088      	movs	r0, #136	; 0x88
 8005be4:	f7fb fde2 	bl	80017ac <prvTraceStoreKernelCallWithNumericParamOnly>
 8005be8:	4b15      	ldr	r3, [pc, #84]	; (8005c40 <vTaskPlaceOnEventListRestricted+0xc4>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7fa ff84 	bl	8000afa <prvTraceGetTaskNumberLow16>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7fb ffa2 	bl	8001b40 <prvTraceSetTaskInstanceFinished>
 8005bfc:	f7fb f80b 	bl	8000c16 <prvTraceGetCurrentTaskHandle>
 8005c00:	4603      	mov	r3, r0
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fa ff86 	bl	8000b14 <prvTraceGetTaskNumberHigh16>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	4b0d      	ldr	r3, [pc, #52]	; (8005c44 <vTaskPlaceOnEventListRestricted+0xc8>)
 8005c0e:	881b      	ldrh	r3, [r3, #0]
 8005c10:	4013      	ands	r3, r2
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00a      	beq.n	8005c2e <vTaskPlaceOnEventListRestricted+0xb2>
 8005c18:	f7fa fffd 	bl	8000c16 <prvTraceGetCurrentTaskHandle>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fa ff6b 	bl	8000afa <prvTraceGetTaskNumberLow16>
 8005c24:	4603      	mov	r3, r0
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7fb ff89 	bl	8001b40 <prvTraceSetTaskInstanceFinished>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c2e:	6879      	ldr	r1, [r7, #4]
 8005c30:	68b8      	ldr	r0, [r7, #8]
 8005c32:	f000 fa89 	bl	8006148 <prvAddCurrentTaskToDelayedList>
    }
 8005c36:	bf00      	nop
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20000078 	.word	0x20000078
 8005c44:	20007a94 	.word	0x20007a94
 8005c48:	20000128 	.word	0x20000128

08005c4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10a      	bne.n	8005c78 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	60fb      	str	r3, [r7, #12]
    }
 8005c74:	bf00      	nop
 8005c76:	e7fe      	b.n	8005c76 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	3318      	adds	r3, #24
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fe facd 	bl	800421c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c82:	4b27      	ldr	r3, [pc, #156]	; (8005d20 <xTaskRemoveFromEventList+0xd4>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d12f      	bne.n	8005cea <xTaskRemoveFromEventList+0x9e>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fe fac4 	bl	800421c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005c94:	6938      	ldr	r0, [r7, #16]
 8005c96:	f7fa ff3d 	bl	8000b14 <prvTraceGetTaskNumberHigh16>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	4b21      	ldr	r3, [pc, #132]	; (8005d24 <xTaskRemoveFromEventList+0xd8>)
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d007      	beq.n	8005cba <xTaskRemoveFromEventList+0x6e>
 8005caa:	6938      	ldr	r0, [r7, #16]
 8005cac:	f7fa ff25 	bl	8000afa <prvTraceGetTaskNumberLow16>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fb fb39 	bl	800132c <prvTraceStoreTaskReady>
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	409a      	lsls	r2, r3
 8005cc2:	4b19      	ldr	r3, [pc, #100]	; (8005d28 <xTaskRemoveFromEventList+0xdc>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	4a17      	ldr	r2, [pc, #92]	; (8005d28 <xTaskRemoveFromEventList+0xdc>)
 8005cca:	6013      	str	r3, [r2, #0]
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4a14      	ldr	r2, [pc, #80]	; (8005d2c <xTaskRemoveFromEventList+0xe0>)
 8005cda:	441a      	add	r2, r3
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	3304      	adds	r3, #4
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	f7fe fa3d 	bl	8004162 <vListInsertEnd>
 8005ce8:	e005      	b.n	8005cf6 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	3318      	adds	r3, #24
 8005cee:	4619      	mov	r1, r3
 8005cf0:	480f      	ldr	r0, [pc, #60]	; (8005d30 <xTaskRemoveFromEventList+0xe4>)
 8005cf2:	f7fe fa36 	bl	8004162 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cfa:	4b0e      	ldr	r3, [pc, #56]	; (8005d34 <xTaskRemoveFromEventList+0xe8>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d905      	bls.n	8005d10 <xTaskRemoveFromEventList+0xc4>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005d04:	2301      	movs	r3, #1
 8005d06:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005d08:	4b0b      	ldr	r3, [pc, #44]	; (8005d38 <xTaskRemoveFromEventList+0xec>)
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	e001      	b.n	8005d14 <xTaskRemoveFromEventList+0xc8>
    }
    else
    {
        xReturn = pdFALSE;
 8005d10:	2300      	movs	r3, #0
 8005d12:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005d14:	697b      	ldr	r3, [r7, #20]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	2000014c 	.word	0x2000014c
 8005d24:	20007a94 	.word	0x20007a94
 8005d28:	2000012c 	.word	0x2000012c
 8005d2c:	2000007c 	.word	0x2000007c
 8005d30:	20000110 	.word	0x20000110
 8005d34:	20000078 	.word	0x20000078
 8005d38:	20000138 	.word	0x20000138

08005d3c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d44:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <vTaskInternalSetTimeOutState+0x24>)
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005d4c:	4b05      	ldr	r3, [pc, #20]	; (8005d64 <vTaskInternalSetTimeOutState+0x28>)
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	605a      	str	r2, [r3, #4]
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	2000013c 	.word	0x2000013c
 8005d64:	20000128 	.word	0x20000128

08005d68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b088      	sub	sp, #32
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10a      	bne.n	8005d8e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7c:	f383 8811 	msr	BASEPRI, r3
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	613b      	str	r3, [r7, #16]
    }
 8005d8a:	bf00      	nop
 8005d8c:	e7fe      	b.n	8005d8c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10a      	bne.n	8005daa <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	60fb      	str	r3, [r7, #12]
    }
 8005da6:	bf00      	nop
 8005da8:	e7fe      	b.n	8005da8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005daa:	f000 fe65 	bl	8006a78 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005dae:	4b1b      	ldr	r3, [pc, #108]	; (8005e1c <xTaskCheckForTimeOut+0xb4>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	617b      	str	r3, [r7, #20]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	4b17      	ldr	r3, [pc, #92]	; (8005e20 <xTaskCheckForTimeOut+0xb8>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d00a      	beq.n	8005de0 <xTaskCheckForTimeOut+0x78>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d305      	bcc.n	8005de0 <xTaskCheckForTimeOut+0x78>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	e015      	b.n	8005e0c <xTaskCheckForTimeOut+0xa4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d20b      	bcs.n	8005e02 <xTaskCheckForTimeOut+0x9a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	1ad2      	subs	r2, r2, r3
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7ff ffa0 	bl	8005d3c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	61fb      	str	r3, [r7, #28]
 8005e00:	e004      	b.n	8005e0c <xTaskCheckForTimeOut+0xa4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2200      	movs	r2, #0
 8005e06:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005e0c:	f000 fe64 	bl	8006ad8 <vPortExitCritical>

    return xReturn;
 8005e10:	69fb      	ldr	r3, [r7, #28]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3720      	adds	r7, #32
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000128 	.word	0x20000128
 8005e20:	2000013c 	.word	0x2000013c

08005e24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e24:	b480      	push	{r7}
 8005e26:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005e28:	4b03      	ldr	r3, [pc, #12]	; (8005e38 <vTaskMissedYield+0x14>)
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]
}
 8005e2e:	bf00      	nop
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	20000138 	.word	0x20000138

08005e3c <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
    {
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
        UBaseType_t uxReturn;
        TCB_t const * pxTCB;

        if( xTask != NULL )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d005      	beq.n	8005e56 <uxTaskGetTaskNumber+0x1a>
        {
            pxTCB = xTask;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	60bb      	str	r3, [r7, #8]
            uxReturn = pxTCB->uxTaskNumber;
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	e001      	b.n	8005e5a <uxTaskGetTaskNumber+0x1e>
        }
        else
        {
            uxReturn = 0U;
 8005e56:	2300      	movs	r3, #0
 8005e58:	60fb      	str	r3, [r7, #12]
        }

        return uxReturn;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
    }
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <vTaskSetTaskNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vTaskSetTaskNumber( TaskHandle_t xTask,
                             const UBaseType_t uxHandle )
    {
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;

        if( xTask != NULL )
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d004      	beq.n	8005e82 <vTaskSetTaskNumber+0x1a>
        {
            pxTCB = xTask;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	60fb      	str	r3, [r7, #12]
            pxTCB->uxTaskNumber = uxHandle;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	645a      	str	r2, [r3, #68]	; 0x44
        }
    }
 8005e82:	bf00      	nop
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
	...

08005e90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005e98:	f000 f848 	bl	8005f2c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e9c:	4b06      	ldr	r3, [pc, #24]	; (8005eb8 <prvIdleTask+0x28>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d9f9      	bls.n	8005e98 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005ea4:	4b05      	ldr	r3, [pc, #20]	; (8005ebc <prvIdleTask+0x2c>)
 8005ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005eb4:	e7f0      	b.n	8005e98 <prvIdleTask+0x8>
 8005eb6:	bf00      	nop
 8005eb8:	2000007c 	.word	0x2000007c
 8005ebc:	e000ed04 	.word	0xe000ed04

08005ec0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	607b      	str	r3, [r7, #4]
 8005eca:	e00c      	b.n	8005ee6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4a0f      	ldr	r2, [pc, #60]	; (8005f14 <prvInitialiseTaskLists+0x54>)
 8005ed8:	4413      	add	r3, r2
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fe f914 	bl	8004108 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	607b      	str	r3, [r7, #4]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b04      	cmp	r3, #4
 8005eea:	d9ef      	bls.n	8005ecc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005eec:	480a      	ldr	r0, [pc, #40]	; (8005f18 <prvInitialiseTaskLists+0x58>)
 8005eee:	f7fe f90b 	bl	8004108 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005ef2:	480a      	ldr	r0, [pc, #40]	; (8005f1c <prvInitialiseTaskLists+0x5c>)
 8005ef4:	f7fe f908 	bl	8004108 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005ef8:	4809      	ldr	r0, [pc, #36]	; (8005f20 <prvInitialiseTaskLists+0x60>)
 8005efa:	f7fe f905 	bl	8004108 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005efe:	4b09      	ldr	r3, [pc, #36]	; (8005f24 <prvInitialiseTaskLists+0x64>)
 8005f00:	4a05      	ldr	r2, [pc, #20]	; (8005f18 <prvInitialiseTaskLists+0x58>)
 8005f02:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f04:	4b08      	ldr	r3, [pc, #32]	; (8005f28 <prvInitialiseTaskLists+0x68>)
 8005f06:	4a05      	ldr	r2, [pc, #20]	; (8005f1c <prvInitialiseTaskLists+0x5c>)
 8005f08:	601a      	str	r2, [r3, #0]
}
 8005f0a:	bf00      	nop
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	2000007c 	.word	0x2000007c
 8005f18:	200000e0 	.word	0x200000e0
 8005f1c:	200000f4 	.word	0x200000f4
 8005f20:	20000110 	.word	0x20000110
 8005f24:	20000108 	.word	0x20000108
 8005f28:	2000010c 	.word	0x2000010c

08005f2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	af00      	add	r7, sp, #0

                prvDeleteTCB( pxTCB );
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005f30:	bf00      	nop
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
	...

08005f3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f40:	4b0a      	ldr	r3, [pc, #40]	; (8005f6c <prvResetNextTaskUnblockTime+0x30>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d104      	bne.n	8005f54 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005f4a:	4b09      	ldr	r3, [pc, #36]	; (8005f70 <prvResetNextTaskUnblockTime+0x34>)
 8005f4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f50:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005f52:	e005      	b.n	8005f60 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f54:	4b05      	ldr	r3, [pc, #20]	; (8005f6c <prvResetNextTaskUnblockTime+0x30>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a04      	ldr	r2, [pc, #16]	; (8005f70 <prvResetNextTaskUnblockTime+0x34>)
 8005f5e:	6013      	str	r3, [r2, #0]
}
 8005f60:	bf00      	nop
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	20000108 	.word	0x20000108
 8005f70:	20000144 	.word	0x20000144

08005f74 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8005f7a:	4b05      	ldr	r3, [pc, #20]	; (8005f90 <xTaskGetCurrentTaskHandle+0x1c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	607b      	str	r3, [r7, #4]

        return xReturn;
 8005f80:	687b      	ldr	r3, [r7, #4]
    }
 8005f82:	4618      	mov	r0, r3
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	20000078 	.word	0x20000078

08005f94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005f9a:	4b0b      	ldr	r3, [pc, #44]	; (8005fc8 <xTaskGetSchedulerState+0x34>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d102      	bne.n	8005fa8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	607b      	str	r3, [r7, #4]
 8005fa6:	e008      	b.n	8005fba <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fa8:	4b08      	ldr	r3, [pc, #32]	; (8005fcc <xTaskGetSchedulerState+0x38>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d102      	bne.n	8005fb6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	607b      	str	r3, [r7, #4]
 8005fb4:	e001      	b.n	8005fba <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005fba:	687b      	ldr	r3, [r7, #4]
    }
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	20000130 	.word	0x20000130
 8005fcc:	2000014c 	.word	0x2000014c

08005fd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005fd0:	b590      	push	{r4, r7, lr}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f000 80a3 	beq.w	800612e <xTaskPriorityDisinherit+0x15e>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005fe8:	4b53      	ldr	r3, [pc, #332]	; (8006138 <xTaskPriorityDisinherit+0x168>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d00a      	beq.n	8006008 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8005ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	60fb      	str	r3, [r7, #12]
    }
 8006004:	bf00      	nop
 8006006:	e7fe      	b.n	8006006 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10a      	bne.n	8006026 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	60bb      	str	r3, [r7, #8]
    }
 8006022:	bf00      	nop
 8006024:	e7fe      	b.n	8006024 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800602a:	1e5a      	subs	r2, r3, #1
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006038:	429a      	cmp	r2, r3
 800603a:	d078      	beq.n	800612e <xTaskPriorityDisinherit+0x15e>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006040:	2b00      	cmp	r3, #0
 8006042:	d174      	bne.n	800612e <xTaskPriorityDisinherit+0x15e>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	3304      	adds	r3, #4
 8006048:	4618      	mov	r0, r3
 800604a:	f7fe f8e7 	bl	800421c <uxListRemove>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10a      	bne.n	800606a <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006058:	2201      	movs	r2, #1
 800605a:	fa02 f303 	lsl.w	r3, r2, r3
 800605e:	43da      	mvns	r2, r3
 8006060:	4b36      	ldr	r3, [pc, #216]	; (800613c <xTaskPriorityDisinherit+0x16c>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4013      	ands	r3, r2
 8006066:	4a35      	ldr	r2, [pc, #212]	; (800613c <xTaskPriorityDisinherit+0x16c>)
 8006068:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800606a:	6938      	ldr	r0, [r7, #16]
 800606c:	f7fa fd52 	bl	8000b14 <prvTraceGetTaskNumberHigh16>
 8006070:	4603      	mov	r3, r0
 8006072:	461a      	mov	r2, r3
 8006074:	4b32      	ldr	r3, [pc, #200]	; (8006140 <xTaskPriorityDisinherit+0x170>)
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	4013      	ands	r3, r2
 800607a:	b29b      	uxth	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d020      	beq.n	80060c2 <xTaskPriorityDisinherit+0xf2>
 8006080:	6938      	ldr	r0, [r7, #16]
 8006082:	f7fa fd3a 	bl	8000afa <prvTraceGetTaskNumberLow16>
 8006086:	4603      	mov	r3, r0
 8006088:	b2db      	uxtb	r3, r3
 800608a:	461c      	mov	r4, r3
 800608c:	6938      	ldr	r0, [r7, #16]
 800608e:	f7fa fd34 	bl	8000afa <prvTraceGetTaskNumberLow16>
 8006092:	4603      	mov	r3, r0
 8006094:	b2db      	uxtb	r3, r3
 8006096:	4619      	mov	r1, r3
 8006098:	2003      	movs	r0, #3
 800609a:	f7fb fc9b 	bl	80019d4 <prvTraceGetPriorityProperty>
 800609e:	4603      	mov	r3, r0
 80060a0:	4622      	mov	r2, r4
 80060a2:	2103      	movs	r1, #3
 80060a4:	208f      	movs	r0, #143	; 0x8f
 80060a6:	f7fb fabb 	bl	8001620 <prvTraceStoreKernelCallWithParam>
 80060aa:	6938      	ldr	r0, [r7, #16]
 80060ac:	f7fa fd25 	bl	8000afa <prvTraceGetTaskNumberLow16>
 80060b0:	4603      	mov	r3, r0
 80060b2:	b2d9      	uxtb	r1, r3
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	461a      	mov	r2, r3
 80060bc:	2003      	movs	r0, #3
 80060be:	f7fb fc4d 	bl	800195c <prvTraceSetPriorityProperty>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ce:	f1c3 0205 	rsb	r2, r3, #5
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80060d6:	6938      	ldr	r0, [r7, #16]
 80060d8:	f7fa fd1c 	bl	8000b14 <prvTraceGetTaskNumberHigh16>
 80060dc:	4603      	mov	r3, r0
 80060de:	461a      	mov	r2, r3
 80060e0:	4b17      	ldr	r3, [pc, #92]	; (8006140 <xTaskPriorityDisinherit+0x170>)
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	4013      	ands	r3, r2
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d007      	beq.n	80060fc <xTaskPriorityDisinherit+0x12c>
 80060ec:	6938      	ldr	r0, [r7, #16]
 80060ee:	f7fa fd04 	bl	8000afa <prvTraceGetTaskNumberLow16>
 80060f2:	4603      	mov	r3, r0
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fb f918 	bl	800132c <prvTraceStoreTaskReady>
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	2201      	movs	r2, #1
 8006102:	409a      	lsls	r2, r3
 8006104:	4b0d      	ldr	r3, [pc, #52]	; (800613c <xTaskPriorityDisinherit+0x16c>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4313      	orrs	r3, r2
 800610a:	4a0c      	ldr	r2, [pc, #48]	; (800613c <xTaskPriorityDisinherit+0x16c>)
 800610c:	6013      	str	r3, [r2, #0]
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006112:	4613      	mov	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4a0a      	ldr	r2, [pc, #40]	; (8006144 <xTaskPriorityDisinherit+0x174>)
 800611c:	441a      	add	r2, r3
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	3304      	adds	r3, #4
 8006122:	4619      	mov	r1, r3
 8006124:	4610      	mov	r0, r2
 8006126:	f7fe f81c 	bl	8004162 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800612a:	2301      	movs	r3, #1
 800612c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800612e:	697b      	ldr	r3, [r7, #20]
    }
 8006130:	4618      	mov	r0, r3
 8006132:	371c      	adds	r7, #28
 8006134:	46bd      	mov	sp, r7
 8006136:	bd90      	pop	{r4, r7, pc}
 8006138:	20000078 	.word	0x20000078
 800613c:	2000012c 	.word	0x2000012c
 8006140:	20007a94 	.word	0x20007a94
 8006144:	2000007c 	.word	0x2000007c

08006148 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006152:	4b21      	ldr	r3, [pc, #132]	; (80061d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006158:	4b20      	ldr	r3, [pc, #128]	; (80061dc <prvAddCurrentTaskToDelayedList+0x94>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3304      	adds	r3, #4
 800615e:	4618      	mov	r0, r3
 8006160:	f7fe f85c 	bl	800421c <uxListRemove>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10b      	bne.n	8006182 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800616a:	4b1c      	ldr	r3, [pc, #112]	; (80061dc <prvAddCurrentTaskToDelayedList+0x94>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006170:	2201      	movs	r2, #1
 8006172:	fa02 f303 	lsl.w	r3, r2, r3
 8006176:	43da      	mvns	r2, r3
 8006178:	4b19      	ldr	r3, [pc, #100]	; (80061e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4013      	ands	r3, r2
 800617e:	4a18      	ldr	r2, [pc, #96]	; (80061e0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006180:	6013      	str	r3, [r2, #0]
    #else /* INCLUDE_vTaskSuspend */
        {
            /* Calculate the time at which the task should be woken if the event
             * does not occur.  This may overflow but this doesn't matter, the kernel
             * will manage it correctly. */
            xTimeToWake = xConstTickCount + xTicksToWait;
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4413      	add	r3, r2
 8006188:	60bb      	str	r3, [r7, #8]

            /* The list item will be inserted in wake time order. */
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800618a:	4b14      	ldr	r3, [pc, #80]	; (80061dc <prvAddCurrentTaskToDelayedList+0x94>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	605a      	str	r2, [r3, #4]

            if( xTimeToWake < xConstTickCount )
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	429a      	cmp	r2, r3
 8006198:	d209      	bcs.n	80061ae <prvAddCurrentTaskToDelayedList+0x66>
            {
                /* Wake time has overflowed.  Place this item in the overflow list. */
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800619a:	4b12      	ldr	r3, [pc, #72]	; (80061e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	4b0f      	ldr	r3, [pc, #60]	; (80061dc <prvAddCurrentTaskToDelayedList+0x94>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3304      	adds	r3, #4
 80061a4:	4619      	mov	r1, r3
 80061a6:	4610      	mov	r0, r2
 80061a8:	f7fd ffff 	bl	80041aa <vListInsert>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80061ac:	e010      	b.n	80061d0 <prvAddCurrentTaskToDelayedList+0x88>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061ae:	4b0e      	ldr	r3, [pc, #56]	; (80061e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	4b0a      	ldr	r3, [pc, #40]	; (80061dc <prvAddCurrentTaskToDelayedList+0x94>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3304      	adds	r3, #4
 80061b8:	4619      	mov	r1, r3
 80061ba:	4610      	mov	r0, r2
 80061bc:	f7fd fff5 	bl	80041aa <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80061c0:	4b0a      	ldr	r3, [pc, #40]	; (80061ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d202      	bcs.n	80061d0 <prvAddCurrentTaskToDelayedList+0x88>
                    xNextTaskUnblockTime = xTimeToWake;
 80061ca:	4a08      	ldr	r2, [pc, #32]	; (80061ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	6013      	str	r3, [r2, #0]
}
 80061d0:	bf00      	nop
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	20000128 	.word	0x20000128
 80061dc:	20000078 	.word	0x20000078
 80061e0:	2000012c 	.word	0x2000012c
 80061e4:	2000010c 	.word	0x2000010c
 80061e8:	20000108 	.word	0x20000108
 80061ec:	20000144 	.word	0x20000144

080061f0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80061f6:	2300      	movs	r3, #0
 80061f8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80061fa:	f000 fad5 	bl	80067a8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80061fe:	4b11      	ldr	r3, [pc, #68]	; (8006244 <xTimerCreateTimerTask+0x54>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <xTimerCreateTimerTask+0x2c>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006206:	4b10      	ldr	r3, [pc, #64]	; (8006248 <xTimerCreateTimerTask+0x58>)
 8006208:	9301      	str	r3, [sp, #4]
 800620a:	2303      	movs	r3, #3
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	2300      	movs	r3, #0
 8006210:	2280      	movs	r2, #128	; 0x80
 8006212:	490e      	ldr	r1, [pc, #56]	; (800624c <xTimerCreateTimerTask+0x5c>)
 8006214:	480e      	ldr	r0, [pc, #56]	; (8006250 <xTimerCreateTimerTask+0x60>)
 8006216:	f7ff f83a 	bl	800528e <xTaskCreate>
 800621a:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10a      	bne.n	8006238 <xTimerCreateTimerTask+0x48>
        __asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	603b      	str	r3, [r7, #0]
    }
 8006234:	bf00      	nop
 8006236:	e7fe      	b.n	8006236 <xTimerCreateTimerTask+0x46>
        return xReturn;
 8006238:	687b      	ldr	r3, [r7, #4]
    }
 800623a:	4618      	mov	r0, r3
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	20000180 	.word	0x20000180
 8006248:	20000184 	.word	0x20000184
 800624c:	080085b8 	.word	0x080085b8
 8006250:	08006389 	.word	0x08006389

08006254 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006254:	b580      	push	{r7, lr}
 8006256:	b08a      	sub	sp, #40	; 0x28
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006262:	2300      	movs	r3, #0
 8006264:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10a      	bne.n	8006282 <xTimerGenericCommand+0x2e>
        __asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	623b      	str	r3, [r7, #32]
    }
 800627e:	bf00      	nop
 8006280:	e7fe      	b.n	8006280 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006282:	4b1a      	ldr	r3, [pc, #104]	; (80062ec <xTimerGenericCommand+0x98>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d02a      	beq.n	80062e0 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	2b05      	cmp	r3, #5
 800629a:	dc18      	bgt.n	80062ce <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800629c:	f7ff fe7a 	bl	8005f94 <xTaskGetSchedulerState>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d109      	bne.n	80062ba <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80062a6:	4b11      	ldr	r3, [pc, #68]	; (80062ec <xTimerGenericCommand+0x98>)
 80062a8:	6818      	ldr	r0, [r3, #0]
 80062aa:	f107 0114 	add.w	r1, r7, #20
 80062ae:	2300      	movs	r3, #0
 80062b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062b2:	f7fe f955 	bl	8004560 <xQueueGenericSend>
 80062b6:	6278      	str	r0, [r7, #36]	; 0x24
 80062b8:	e012      	b.n	80062e0 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80062ba:	4b0c      	ldr	r3, [pc, #48]	; (80062ec <xTimerGenericCommand+0x98>)
 80062bc:	6818      	ldr	r0, [r3, #0]
 80062be:	f107 0114 	add.w	r1, r7, #20
 80062c2:	2300      	movs	r3, #0
 80062c4:	2200      	movs	r2, #0
 80062c6:	f7fe f94b 	bl	8004560 <xQueueGenericSend>
 80062ca:	6278      	str	r0, [r7, #36]	; 0x24
 80062cc:	e008      	b.n	80062e0 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80062ce:	4b07      	ldr	r3, [pc, #28]	; (80062ec <xTimerGenericCommand+0x98>)
 80062d0:	6818      	ldr	r0, [r3, #0]
 80062d2:	f107 0114 	add.w	r1, r7, #20
 80062d6:	2300      	movs	r3, #0
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	f7fe fb4f 	bl	800497c <xQueueGenericSendFromISR>
 80062de:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80062e2:	4618      	mov	r0, r3
 80062e4:	3728      	adds	r7, #40	; 0x28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	20000180 	.word	0x20000180

080062f0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b088      	sub	sp, #32
 80062f4:	af02      	add	r7, sp, #8
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062fa:	4b22      	ldr	r3, [pc, #136]	; (8006384 <prvProcessExpiredTimer+0x94>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	3304      	adds	r3, #4
 8006308:	4618      	mov	r0, r3
 800630a:	f7fd ff87 	bl	800421c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006314:	f003 0304 	and.w	r3, r3, #4
 8006318:	2b00      	cmp	r3, #0
 800631a:	d022      	beq.n	8006362 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	699a      	ldr	r2, [r3, #24]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	18d1      	adds	r1, r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	6978      	ldr	r0, [r7, #20]
 800632a:	f000 f8d1 	bl	80064d0 <prvInsertTimerInActiveList>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d01f      	beq.n	8006374 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006334:	2300      	movs	r3, #0
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	2300      	movs	r3, #0
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	2100      	movs	r1, #0
 800633e:	6978      	ldr	r0, [r7, #20]
 8006340:	f7ff ff88 	bl	8006254 <xTimerGenericCommand>
 8006344:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d113      	bne.n	8006374 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800634c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	60fb      	str	r3, [r7, #12]
    }
 800635e:	bf00      	nop
 8006360:	e7fe      	b.n	8006360 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006368:	f023 0301 	bic.w	r3, r3, #1
 800636c:	b2da      	uxtb	r2, r3
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	6a1b      	ldr	r3, [r3, #32]
 8006378:	6978      	ldr	r0, [r7, #20]
 800637a:	4798      	blx	r3
    }
 800637c:	bf00      	nop
 800637e:	3718      	adds	r7, #24
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	20000178 	.word	0x20000178

08006388 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006390:	f107 0308 	add.w	r3, r7, #8
 8006394:	4618      	mov	r0, r3
 8006396:	f000 f857 	bl	8006448 <prvGetNextExpireTime>
 800639a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	4619      	mov	r1, r3
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 f803 	bl	80063ac <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80063a6:	f000 f8d5 	bl	8006554 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063aa:	e7f1      	b.n	8006390 <prvTimerTask+0x8>

080063ac <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80063b6:	f7ff f987 	bl	80056c8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063ba:	f107 0308 	add.w	r3, r7, #8
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 f866 	bl	8006490 <prvSampleTimeNow>
 80063c4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d130      	bne.n	800642e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10a      	bne.n	80063e8 <prvProcessTimerOrBlockTask+0x3c>
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d806      	bhi.n	80063e8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80063da:	f7ff f983 	bl	80056e4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80063de:	68f9      	ldr	r1, [r7, #12]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7ff ff85 	bl	80062f0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80063e6:	e024      	b.n	8006432 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d008      	beq.n	8006400 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80063ee:	4b13      	ldr	r3, [pc, #76]	; (800643c <prvProcessTimerOrBlockTask+0x90>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <prvProcessTimerOrBlockTask+0x50>
 80063f8:	2301      	movs	r3, #1
 80063fa:	e000      	b.n	80063fe <prvProcessTimerOrBlockTask+0x52>
 80063fc:	2300      	movs	r3, #0
 80063fe:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006400:	4b0f      	ldr	r3, [pc, #60]	; (8006440 <prvProcessTimerOrBlockTask+0x94>)
 8006402:	6818      	ldr	r0, [r3, #0]
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	4619      	mov	r1, r3
 800640e:	f7fe ff0a 	bl	8005226 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006412:	f7ff f967 	bl	80056e4 <xTaskResumeAll>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10a      	bne.n	8006432 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800641c:	4b09      	ldr	r3, [pc, #36]	; (8006444 <prvProcessTimerOrBlockTask+0x98>)
 800641e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	f3bf 8f6f 	isb	sy
    }
 800642c:	e001      	b.n	8006432 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800642e:	f7ff f959 	bl	80056e4 <xTaskResumeAll>
    }
 8006432:	bf00      	nop
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	2000017c 	.word	0x2000017c
 8006440:	20000180 	.word	0x20000180
 8006444:	e000ed04 	.word	0xe000ed04

08006448 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006450:	4b0e      	ldr	r3, [pc, #56]	; (800648c <prvGetNextExpireTime+0x44>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <prvGetNextExpireTime+0x16>
 800645a:	2201      	movs	r2, #1
 800645c:	e000      	b.n	8006460 <prvGetNextExpireTime+0x18>
 800645e:	2200      	movs	r2, #0
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d105      	bne.n	8006478 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800646c:	4b07      	ldr	r3, [pc, #28]	; (800648c <prvGetNextExpireTime+0x44>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	60fb      	str	r3, [r7, #12]
 8006476:	e001      	b.n	800647c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006478:	2300      	movs	r3, #0
 800647a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800647c:	68fb      	ldr	r3, [r7, #12]
    }
 800647e:	4618      	mov	r0, r3
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	20000178 	.word	0x20000178

08006490 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006498:	f7ff f9d6 	bl	8005848 <xTaskGetTickCount>
 800649c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800649e:	4b0b      	ldr	r3, [pc, #44]	; (80064cc <prvSampleTimeNow+0x3c>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d205      	bcs.n	80064b4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80064a8:	f000 f91a 	bl	80066e0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	601a      	str	r2, [r3, #0]
 80064b2:	e002      	b.n	80064ba <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80064ba:	4a04      	ldr	r2, [pc, #16]	; (80064cc <prvSampleTimeNow+0x3c>)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80064c0:	68fb      	ldr	r3, [r7, #12]
    }
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	20000188 	.word	0x20000188

080064d0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80064de:	2300      	movs	r3, #0
 80064e0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80064ee:	68ba      	ldr	r2, [r7, #8]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d812      	bhi.n	800651c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	1ad2      	subs	r2, r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	429a      	cmp	r2, r3
 8006502:	d302      	bcc.n	800650a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006504:	2301      	movs	r3, #1
 8006506:	617b      	str	r3, [r7, #20]
 8006508:	e01b      	b.n	8006542 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800650a:	4b10      	ldr	r3, [pc, #64]	; (800654c <prvInsertTimerInActiveList+0x7c>)
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	3304      	adds	r3, #4
 8006512:	4619      	mov	r1, r3
 8006514:	4610      	mov	r0, r2
 8006516:	f7fd fe48 	bl	80041aa <vListInsert>
 800651a:	e012      	b.n	8006542 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	429a      	cmp	r2, r3
 8006522:	d206      	bcs.n	8006532 <prvInsertTimerInActiveList+0x62>
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	429a      	cmp	r2, r3
 800652a:	d302      	bcc.n	8006532 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800652c:	2301      	movs	r3, #1
 800652e:	617b      	str	r3, [r7, #20]
 8006530:	e007      	b.n	8006542 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006532:	4b07      	ldr	r3, [pc, #28]	; (8006550 <prvInsertTimerInActiveList+0x80>)
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	3304      	adds	r3, #4
 800653a:	4619      	mov	r1, r3
 800653c:	4610      	mov	r0, r2
 800653e:	f7fd fe34 	bl	80041aa <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006542:	697b      	ldr	r3, [r7, #20]
    }
 8006544:	4618      	mov	r0, r3
 8006546:	3718      	adds	r7, #24
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	2000017c 	.word	0x2000017c
 8006550:	20000178 	.word	0x20000178

08006554 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006554:	b580      	push	{r7, lr}
 8006556:	b08c      	sub	sp, #48	; 0x30
 8006558:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800655a:	e0ae      	b.n	80066ba <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2b00      	cmp	r3, #0
 8006560:	f2c0 80aa 	blt.w	80066b8 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d004      	beq.n	800657a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	3304      	adds	r3, #4
 8006574:	4618      	mov	r0, r3
 8006576:	f7fd fe51 	bl	800421c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800657a:	1d3b      	adds	r3, r7, #4
 800657c:	4618      	mov	r0, r3
 800657e:	f7ff ff87 	bl	8006490 <prvSampleTimeNow>
 8006582:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2b09      	cmp	r3, #9
 8006588:	f200 8097 	bhi.w	80066ba <prvProcessReceivedCommands+0x166>
 800658c:	a201      	add	r2, pc, #4	; (adr r2, 8006594 <prvProcessReceivedCommands+0x40>)
 800658e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006592:	bf00      	nop
 8006594:	080065bd 	.word	0x080065bd
 8006598:	080065bd 	.word	0x080065bd
 800659c:	080065bd 	.word	0x080065bd
 80065a0:	08006631 	.word	0x08006631
 80065a4:	08006645 	.word	0x08006645
 80065a8:	0800668f 	.word	0x0800668f
 80065ac:	080065bd 	.word	0x080065bd
 80065b0:	080065bd 	.word	0x080065bd
 80065b4:	08006631 	.word	0x08006631
 80065b8:	08006645 	.word	0x08006645
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065c2:	f043 0301 	orr.w	r3, r3, #1
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	18d1      	adds	r1, r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6a3a      	ldr	r2, [r7, #32]
 80065da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065dc:	f7ff ff78 	bl	80064d0 <prvInsertTimerInActiveList>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d069      	beq.n	80066ba <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065ec:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065f4:	f003 0304 	and.w	r3, r3, #4
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d05e      	beq.n	80066ba <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	441a      	add	r2, r3
 8006604:	2300      	movs	r3, #0
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	2300      	movs	r3, #0
 800660a:	2100      	movs	r1, #0
 800660c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800660e:	f7ff fe21 	bl	8006254 <xTimerGenericCommand>
 8006612:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d14f      	bne.n	80066ba <prvProcessReceivedCommands+0x166>
        __asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	61bb      	str	r3, [r7, #24]
    }
 800662c:	bf00      	nop
 800662e:	e7fe      	b.n	800662e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006636:	f023 0301 	bic.w	r3, r3, #1
 800663a:	b2da      	uxtb	r2, r3
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006642:	e03a      	b.n	80066ba <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800664a:	f043 0301 	orr.w	r3, r3, #1
 800664e:	b2da      	uxtb	r2, r3
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10a      	bne.n	800667a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8006664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006668:	f383 8811 	msr	BASEPRI, r3
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	617b      	str	r3, [r7, #20]
    }
 8006676:	bf00      	nop
 8006678:	e7fe      	b.n	8006678 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667c:	699a      	ldr	r2, [r3, #24]
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	18d1      	adds	r1, r2, r3
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	6a3a      	ldr	r2, [r7, #32]
 8006686:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006688:	f7ff ff22 	bl	80064d0 <prvInsertTimerInActiveList>
                        break;
 800668c:	e015      	b.n	80066ba <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006690:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d103      	bne.n	80066a4 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800669c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800669e:	f000 fbf5 	bl	8006e8c <vPortFree>
 80066a2:	e00a      	b.n	80066ba <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066aa:	f023 0301 	bic.w	r3, r3, #1
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80066b6:	e000      	b.n	80066ba <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80066b8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066ba:	4b08      	ldr	r3, [pc, #32]	; (80066dc <prvProcessReceivedCommands+0x188>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f107 0108 	add.w	r1, r7, #8
 80066c2:	2200      	movs	r2, #0
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fe fa73 	bl	8004bb0 <xQueueReceive>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f47f af45 	bne.w	800655c <prvProcessReceivedCommands+0x8>
        }
    }
 80066d2:	bf00      	nop
 80066d4:	bf00      	nop
 80066d6:	3728      	adds	r7, #40	; 0x28
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	20000180 	.word	0x20000180

080066e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b088      	sub	sp, #32
 80066e4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066e6:	e048      	b.n	800677a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066e8:	4b2d      	ldr	r3, [pc, #180]	; (80067a0 <prvSwitchTimerLists+0xc0>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066f2:	4b2b      	ldr	r3, [pc, #172]	; (80067a0 <prvSwitchTimerLists+0xc0>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	3304      	adds	r3, #4
 8006700:	4618      	mov	r0, r3
 8006702:	f7fd fd8b 	bl	800421c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b00      	cmp	r3, #0
 800671a:	d02e      	beq.n	800677a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	4413      	add	r3, r2
 8006724:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	429a      	cmp	r2, r3
 800672c:	d90e      	bls.n	800674c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800673a:	4b19      	ldr	r3, [pc, #100]	; (80067a0 <prvSwitchTimerLists+0xc0>)
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3304      	adds	r3, #4
 8006742:	4619      	mov	r1, r3
 8006744:	4610      	mov	r0, r2
 8006746:	f7fd fd30 	bl	80041aa <vListInsert>
 800674a:	e016      	b.n	800677a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800674c:	2300      	movs	r3, #0
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	2300      	movs	r3, #0
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	2100      	movs	r1, #0
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f7ff fd7c 	bl	8006254 <xTimerGenericCommand>
 800675c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10a      	bne.n	800677a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8006764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	603b      	str	r3, [r7, #0]
    }
 8006776:	bf00      	nop
 8006778:	e7fe      	b.n	8006778 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800677a:	4b09      	ldr	r3, [pc, #36]	; (80067a0 <prvSwitchTimerLists+0xc0>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1b1      	bne.n	80066e8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006784:	4b06      	ldr	r3, [pc, #24]	; (80067a0 <prvSwitchTimerLists+0xc0>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800678a:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <prvSwitchTimerLists+0xc4>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a04      	ldr	r2, [pc, #16]	; (80067a0 <prvSwitchTimerLists+0xc0>)
 8006790:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006792:	4a04      	ldr	r2, [pc, #16]	; (80067a4 <prvSwitchTimerLists+0xc4>)
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	6013      	str	r3, [r2, #0]
    }
 8006798:	bf00      	nop
 800679a:	3718      	adds	r7, #24
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	20000178 	.word	0x20000178
 80067a4:	2000017c 	.word	0x2000017c

080067a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80067a8:	b580      	push	{r7, lr}
 80067aa:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80067ac:	f000 f964 	bl	8006a78 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80067b0:	4b0d      	ldr	r3, [pc, #52]	; (80067e8 <prvCheckForValidListAndQueue+0x40>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d113      	bne.n	80067e0 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 80067b8:	480c      	ldr	r0, [pc, #48]	; (80067ec <prvCheckForValidListAndQueue+0x44>)
 80067ba:	f7fd fca5 	bl	8004108 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80067be:	480c      	ldr	r0, [pc, #48]	; (80067f0 <prvCheckForValidListAndQueue+0x48>)
 80067c0:	f7fd fca2 	bl	8004108 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80067c4:	4b0b      	ldr	r3, [pc, #44]	; (80067f4 <prvCheckForValidListAndQueue+0x4c>)
 80067c6:	4a09      	ldr	r2, [pc, #36]	; (80067ec <prvCheckForValidListAndQueue+0x44>)
 80067c8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80067ca:	4b0b      	ldr	r3, [pc, #44]	; (80067f8 <prvCheckForValidListAndQueue+0x50>)
 80067cc:	4a08      	ldr	r2, [pc, #32]	; (80067f0 <prvCheckForValidListAndQueue+0x48>)
 80067ce:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80067d0:	2200      	movs	r2, #0
 80067d2:	210c      	movs	r1, #12
 80067d4:	2005      	movs	r0, #5
 80067d6:	f7fd fdb3 	bl	8004340 <xQueueGenericCreate>
 80067da:	4603      	mov	r3, r0
 80067dc:	4a02      	ldr	r2, [pc, #8]	; (80067e8 <prvCheckForValidListAndQueue+0x40>)
 80067de:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80067e0:	f000 f97a 	bl	8006ad8 <vPortExitCritical>
    }
 80067e4:	bf00      	nop
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	20000180 	.word	0x20000180
 80067ec:	20000150 	.word	0x20000150
 80067f0:	20000164 	.word	0x20000164
 80067f4:	20000178 	.word	0x20000178
 80067f8:	2000017c 	.word	0x2000017c

080067fc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	3b04      	subs	r3, #4
 800680c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006814:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	3b04      	subs	r3, #4
 800681a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f023 0201 	bic.w	r2, r3, #1
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	3b04      	subs	r3, #4
 800682a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800682c:	4a0c      	ldr	r2, [pc, #48]	; (8006860 <pxPortInitialiseStack+0x64>)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	3b14      	subs	r3, #20
 8006836:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	3b04      	subs	r3, #4
 8006842:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f06f 0202 	mvn.w	r2, #2
 800684a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3b20      	subs	r3, #32
 8006850:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006852:	68fb      	ldr	r3, [r7, #12]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	08006865 	.word	0x08006865

08006864 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800686a:	2300      	movs	r3, #0
 800686c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800686e:	4b12      	ldr	r3, [pc, #72]	; (80068b8 <prvTaskExitError+0x54>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006876:	d00a      	beq.n	800688e <prvTaskExitError+0x2a>
        __asm volatile
 8006878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	60fb      	str	r3, [r7, #12]
    }
 800688a:	bf00      	nop
 800688c:	e7fe      	b.n	800688c <prvTaskExitError+0x28>
        __asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	60bb      	str	r3, [r7, #8]
    }
 80068a0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80068a2:	bf00      	nop
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d0fc      	beq.n	80068a4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80068aa:	bf00      	nop
 80068ac:	bf00      	nop
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	2000001c 	.word	0x2000001c
 80068bc:	00000000 	.word	0x00000000

080068c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80068c0:	4b07      	ldr	r3, [pc, #28]	; (80068e0 <pxCurrentTCBConst2>)
 80068c2:	6819      	ldr	r1, [r3, #0]
 80068c4:	6808      	ldr	r0, [r1, #0]
 80068c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ca:	f380 8809 	msr	PSP, r0
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	f04f 0000 	mov.w	r0, #0
 80068d6:	f380 8811 	msr	BASEPRI, r0
 80068da:	4770      	bx	lr
 80068dc:	f3af 8000 	nop.w

080068e0 <pxCurrentTCBConst2>:
 80068e0:	20000078 	.word	0x20000078
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop

080068e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80068e8:	4808      	ldr	r0, [pc, #32]	; (800690c <prvPortStartFirstTask+0x24>)
 80068ea:	6800      	ldr	r0, [r0, #0]
 80068ec:	6800      	ldr	r0, [r0, #0]
 80068ee:	f380 8808 	msr	MSP, r0
 80068f2:	f04f 0000 	mov.w	r0, #0
 80068f6:	f380 8814 	msr	CONTROL, r0
 80068fa:	b662      	cpsie	i
 80068fc:	b661      	cpsie	f
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	df00      	svc	0
 8006908:	bf00      	nop
 800690a:	0000      	.short	0x0000
 800690c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006910:	bf00      	nop
 8006912:	bf00      	nop

08006914 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b088      	sub	sp, #32
 8006918:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800691a:	4b4e      	ldr	r3, [pc, #312]	; (8006a54 <xPortStartScheduler+0x140>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a4e      	ldr	r2, [pc, #312]	; (8006a58 <xPortStartScheduler+0x144>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d10a      	bne.n	800693a <xPortStartScheduler+0x26>
        __asm volatile
 8006924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	61bb      	str	r3, [r7, #24]
    }
 8006936:	bf00      	nop
 8006938:	e7fe      	b.n	8006938 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800693a:	4b46      	ldr	r3, [pc, #280]	; (8006a54 <xPortStartScheduler+0x140>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a47      	ldr	r2, [pc, #284]	; (8006a5c <xPortStartScheduler+0x148>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d10a      	bne.n	800695a <xPortStartScheduler+0x46>
        __asm volatile
 8006944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	617b      	str	r3, [r7, #20]
    }
 8006956:	bf00      	nop
 8006958:	e7fe      	b.n	8006958 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800695a:	4b41      	ldr	r3, [pc, #260]	; (8006a60 <xPortStartScheduler+0x14c>)
 800695c:	61fb      	str	r3, [r7, #28]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	b2db      	uxtb	r3, r3
 8006964:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	22ff      	movs	r2, #255	; 0xff
 800696a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	b2db      	uxtb	r3, r3
 8006972:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006974:	79fb      	ldrb	r3, [r7, #7]
 8006976:	b2db      	uxtb	r3, r3
 8006978:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800697c:	b2da      	uxtb	r2, r3
 800697e:	4b39      	ldr	r3, [pc, #228]	; (8006a64 <xPortStartScheduler+0x150>)
 8006980:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006982:	4b39      	ldr	r3, [pc, #228]	; (8006a68 <xPortStartScheduler+0x154>)
 8006984:	2207      	movs	r2, #7
 8006986:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006988:	e009      	b.n	800699e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800698a:	4b37      	ldr	r3, [pc, #220]	; (8006a68 <xPortStartScheduler+0x154>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3b01      	subs	r3, #1
 8006990:	4a35      	ldr	r2, [pc, #212]	; (8006a68 <xPortStartScheduler+0x154>)
 8006992:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006994:	79fb      	ldrb	r3, [r7, #7]
 8006996:	b2db      	uxtb	r3, r3
 8006998:	005b      	lsls	r3, r3, #1
 800699a:	b2db      	uxtb	r3, r3
 800699c:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800699e:	79fb      	ldrb	r3, [r7, #7]
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a6:	2b80      	cmp	r3, #128	; 0x80
 80069a8:	d0ef      	beq.n	800698a <xPortStartScheduler+0x76>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 80069aa:	4b2f      	ldr	r3, [pc, #188]	; (8006a68 <xPortStartScheduler+0x154>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f1c3 0307 	rsb	r3, r3, #7
 80069b2:	2b04      	cmp	r3, #4
 80069b4:	d00a      	beq.n	80069cc <xPortStartScheduler+0xb8>
        __asm volatile
 80069b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ba:	f383 8811 	msr	BASEPRI, r3
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	f3bf 8f4f 	dsb	sy
 80069c6:	613b      	str	r3, [r7, #16]
    }
 80069c8:	bf00      	nop
 80069ca:	e7fe      	b.n	80069ca <xPortStartScheduler+0xb6>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80069cc:	4b26      	ldr	r3, [pc, #152]	; (8006a68 <xPortStartScheduler+0x154>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f1c3 0307 	rsb	r3, r3, #7
 80069d4:	2b04      	cmp	r3, #4
 80069d6:	d00a      	beq.n	80069ee <xPortStartScheduler+0xda>
        __asm volatile
 80069d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	60fb      	str	r3, [r7, #12]
    }
 80069ea:	bf00      	nop
 80069ec:	e7fe      	b.n	80069ec <xPortStartScheduler+0xd8>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80069ee:	4b1e      	ldr	r3, [pc, #120]	; (8006a68 <xPortStartScheduler+0x154>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	021b      	lsls	r3, r3, #8
 80069f4:	4a1c      	ldr	r2, [pc, #112]	; (8006a68 <xPortStartScheduler+0x154>)
 80069f6:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069f8:	4b1b      	ldr	r3, [pc, #108]	; (8006a68 <xPortStartScheduler+0x154>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a00:	4a19      	ldr	r2, [pc, #100]	; (8006a68 <xPortStartScheduler+0x154>)
 8006a02:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006a0c:	4b17      	ldr	r3, [pc, #92]	; (8006a6c <xPortStartScheduler+0x158>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a16      	ldr	r2, [pc, #88]	; (8006a6c <xPortStartScheduler+0x158>)
 8006a12:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a16:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006a18:	4b14      	ldr	r3, [pc, #80]	; (8006a6c <xPortStartScheduler+0x158>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a13      	ldr	r2, [pc, #76]	; (8006a6c <xPortStartScheduler+0x158>)
 8006a1e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a22:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006a24:	f000 f8da 	bl	8006bdc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006a28:	4b11      	ldr	r3, [pc, #68]	; (8006a70 <xPortStartScheduler+0x15c>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006a2e:	f000 f8f1 	bl	8006c14 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a32:	4b10      	ldr	r3, [pc, #64]	; (8006a74 <xPortStartScheduler+0x160>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a0f      	ldr	r2, [pc, #60]	; (8006a74 <xPortStartScheduler+0x160>)
 8006a38:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a3c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006a3e:	f7ff ff53 	bl	80068e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006a42:	f7fe fffb 	bl	8005a3c <vTaskSwitchContext>
    prvTaskExitError();
 8006a46:	f7ff ff0d 	bl	8006864 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3720      	adds	r7, #32
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	e000ed00 	.word	0xe000ed00
 8006a58:	410fc271 	.word	0x410fc271
 8006a5c:	410fc270 	.word	0x410fc270
 8006a60:	e000e400 	.word	0xe000e400
 8006a64:	2000018c 	.word	0x2000018c
 8006a68:	20000190 	.word	0x20000190
 8006a6c:	e000ed20 	.word	0xe000ed20
 8006a70:	2000001c 	.word	0x2000001c
 8006a74:	e000ef34 	.word	0xe000ef34

08006a78 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
        __asm volatile
 8006a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a82:	f383 8811 	msr	BASEPRI, r3
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	607b      	str	r3, [r7, #4]
    }
 8006a90:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006a92:	4b0f      	ldr	r3, [pc, #60]	; (8006ad0 <vPortEnterCritical+0x58>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3301      	adds	r3, #1
 8006a98:	4a0d      	ldr	r2, [pc, #52]	; (8006ad0 <vPortEnterCritical+0x58>)
 8006a9a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006a9c:	4b0c      	ldr	r3, [pc, #48]	; (8006ad0 <vPortEnterCritical+0x58>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d10f      	bne.n	8006ac4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006aa4:	4b0b      	ldr	r3, [pc, #44]	; (8006ad4 <vPortEnterCritical+0x5c>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00a      	beq.n	8006ac4 <vPortEnterCritical+0x4c>
        __asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	603b      	str	r3, [r7, #0]
    }
 8006ac0:	bf00      	nop
 8006ac2:	e7fe      	b.n	8006ac2 <vPortEnterCritical+0x4a>
    }
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	2000001c 	.word	0x2000001c
 8006ad4:	e000ed04 	.word	0xe000ed04

08006ad8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006ade:	4b12      	ldr	r3, [pc, #72]	; (8006b28 <vPortExitCritical+0x50>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10a      	bne.n	8006afc <vPortExitCritical+0x24>
        __asm volatile
 8006ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	607b      	str	r3, [r7, #4]
    }
 8006af8:	bf00      	nop
 8006afa:	e7fe      	b.n	8006afa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006afc:	4b0a      	ldr	r3, [pc, #40]	; (8006b28 <vPortExitCritical+0x50>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3b01      	subs	r3, #1
 8006b02:	4a09      	ldr	r2, [pc, #36]	; (8006b28 <vPortExitCritical+0x50>)
 8006b04:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006b06:	4b08      	ldr	r3, [pc, #32]	; (8006b28 <vPortExitCritical+0x50>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d105      	bne.n	8006b1a <vPortExitCritical+0x42>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	f383 8811 	msr	BASEPRI, r3
    }
 8006b18:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006b1a:	bf00      	nop
 8006b1c:	370c      	adds	r7, #12
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	2000001c 	.word	0x2000001c
 8006b2c:	00000000 	.word	0x00000000

08006b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006b30:	f3ef 8009 	mrs	r0, PSP
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	4b15      	ldr	r3, [pc, #84]	; (8006b90 <pxCurrentTCBConst>)
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	f01e 0f10 	tst.w	lr, #16
 8006b40:	bf08      	it	eq
 8006b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4a:	6010      	str	r0, [r2, #0]
 8006b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b54:	f380 8811 	msr	BASEPRI, r0
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f7fe ff6c 	bl	8005a3c <vTaskSwitchContext>
 8006b64:	f04f 0000 	mov.w	r0, #0
 8006b68:	f380 8811 	msr	BASEPRI, r0
 8006b6c:	bc09      	pop	{r0, r3}
 8006b6e:	6819      	ldr	r1, [r3, #0]
 8006b70:	6808      	ldr	r0, [r1, #0]
 8006b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b76:	f01e 0f10 	tst.w	lr, #16
 8006b7a:	bf08      	it	eq
 8006b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b80:	f380 8809 	msr	PSP, r0
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	f3af 8000 	nop.w

08006b90 <pxCurrentTCBConst>:
 8006b90:	20000078 	.word	0x20000078
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006b94:	bf00      	nop
 8006b96:	bf00      	nop

08006b98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
        __asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	607b      	str	r3, [r7, #4]
    }
 8006bb0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006bb2:	f7fe fe59 	bl	8005868 <xTaskIncrementTick>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bbc:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <SysTick_Handler+0x40>)
 8006bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	f383 8811 	msr	BASEPRI, r3
    }
 8006bce:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8006bd0:	bf00      	nop
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	e000ed04 	.word	0xe000ed04

08006bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006bdc:	b480      	push	{r7}
 8006bde:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006be0:	4b08      	ldr	r3, [pc, #32]	; (8006c04 <vPortSetupTimerInterrupt+0x28>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006be6:	4b08      	ldr	r3, [pc, #32]	; (8006c08 <vPortSetupTimerInterrupt+0x2c>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006bec:	4b07      	ldr	r3, [pc, #28]	; (8006c0c <vPortSetupTimerInterrupt+0x30>)
 8006bee:	4a08      	ldr	r2, [pc, #32]	; (8006c10 <vPortSetupTimerInterrupt+0x34>)
 8006bf0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bf2:	4b04      	ldr	r3, [pc, #16]	; (8006c04 <vPortSetupTimerInterrupt+0x28>)
 8006bf4:	2207      	movs	r2, #7
 8006bf6:	601a      	str	r2, [r3, #0]
}
 8006bf8:	bf00      	nop
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	e000e010 	.word	0xe000e010
 8006c08:	e000e018 	.word	0xe000e018
 8006c0c:	e000e014 	.word	0xe000e014
 8006c10:	0001387f 	.word	0x0001387f

08006c14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006c14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006c24 <vPortEnableVFP+0x10>
 8006c18:	6801      	ldr	r1, [r0, #0]
 8006c1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006c1e:	6001      	str	r1, [r0, #0]
 8006c20:	4770      	bx	lr
 8006c22:	0000      	.short	0x0000
 8006c24:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006c28:	bf00      	nop
 8006c2a:	bf00      	nop

08006c2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006c32:	f3ef 8305 	mrs	r3, IPSR
 8006c36:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2b0f      	cmp	r3, #15
 8006c3c:	d914      	bls.n	8006c68 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c3e:	4a17      	ldr	r2, [pc, #92]	; (8006c9c <vPortValidateInterruptPriority+0x70>)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4413      	add	r3, r2
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c48:	4b15      	ldr	r3, [pc, #84]	; (8006ca0 <vPortValidateInterruptPriority+0x74>)
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	7afa      	ldrb	r2, [r7, #11]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d20a      	bcs.n	8006c68 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8006c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c56:	f383 8811 	msr	BASEPRI, r3
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	607b      	str	r3, [r7, #4]
    }
 8006c64:	bf00      	nop
 8006c66:	e7fe      	b.n	8006c66 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c68:	4b0e      	ldr	r3, [pc, #56]	; (8006ca4 <vPortValidateInterruptPriority+0x78>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c70:	4b0d      	ldr	r3, [pc, #52]	; (8006ca8 <vPortValidateInterruptPriority+0x7c>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d90a      	bls.n	8006c8e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8006c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7c:	f383 8811 	msr	BASEPRI, r3
 8006c80:	f3bf 8f6f 	isb	sy
 8006c84:	f3bf 8f4f 	dsb	sy
 8006c88:	603b      	str	r3, [r7, #0]
    }
 8006c8a:	bf00      	nop
 8006c8c:	e7fe      	b.n	8006c8c <vPortValidateInterruptPriority+0x60>
    }
 8006c8e:	bf00      	nop
 8006c90:	3714      	adds	r7, #20
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	e000e3f0 	.word	0xe000e3f0
 8006ca0:	2000018c 	.word	0x2000018c
 8006ca4:	e000ed0c 	.word	0xe000ed0c
 8006ca8:	20000190 	.word	0x20000190

08006cac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b08a      	sub	sp, #40	; 0x28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8006cb8:	f7fe fd06 	bl	80056c8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006cbc:	4b6d      	ldr	r3, [pc, #436]	; (8006e74 <pvPortMalloc+0x1c8>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006cc4:	f000 f94c 	bl	8006f60 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006cc8:	4b6b      	ldr	r3, [pc, #428]	; (8006e78 <pvPortMalloc+0x1cc>)
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4013      	ands	r3, r2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f040 80a7 	bne.w	8006e24 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d02d      	beq.n	8006d38 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8006cdc:	2208      	movs	r2, #8
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d227      	bcs.n	8006d38 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8006ce8:	2208      	movs	r2, #8
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4413      	add	r3, r2
 8006cee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f003 0307 	and.w	r3, r3, #7
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d021      	beq.n	8006d3e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f023 0307 	bic.w	r3, r3, #7
 8006d00:	3308      	adds	r3, #8
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d214      	bcs.n	8006d32 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f023 0307 	bic.w	r3, r3, #7
 8006d0e:	3308      	adds	r3, #8
 8006d10:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f003 0307 	and.w	r3, r3, #7
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d010      	beq.n	8006d3e <pvPortMalloc+0x92>
        __asm volatile
 8006d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d20:	f383 8811 	msr	BASEPRI, r3
 8006d24:	f3bf 8f6f 	isb	sy
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	617b      	str	r3, [r7, #20]
    }
 8006d2e:	bf00      	nop
 8006d30:	e7fe      	b.n	8006d30 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8006d32:	2300      	movs	r3, #0
 8006d34:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d36:	e002      	b.n	8006d3e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	607b      	str	r3, [r7, #4]
 8006d3c:	e000      	b.n	8006d40 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d3e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d06e      	beq.n	8006e24 <pvPortMalloc+0x178>
 8006d46:	4b4d      	ldr	r3, [pc, #308]	; (8006e7c <pvPortMalloc+0x1d0>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d869      	bhi.n	8006e24 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006d50:	4b4b      	ldr	r3, [pc, #300]	; (8006e80 <pvPortMalloc+0x1d4>)
 8006d52:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006d54:	4b4a      	ldr	r3, [pc, #296]	; (8006e80 <pvPortMalloc+0x1d4>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d5a:	e004      	b.n	8006d66 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d903      	bls.n	8006d78 <pvPortMalloc+0xcc>
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1f1      	bne.n	8006d5c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006d78:	4b3e      	ldr	r3, [pc, #248]	; (8006e74 <pvPortMalloc+0x1c8>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d050      	beq.n	8006e24 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d82:	6a3b      	ldr	r3, [r7, #32]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2208      	movs	r2, #8
 8006d88:	4413      	add	r3, r2
 8006d8a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	1ad2      	subs	r2, r2, r3
 8006d9c:	2308      	movs	r3, #8
 8006d9e:	005b      	lsls	r3, r3, #1
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d91f      	bls.n	8006de4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4413      	add	r3, r2
 8006daa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	f003 0307 	and.w	r3, r3, #7
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00a      	beq.n	8006dcc <pvPortMalloc+0x120>
        __asm volatile
 8006db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dba:	f383 8811 	msr	BASEPRI, r3
 8006dbe:	f3bf 8f6f 	isb	sy
 8006dc2:	f3bf 8f4f 	dsb	sy
 8006dc6:	613b      	str	r3, [r7, #16]
    }
 8006dc8:	bf00      	nop
 8006dca:	e7fe      	b.n	8006dca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	1ad2      	subs	r2, r2, r3
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006dde:	69b8      	ldr	r0, [r7, #24]
 8006de0:	f000 f920 	bl	8007024 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006de4:	4b25      	ldr	r3, [pc, #148]	; (8006e7c <pvPortMalloc+0x1d0>)
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	4a23      	ldr	r2, [pc, #140]	; (8006e7c <pvPortMalloc+0x1d0>)
 8006df0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006df2:	4b22      	ldr	r3, [pc, #136]	; (8006e7c <pvPortMalloc+0x1d0>)
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	4b23      	ldr	r3, [pc, #140]	; (8006e84 <pvPortMalloc+0x1d8>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d203      	bcs.n	8006e06 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006dfe:	4b1f      	ldr	r3, [pc, #124]	; (8006e7c <pvPortMalloc+0x1d0>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a20      	ldr	r2, [pc, #128]	; (8006e84 <pvPortMalloc+0x1d8>)
 8006e04:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	685a      	ldr	r2, [r3, #4]
 8006e0a:	4b1b      	ldr	r3, [pc, #108]	; (8006e78 <pvPortMalloc+0x1cc>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e16:	2200      	movs	r2, #0
 8006e18:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006e1a:	4b1b      	ldr	r3, [pc, #108]	; (8006e88 <pvPortMalloc+0x1dc>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	4a19      	ldr	r2, [pc, #100]	; (8006e88 <pvPortMalloc+0x1dc>)
 8006e22:	6013      	str	r3, [r2, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d006      	beq.n	8006e38 <pvPortMalloc+0x18c>
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	4619      	mov	r1, r3
 8006e30:	2094      	movs	r0, #148	; 0x94
 8006e32:	f7fa fadf 	bl	80013f4 <vTraceStoreMemMangEvent>
 8006e36:	e005      	b.n	8006e44 <pvPortMalloc+0x198>
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	20e8      	movs	r0, #232	; 0xe8
 8006e40:	f7fa fad8 	bl	80013f4 <vTraceStoreMemMangEvent>
    }
    ( void ) xTaskResumeAll();
 8006e44:	f7fe fc4e 	bl	80056e4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	f003 0307 	and.w	r3, r3, #7
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00a      	beq.n	8006e68 <pvPortMalloc+0x1bc>
        __asm volatile
 8006e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	60fb      	str	r3, [r7, #12]
    }
 8006e64:	bf00      	nop
 8006e66:	e7fe      	b.n	8006e66 <pvPortMalloc+0x1ba>
    return pvReturn;
 8006e68:	69fb      	ldr	r3, [r7, #28]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3728      	adds	r7, #40	; 0x28
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	2000799c 	.word	0x2000799c
 8006e78:	200079b0 	.word	0x200079b0
 8006e7c:	200079a0 	.word	0x200079a0
 8006e80:	20007994 	.word	0x20007994
 8006e84:	200079a4 	.word	0x200079a4
 8006e88:	200079a8 	.word	0x200079a8

08006e8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d055      	beq.n	8006f4a <vPortFree+0xbe>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006e9e:	2308      	movs	r3, #8
 8006ea0:	425b      	negs	r3, r3
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	4b28      	ldr	r3, [pc, #160]	; (8006f54 <vPortFree+0xc8>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10a      	bne.n	8006ed0 <vPortFree+0x44>
        __asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	60fb      	str	r3, [r7, #12]
    }
 8006ecc:	bf00      	nop
 8006ece:	e7fe      	b.n	8006ece <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00a      	beq.n	8006eee <vPortFree+0x62>
        __asm volatile
 8006ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006edc:	f383 8811 	msr	BASEPRI, r3
 8006ee0:	f3bf 8f6f 	isb	sy
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	60bb      	str	r3, [r7, #8]
    }
 8006eea:	bf00      	nop
 8006eec:	e7fe      	b.n	8006eec <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	4b18      	ldr	r3, [pc, #96]	; (8006f54 <vPortFree+0xc8>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d026      	beq.n	8006f4a <vPortFree+0xbe>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d122      	bne.n	8006f4a <vPortFree+0xbe>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	4b12      	ldr	r3, [pc, #72]	; (8006f54 <vPortFree+0xc8>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	43db      	mvns	r3, r3
 8006f0e:	401a      	ands	r2, r3
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8006f14:	f7fe fbd8 	bl	80056c8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	4b0e      	ldr	r3, [pc, #56]	; (8006f58 <vPortFree+0xcc>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4413      	add	r3, r2
 8006f22:	4a0d      	ldr	r2, [pc, #52]	; (8006f58 <vPortFree+0xcc>)
 8006f24:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
 8006f26:	6879      	ldr	r1, [r7, #4]
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	425b      	negs	r3, r3
 8006f2e:	461a      	mov	r2, r3
 8006f30:	2096      	movs	r0, #150	; 0x96
 8006f32:	f7fa fa5f 	bl	80013f4 <vTraceStoreMemMangEvent>
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f36:	6938      	ldr	r0, [r7, #16]
 8006f38:	f000 f874 	bl	8007024 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006f3c:	4b07      	ldr	r3, [pc, #28]	; (8006f5c <vPortFree+0xd0>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3301      	adds	r3, #1
 8006f42:	4a06      	ldr	r2, [pc, #24]	; (8006f5c <vPortFree+0xd0>)
 8006f44:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006f46:	f7fe fbcd 	bl	80056e4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006f4a:	bf00      	nop
 8006f4c:	3718      	adds	r7, #24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	200079b0 	.word	0x200079b0
 8006f58:	200079a0 	.word	0x200079a0
 8006f5c:	200079ac 	.word	0x200079ac

08006f60 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f66:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8006f6a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8006f6c:	4b27      	ldr	r3, [pc, #156]	; (800700c <prvHeapInit+0xac>)
 8006f6e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f003 0307 	and.w	r3, r3, #7
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00c      	beq.n	8006f94 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	3307      	adds	r3, #7
 8006f7e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f023 0307 	bic.w	r3, r3, #7
 8006f86:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	4a1f      	ldr	r2, [pc, #124]	; (800700c <prvHeapInit+0xac>)
 8006f90:	4413      	add	r3, r2
 8006f92:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f98:	4a1d      	ldr	r2, [pc, #116]	; (8007010 <prvHeapInit+0xb0>)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006f9e:	4b1c      	ldr	r3, [pc, #112]	; (8007010 <prvHeapInit+0xb0>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	4413      	add	r3, r2
 8006faa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006fac:	2208      	movs	r2, #8
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	1a9b      	subs	r3, r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f023 0307 	bic.w	r3, r3, #7
 8006fba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	4a15      	ldr	r2, [pc, #84]	; (8007014 <prvHeapInit+0xb4>)
 8006fc0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006fc2:	4b14      	ldr	r3, [pc, #80]	; (8007014 <prvHeapInit+0xb4>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006fca:	4b12      	ldr	r3, [pc, #72]	; (8007014 <prvHeapInit+0xb4>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	1ad2      	subs	r2, r2, r3
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006fe0:	4b0c      	ldr	r3, [pc, #48]	; (8007014 <prvHeapInit+0xb4>)
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	4a0a      	ldr	r2, [pc, #40]	; (8007018 <prvHeapInit+0xb8>)
 8006fee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	4a09      	ldr	r2, [pc, #36]	; (800701c <prvHeapInit+0xbc>)
 8006ff6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ff8:	4b09      	ldr	r3, [pc, #36]	; (8007020 <prvHeapInit+0xc0>)
 8006ffa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ffe:	601a      	str	r2, [r3, #0]
}
 8007000:	bf00      	nop
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	20000194 	.word	0x20000194
 8007010:	20007994 	.word	0x20007994
 8007014:	2000799c 	.word	0x2000799c
 8007018:	200079a4 	.word	0x200079a4
 800701c:	200079a0 	.word	0x200079a0
 8007020:	200079b0 	.word	0x200079b0

08007024 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800702c:	4b28      	ldr	r3, [pc, #160]	; (80070d0 <prvInsertBlockIntoFreeList+0xac>)
 800702e:	60fb      	str	r3, [r7, #12]
 8007030:	e002      	b.n	8007038 <prvInsertBlockIntoFreeList+0x14>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	429a      	cmp	r2, r3
 8007040:	d8f7      	bhi.n	8007032 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	4413      	add	r3, r2
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	429a      	cmp	r2, r3
 8007052:	d108      	bne.n	8007066 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	441a      	add	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	68ba      	ldr	r2, [r7, #8]
 8007070:	441a      	add	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d118      	bne.n	80070ac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	4b15      	ldr	r3, [pc, #84]	; (80070d4 <prvInsertBlockIntoFreeList+0xb0>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	429a      	cmp	r2, r3
 8007084:	d00d      	beq.n	80070a2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	441a      	add	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	601a      	str	r2, [r3, #0]
 80070a0:	e008      	b.n	80070b4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070a2:	4b0c      	ldr	r3, [pc, #48]	; (80070d4 <prvInsertBlockIntoFreeList+0xb0>)
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	601a      	str	r2, [r3, #0]
 80070aa:	e003      	b.n	80070b4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d002      	beq.n	80070c2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80070c2:	bf00      	nop
 80070c4:	3714      	adds	r7, #20
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	20007994 	.word	0x20007994
 80070d4:	2000799c 	.word	0x2000799c

080070d8 <__libc_init_array>:
 80070d8:	b570      	push	{r4, r5, r6, lr}
 80070da:	4d0d      	ldr	r5, [pc, #52]	; (8007110 <__libc_init_array+0x38>)
 80070dc:	4c0d      	ldr	r4, [pc, #52]	; (8007114 <__libc_init_array+0x3c>)
 80070de:	1b64      	subs	r4, r4, r5
 80070e0:	10a4      	asrs	r4, r4, #2
 80070e2:	2600      	movs	r6, #0
 80070e4:	42a6      	cmp	r6, r4
 80070e6:	d109      	bne.n	80070fc <__libc_init_array+0x24>
 80070e8:	4d0b      	ldr	r5, [pc, #44]	; (8007118 <__libc_init_array+0x40>)
 80070ea:	4c0c      	ldr	r4, [pc, #48]	; (800711c <__libc_init_array+0x44>)
 80070ec:	f000 f82e 	bl	800714c <_init>
 80070f0:	1b64      	subs	r4, r4, r5
 80070f2:	10a4      	asrs	r4, r4, #2
 80070f4:	2600      	movs	r6, #0
 80070f6:	42a6      	cmp	r6, r4
 80070f8:	d105      	bne.n	8007106 <__libc_init_array+0x2e>
 80070fa:	bd70      	pop	{r4, r5, r6, pc}
 80070fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007100:	4798      	blx	r3
 8007102:	3601      	adds	r6, #1
 8007104:	e7ee      	b.n	80070e4 <__libc_init_array+0xc>
 8007106:	f855 3b04 	ldr.w	r3, [r5], #4
 800710a:	4798      	blx	r3
 800710c:	3601      	adds	r6, #1
 800710e:	e7f2      	b.n	80070f6 <__libc_init_array+0x1e>
 8007110:	080085e0 	.word	0x080085e0
 8007114:	080085e0 	.word	0x080085e0
 8007118:	080085e0 	.word	0x080085e0
 800711c:	080085e4 	.word	0x080085e4

08007120 <memcpy>:
 8007120:	440a      	add	r2, r1
 8007122:	4291      	cmp	r1, r2
 8007124:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007128:	d100      	bne.n	800712c <memcpy+0xc>
 800712a:	4770      	bx	lr
 800712c:	b510      	push	{r4, lr}
 800712e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007132:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007136:	4291      	cmp	r1, r2
 8007138:	d1f9      	bne.n	800712e <memcpy+0xe>
 800713a:	bd10      	pop	{r4, pc}

0800713c <memset>:
 800713c:	4402      	add	r2, r0
 800713e:	4603      	mov	r3, r0
 8007140:	4293      	cmp	r3, r2
 8007142:	d100      	bne.n	8007146 <memset+0xa>
 8007144:	4770      	bx	lr
 8007146:	f803 1b01 	strb.w	r1, [r3], #1
 800714a:	e7f9      	b.n	8007140 <memset+0x4>

0800714c <_init>:
 800714c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800714e:	bf00      	nop
 8007150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007152:	bc08      	pop	{r3}
 8007154:	469e      	mov	lr, r3
 8007156:	4770      	bx	lr

08007158 <_fini>:
 8007158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715a:	bf00      	nop
 800715c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800715e:	bc08      	pop	{r3}
 8007160:	469e      	mov	lr, r3
 8007162:	4770      	bx	lr
